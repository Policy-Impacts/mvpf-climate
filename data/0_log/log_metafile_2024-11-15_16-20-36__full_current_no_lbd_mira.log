---------------------------------------------------------------------
      name:  <unnamed>
       log:  C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication P
> ackage/0_log/log_metafile_2024-11-15_16-20-36__full_current_no_lbd_
> mira.log
  log type:  text
 opened on:  15 Nov 2024, 16:20:36

. // create new folders
. cap mkdir "${results}"

. 
. 
. *------------------------------------------------------------------
> -----
. * 0 - Define Macros.
. *------------------------------------------------------------------
> -----
. 
. foreach correction_mode of global correction_modes {
  2.     global correction_mode `correction_mode'
  3.     global nrun = "${nrun}_`correction_mode'"
  4.     global causal_ests = "${code_files}/2a_causal_estimates_pape
> rs/`correction_mode'"
  5.     global causal_draws = "${code_files}/2b_causal_estimates_dra
> ws/`correction_mode'"
  6. 
.     if $usets == 1 {
  7.         global stamp = "${timestamp}__${nrun}"
  8.     }
  9.     else {
 10.         global stamp = "${nrun}"
 11.     }
 12.     // Set results to use
.     if "$use_causal_draws" == "redraw" {
 13.         global redraw_causal_estimates = "yes"
 14.         global ts_causal_draws = "${stamp}"
 15.         noi di "Create new causal draws: ${ts_causal_draws}"
 16.         cap mkdir "${causal_draws}/${ts_causal_draws}"
 17.     }
 18.     else if "$use_causal_draws" == "latest" {
 19.         global redraw_causal_estimates = "no"
 20.         local folders : dir "${causal_draws}" dirs "*"
 21.         global ts_causal_draws : word `:list sizeof folders' of 
> `folders'
 22.         noi di "Using latest causal draws: `ts_causal_draws'."
 23.     }
 24.     else {
 25.         global redraw_causal_estimates = "no"
 26.         global ts_causal_draws = "$use_causal_draws"
 27.         noi di "Using specific causal draws: `ts_causal_draws'."
 28.     }
 29.     /* Note: There is no "redraw bootstrap draws" option at the 
> moment. */
.     if "$use_bootstrap_draws" == "redraw" {
 30.         global redraw_bootstrap_estimates = "yes"
 31.         global ts_bootstrap_draws = "${stamp}"
 32.         noi di "Create new bootstrap draws: ${ts_bootstrap_draws
> }"
 33.         cap mkdir "${bootstrap_folder}/${ts_bootstrap_draws}"
 34.     }
 35.     else if "$use_bootstrap_draws" == "latest" {
 36.         global redraw_bootstrap_estimates = "no"
 37.         local folders : dir "${bootstrap_folder}" dirs "*"
 38.         global ts_bootstrap_draws : word `:list sizeof folders' 
> of `folders'
 39.         noi di "Using latest bootstrap draws: `ts_bootstrap_draw
> s'."
 40.     }
 41.     else {
 42.         global redraw_bootstrap_estimates = "no"
 43.         global ts_bootstrap_draws = "$use_bootstrap_draws"
 44.         noi di "Using specific bootstrap draws: `ts_bootstrap_dr
> aws'."
 45.     }
 46. 
.     global bootstrap_files = "${bootstrap_folder}/${ts_bootstrap_dr
> aws}"
 47.     global append_files = "${bootstrap_files}/all_policies_colla
> ted"
 48.     cap mkdir "${bootstrap_files}"
 49.     cap mkdir "${append_files}"
 50. 
. 
.     local programs_to_run $programs_to_run
 51.     local programs_pb_exclude $programs_pb_exclude
 52.     if "`correction_mode'" == "corrected" global programs_to_run
> : list programs_to_run - programs_pb_exclude
 53. 
.     if "`correction_mode'" == "corrected"{
 54.         di in red "the list of programs is ${programs_to_run}"
 55.     }
 56. 
.     *--------------------------------------------------------------
> ---------
.     * 0 - Macros
.     *--------------------------------------------------------------
> ---------
.     noi di "SECTION 0: MACROS"
 57.     qui do "${github}/wrapper/macros.do" "no"
 58. 
.     *--------------------------------------------------------------
> ---------
.     * 1 - Prepare causal estimates
.     *--------------------------------------------------------------
> ---------
.     noi di "SECTION 1: PREPARE CAUSAL ESTIMATES"
 59.     * 1 - prepare bootstrap draws of uncorrected causal estimate
> s
.     noi do "${github}/wrapper/prepare_causal_estimates.do" ///
>            "$programs_to_run" // programs to run / all_programs
 60. 
.     *--------------------------------------------------------------
> ---------
.     * 2 - Estimate MVPFs and other statistics, bootstrap, and loop 
> through global assumptions
.     *--------------------------------------------------------------
> ---------
. 
.     noi di "SECTION 2: ESTIMATION & BOOTSTRAPPING"
 61.         
.     do "${github}/wrapper/bootstrap_wrapper.do" ///
>        "${programs_to_run}" /// programs to run
>        "${modes_to_run}" // all_modes // baseline // modes to run
 62. 
.     if "${make_waterfall}" == "yes"{
 63.         do "${github}/wrapper/waterfalls.do" ///
>            "${programs_to_run}" /// programs to run
>            "${modes_to_run}" // all_modes // baseline // modes to r
> un
 64.     }
 65. 
.     *--------------------------------------------------------------
> ---------
.     * 3 - Compile results.
.     *--------------------------------------------------------------
> ---------
.     noi di "SECTION 3: COMPILE ESTIMATES & INFERENCE"
 66.     clear
 67. 
.     di in red "compile programs is ${compile_programs}"
 68.     di in red "compile loop modes is ${compile_loop_modes}"
 69.     foreach program of global compile_programs {
 70. 
.         di "${compile_loop_modes}"              
 71.         foreach mode of global compile_loop_modes {
 72.             append using "${bootstrap_files}/`program'_`mode'_es
> timates_${replications}_replications"   
 73.         }
 74. 
.     }
 75.     save "${results}/compiled_results_all_`correction_mode'", re
> place 
 76. 
. 
.     /*-------------------------------------------------------------
> ----------
>     * 4 - Append with Previous Run
>     *--------------------------------------------------------------
> ---------*/
. 
.     if "${append}" == "yes" {
 77.         
.         use "${code_files}/4_results/${original_stamp}/compiled_res
> ults_all_`correction_mode'", clear 
 78. 
.         foreach mode of global compile_loop_modes {
 79.             foreach program of global compile_programs {
 80.                 drop if program == "`program'" & assumptions == 
> "`mode'"        
 81.         
.             if "`mode'" == "baseline" {
 82.                 append using "${bootstrap_files}/`program'_`mode
> '_estimates_${replications}_replications"
 83.                 }
 84.             else {
 85.                 append using "${bootstrap_files}/`program'_`mode
> '_estimates_${replications}_replications"       
 86.                 }       
 87.             }
 88.         }
 89.         
.         save "${code_files}/4_results/${original_stamp}/compiled_re
> sults_all_`correction_mode'", replace
 90.     }
 91. 
. 
. 
.     *run publication bias metafile
.     if "`9'" == "yes"{
 92.         if "`correction_mode'" == "uncorrected_vJK" do "${github
> }/publication_bias/pub_bias_wrapper"
 93.     }
 94. 
. }
Create new causal draws: 2024-11-15_16-20-36__full_current_no_lbd_mir
> a_uncorrected_vJK
Create new bootstrap draws: 2024-11-15_16-20-36__full_current_no_lbd_
> mira_uncorrected_vJK
SECTION 0: MACROS
Rerun macros set to no through a positional argument
Rerun timepaths set to no because the globals are blank and the defau
> lt timepaths exist
Discount Rate is 2%
Social Cost of Carbon is $193
Grid Type is mid
Setting globals to no because macros has finished running
SECTION 1: PREPARE CAUSAL ESTIMATES

. *******************************************************************
> *************
. *                                               PREPARE CAUSAL ESTI
> MATES                                                           *
. *******************************************************************
> *************
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: " CPP_aj CPP_pj PER ac_
> mex audit_nudge baaqmd bento_gas bev_state bev_state_i bmm_crude bo
> lk_France bolk_Germany bolk_Spain bolk_UK bunker_fuel c4a_cw c4a_dw
>  c4a_fridge c4c_federal c4c_texas ca_cnt ca_electric cafe_as cafe_d
> k cafe_j care cog_gas cookstoves ct_solar cw_datta dahl_diesel dk_g
> as dorsey_itc dw_datta es_incent esa_fridge ethanol ets ets_c feder
> al_ev food_labels fridge_datta fridge_mex gelman_gas h_gas_01_06 h_
> gas_75_80 hancevic_rf her_compiled hev_usa_i hev_usa_s hitaj_ger hi
> taj_ptc hughes_csi hybrid_cr ihwap_hb ihwap_lb ihwap_nb india_cs in
> dia_offset jet_fuel k_gas_15_22 k_gas_89_14 levin_gas li_gas manzan
> _gas metcalf_ptc muehl_efmp mx_deforest ne_solar nicolini_eu nudge_
> ger nudge_qatar opower_e opower_ng park_gas pless_ho pless_tpo rao_
> crude rebate_es redd_offset retrofit_res rggi rice_in_st rice_in_up
>  rps russo_crp sent_ch_gas shirmali_ptc sl_offset small_gas_lr smal
> l_gas_sr solarize su_gas tiezzi_gas ug_deforest wap wap_mexico wap_
> nudge west_gas wisc_rf"

. 
. * Set options
. local replications ${reps}

. local correlation 1

. 
. *------------------------------------------------------------------
> -------------
. *       0. Define programs to run for
. *------------------------------------------------------------------
> -------------
. 
. if "`1'" == ""{ // file not being run externally
. 
.         global nrun = ""
.         global stamp = "${nrun}"
.         global redraw_causal_estimates = "yes"
.     global ts_causal_draws = "${stamp}"
.     cap mkdir "${causal_draws}/${ts_causal_draws}"
. }

. 
. 
. *Allow file to be ran externally from metafile
. if "`1'" != "" { // file is being run externally
.         local programs "`1'"
. 
. }

. 
. *Set the seed to the value defined in the metafile
. confirm number ${welfare_seed}

. set seed ${welfare_seed}

. 
. *Loop over programs
. foreach program in `programs' {
  2. 
.         set seed ${welfare_seed}
  3. 
.         *check if draws exist
.         cap confirm file "${causal_draws}/${ts_causal_draws}/`progr
> am'.dta"
  4.  
.         if _rc == 0 & "${redraw_causal_estimates}" != "yes" {
  5.                 di in red "Skipping redrawing for `program'"
  6.                 continue
  7.         }
  8. 
.         noi di "`program' "
  9. 
.         import excel "${causal_ests}/`program'.xlsx", clear sheet("
> wrapper_ready") firstrow
 10.         sort estimate
 11. 
.         *Get SE from t-stat
.         replace se = abs(pe / t_stat) if se == . & t_stat != .
 12. 
.         *Get SE from ci range (Assumed to be 95% CI)
.         replace se = ((ci_hi - ci_lo) / 2) / invnormal(0.975) if se
>  == . & ci_lo != . & ci_hi != .
 13. 
.         *Allow for p-value ranges
.         cap tostring p_value, replace force
 14.         g p_value_range = p_value if regexm(p_value,"\[")|regexm
> (p_value,"\]")
 15.         replace p_value = "" if p_value_range != ""
 16.         destring p_value, replace force
 17.         replace se = abs(pe / invnormal(p_value/2)) if p_value_r
> ange == "" & se == .
 18.         g p_val_low = strtrim(substr(p_value_range,strpos(p_valu
> e_range,"[")+1,strpos(p_value_range,";")-strpos(p_value_range,"[")-
> 1)) if p_value_range != ""
 19.         g p_val_high = strtrim(substr(p_value_range,strpos(p_val
> ue_range,";")+1,strpos(p_value_range,"]")-strpos(p_value_range,";")
> -1)) if p_value_range != ""
 20.         destring p_val_low p_val_high, replace
 21.         drop if estimate == ""
 22. 
.         *Get PE matrix
.         mkmat pe, matrix(pes) // just turns the column of estimates
>  into a matrix
 23. 
.         *Get correlation matrix
.         /* Here blocks are indicated by different base numbers and 
> the sign determines
>         the correlation direction. E.g. if we have four variables w
> ith corr_directions
>         1, -1, 2, 2 respectively, then 1 and 2 are negatively corre
> lated, 3 and 4 are
>         positively correlated, and 1 and 2 are uncorrelated with 3 
> and 4. */
. 
.         matrix corr = J(`=_N', `=_N', 0)
 24.         matlist corr
 25.         local namelist
 26.         forval j = 1/`=_N' {
 27.                 local name_`j' = estimate[`j']
 28.                 forval k = 1/`=_N' {
 29.                         if `j' == `k' matrix corr[`j',`k'] = 1
 30.                         else {
 31.                                 if abs(corr_direction[`j'])==abs
> (corr_direction[`k']) {
 32.                                         matrix corr[`j', `k'] = 
> sign(corr_direction[`j'] * corr_direction[`k']) * `correlation'
 33.                                 }
 34.                         else matrix corr[`j',`k'] = 0
 35.                         }
 36.                 }
 37.                 local namelist `namelist' `name_`j''
 38.         }       
 39. 
.         *Loop over replications to get SE matrix (can vary due to p
> -value ranges)
.         forval i = 1/`replications' {
 40.                 matrix se_`i' = J(`=_N', 1, 0)
 41.                 forval j = 1/`=_N' {
 42.                         if se[`j']!=. {
 43.                                 matrix se_`i'[`j',1] = se[`j']
 44.                         }
 45.                         if se[`j'] == . & p_value_range[`j'] != 
> "" {
 46.                                 matrix se_`i'[`j',1] = abs(pe[`j
> '] / invnormal(runiform(p_val_low[`j'],min(p_val_high[`j'],0.9))/2)
> )
 47.                         }
 48.                 }               
 49.         }
 50.         qui{
 51.                 *Draw uncorrected, save dataset 
.                 forval i = 1/`replications' {
 52.                         clear
 53.                         set obs 1
 54.                         drawnorm "`namelist'", n(1) sds(se_`i') 
> corr(corr) means(pes)
 55.                         local j = 0
 56.                         foreach var in `namelist' {
 57.                                 local ++j
 58.                                 g `var'_pe = pes[`j',1]
 59.                         }
 60.                         tempfile temp`i'
 61.                         save `temp`i''
 62.                 }
 63. 
.                 forval i = 1/`=`replications'-1' {
 64.                         append using `temp`i''
 65.                 }
 66.         }
 67. 
.         g draw_number = _n
 68.         order draw_number, first
 69. 
.         save "${causal_draws}/${ts_causal_draws}/`program'.dta", re
> place
 70. 
.         if _rc>0 {
 71.                 if _rc==1 continue, break
 72.                 di _rc
 73.                 local error_progs = "`error_progs'"+"`program'  
> "
 74.                 di as err "`program' broke"
 75.         }
 76. 
. }
CPP_aj 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/CPP_aj.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/CPP_aj.dta
    saved
CPP_pj 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/CPP_pj.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/CPP_pj.dta
    saved
PER 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/PER.dta not
    found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/PER.dta
    saved
ac_mex 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ac_mex.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ac_mex.dta
    saved
audit_nudge 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/audit_nudge.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/audit_nudge.
    > dta saved
baaqmd 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/baaqmd.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/baaqmd.dta
    saved
bento_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bento_gas.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bento_gas.dt
    > a saved
bev_state 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bev_state.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bev_state.dt
    > a saved
bev_state_i 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bev_state_i.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bev_state_i.
    > dta saved
bmm_crude 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bmm_crude.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bmm_crude.dt
    > a saved
bolk_France 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_France.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_France.
    > dta saved
bolk_Germany 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_Germany
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_Germany
    > .dta saved
bolk_Spain 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_Spain.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_Spain.d
    > ta saved
bolk_UK 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_UK.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bolk_UK.dta
    saved
bunker_fuel 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bunker_fuel.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/bunker_fuel.
    > dta saved
c4a_cw 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4a_cw.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4a_cw.dta
    saved
c4a_dw 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4a_dw.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4a_dw.dta
    saved
c4a_fridge 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4a_fridge.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4a_fridge.d
    > ta saved
c4c_federal 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4c_federal.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4c_federal.
    > dta saved
c4c_texas 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4c_texas.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/c4c_texas.dt
    > a saved
ca_cnt 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ca_cnt.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ca_cnt.dta
    saved
ca_electric 
(12 vars, 5 obs)
(0 real changes made)
(0 real changes made)
(5 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(5 missing values generated)
(0 real changes made)
(5 missing values generated)
(5 missing values generated)
p_val_low: all characters numeric; replaced as byte
(5 missing values generated)
p_val_high: all characters numeric; replaced as byte
(5 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4         c5 
-------------+------------------------------------------------------
          r1 |         0                                             
          r2 |         0          0                                  
          r3 |         0          0          0                       
          r4 |         0          0          0          0            
          r5 |         0          0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ca_electric.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ca_electric.
    > dta saved
cafe_as 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cafe_as.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cafe_as.dta
    saved
cafe_dk 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cafe_dk.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cafe_dk.dta
    saved
cafe_j 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cafe_j.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cafe_j.dta
    saved
care 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/care.dta not
    found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/care.dta
    saved
cog_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cog_gas.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cog_gas.dta
    saved
cookstoves 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cookstoves.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cookstoves.d
    > ta saved
ct_solar 
(12 vars, 3 obs)
(0 real changes made)
(0 real changes made)
(3 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(3 missing values generated)
(0 real changes made)
(3 missing values generated)
(3 missing values generated)
p_val_low: all characters numeric; replaced as byte
(3 missing values generated)
p_val_high: all characters numeric; replaced as byte
(3 missing values generated)
(0 observations deleted)

             |        c1         c2         c3 
-------------+--------------------------------
          r1 |         0                       
          r2 |         0          0            
          r3 |         0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ct_solar.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ct_solar.dta
    saved
cw_datta 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cw_datta.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/cw_datta.dta
    saved
dahl_diesel 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dahl_diesel.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dahl_diesel.
    > dta saved
dk_gas 
(13 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dk_gas.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dk_gas.dta
    saved
dorsey_itc 
(12 vars, 3 obs)
(0 real changes made)
(0 real changes made)
(3 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(3 missing values generated)
(0 real changes made)
(3 missing values generated)
(3 missing values generated)
p_val_low: all characters numeric; replaced as byte
(3 missing values generated)
p_val_high: all characters numeric; replaced as byte
(3 missing values generated)
(0 observations deleted)

             |        c1         c2         c3 
-------------+--------------------------------
          r1 |         0                       
          r2 |         0          0            
          r3 |         0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dorsey_itc.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dorsey_itc.d
    > ta saved
dw_datta 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(1 observation deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dw_datta.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/dw_datta.dta
    saved
es_incent 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/es_incent.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/es_incent.dt
    > a saved
esa_fridge 
(13 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/esa_fridge.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/esa_fridge.d
    > ta saved
ethanol 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ethanol.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ethanol.dta
    saved
ets 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ets.dta not
    found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ets.dta
    saved
ets_c 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ets_c.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ets_c.dta
    saved
federal_ev 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/federal_ev.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/federal_ev.d
    > ta saved
food_labels 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/food_labels.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/food_labels.
    > dta saved
fridge_datta 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(1 observation deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/fridge_datta
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/fridge_datta
    > .dta saved
fridge_mex 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/fridge_mex.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/fridge_mex.d
    > ta saved
gelman_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/gelman_gas.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/gelman_gas.d
    > ta saved
h_gas_01_06 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/h_gas_01_06.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/h_gas_01_06.
    > dta saved
h_gas_75_80 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/h_gas_75_80.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/h_gas_75_80.
    > dta saved
hancevic_rf 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hancevic_rf.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hancevic_rf.
    > dta saved
her_compiled 
(12 vars, 17 obs)
(0 real changes made)
(0 real changes made)
(17 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(17 missing values generated)
(0 real changes made)
(17 missing values generated)
(17 missing values generated)
p_val_low: all characters numeric; replaced as byte
(17 missing values generated)
p_val_high: all characters numeric; replaced as byte
(17 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+--------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
          r5 |         0          0          0          0 
          r6 |         0          0          0          0 
          r7 |         0          0          0          0 
          r8 |         0          0          0          0 
          r9 |         0          0          0          0 
         r10 |         0          0          0          0 
         r11 |         0          0          0          0 
         r12 |         0          0          0          0 
         r13 |         0          0          0          0 
         r14 |         0          0          0          0 
         r15 |         0          0          0          0 
         r16 |         0          0          0          0 
         r17 |         0          0          0          0 

             |        c5         c6         c7         c8 
-------------+--------------------------------------------
          r5 |         0                                  
          r6 |         0          0                       
          r7 |         0          0          0            
          r8 |         0          0          0          0 
          r9 |         0          0          0          0 
         r10 |         0          0          0          0 
         r11 |         0          0          0          0 
         r12 |         0          0          0          0 
         r13 |         0          0          0          0 
         r14 |         0          0          0          0 
         r15 |         0          0          0          0 
         r16 |         0          0          0          0 
         r17 |         0          0          0          0 

             |        c9        c10        c11        c12 
-------------+--------------------------------------------
          r9 |         0                                  
         r10 |         0          0                       
         r11 |         0          0          0            
         r12 |         0          0          0          0 
         r13 |         0          0          0          0 
         r14 |         0          0          0          0 
         r15 |         0          0          0          0 
         r16 |         0          0          0          0 
         r17 |         0          0          0          0 

             |       c13        c14        c15        c16        c17 
-------------+------------------------------------------------------
         r13 |         0                                             
         r14 |         0          0                                  
         r15 |         0          0          0                       
         r16 |         0          0          0          0            
         r17 |         0          0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/her_compiled
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/her_compiled
    > .dta saved
hev_usa_i 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hev_usa_i.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hev_usa_i.dt
    > a saved
hev_usa_s 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hev_usa_s.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hev_usa_s.dt
    > a saved
hitaj_ger 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hitaj_ger.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hitaj_ger.dt
    > a saved
hitaj_ptc 
(12 vars, 2 obs)
(1 real change made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hitaj_ptc.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hitaj_ptc.dt
    > a saved
hughes_csi 
(12 vars, 3 obs)
(0 real changes made)
(0 real changes made)
(3 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(3 missing values generated)
(0 real changes made)
(3 missing values generated)
(3 missing values generated)
p_val_low: all characters numeric; replaced as byte
(3 missing values generated)
p_val_high: all characters numeric; replaced as byte
(3 missing values generated)
(0 observations deleted)

             |        c1         c2         c3 
-------------+--------------------------------
          r1 |         0                       
          r2 |         0          0            
          r3 |         0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hughes_csi.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hughes_csi.d
    > ta saved
hybrid_cr 
(12 vars, 2 obs)
(0 real changes made)
(1 real change made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hybrid_cr.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/hybrid_cr.dt
    > a saved
ihwap_hb 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ihwap_hb.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ihwap_hb.dta
    saved
ihwap_lb 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ihwap_lb.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ihwap_lb.dta
    saved
ihwap_nb 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ihwap_nb.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ihwap_nb.dta
    saved
india_cs 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/india_cs.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/india_cs.dta
    saved
india_offset 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/india_offset
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/india_offset
    > .dta saved
jet_fuel 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/jet_fuel.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/jet_fuel.dta
    saved
k_gas_15_22 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/k_gas_15_22.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/k_gas_15_22.
    > dta saved
k_gas_89_14 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/k_gas_89_14.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/k_gas_89_14.
    > dta saved
levin_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/levin_gas.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/levin_gas.dt
    > a saved
li_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/li_gas.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/li_gas.dta
    saved
manzan_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/manzan_gas.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/manzan_gas.d
    > ta saved
metcalf_ptc 
(12 vars, 2 obs)
(1 real change made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/metcalf_ptc.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/metcalf_ptc.
    > dta saved
muehl_efmp 
(12 vars, 3 obs)
(0 real changes made)
(0 real changes made)
(3 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(3 missing values generated)
(0 real changes made)
(3 missing values generated)
(3 missing values generated)
p_val_low: all characters numeric; replaced as byte
(3 missing values generated)
p_val_high: all characters numeric; replaced as byte
(3 missing values generated)
(0 observations deleted)

             |        c1         c2         c3 
-------------+--------------------------------
          r1 |         0                       
          r2 |         0          0            
          r3 |         0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/muehl_efmp.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/muehl_efmp.d
    > ta saved
mx_deforest 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/mx_deforest.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/mx_deforest.
    > dta saved
ne_solar 
(13 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ne_solar.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ne_solar.dta
    saved
nicolini_eu 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/nicolini_eu.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/nicolini_eu.
    > dta saved
nudge_ger 
(13 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/nudge_ger.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/nudge_ger.dt
    > a saved
nudge_qatar 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/nudge_qatar.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/nudge_qatar.
    > dta saved
opower_e 
(13 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/opower_e.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/opower_e.dta
    saved
opower_ng 
(13 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/opower_ng.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/opower_ng.dt
    > a saved
park_gas 
(12 vars, 2 obs)
(0 real changes made)
(1 real change made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/park_gas.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/park_gas.dta
    saved
pless_ho 
(12 vars, 5 obs)
(0 real changes made)
(0 real changes made)
(5 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(5 missing values generated)
(0 real changes made)
(5 missing values generated)
(5 missing values generated)
p_val_low: all characters numeric; replaced as byte
(5 missing values generated)
p_val_high: all characters numeric; replaced as byte
(5 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4         c5 
-------------+------------------------------------------------------
          r1 |         0                                             
          r2 |         0          0                                  
          r3 |         0          0          0                       
          r4 |         0          0          0          0            
          r5 |         0          0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/pless_ho.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/pless_ho.dta
    saved
pless_tpo 
(12 vars, 6 obs)
(0 real changes made)
(0 real changes made)
(6 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(6 missing values generated)
(0 real changes made)
(6 missing values generated)
(6 missing values generated)
p_val_low: all characters numeric; replaced as byte
(6 missing values generated)
p_val_high: all characters numeric; replaced as byte
(6 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+--------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
          r5 |         0          0          0          0 
          r6 |         0          0          0          0 

             |        c5         c6 
-------------+---------------------
          r5 |         0            
          r6 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/pless_tpo.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/pless_tpo.dt
    > a saved
rao_crude 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rao_crude.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rao_crude.dt
    > a saved
rebate_es 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rebate_es.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rebate_es.dt
    > a saved
redd_offset 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/redd_offset.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/redd_offset.
    > dta saved
retrofit_res 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/retrofit_res
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/retrofit_res
    > .dta saved
rggi 
(12 vars, 10 obs)
(0 real changes made)
(0 real changes made)
(10 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(10 missing values generated)
(0 real changes made)
(10 missing values generated)
(10 missing values generated)
p_val_low: all characters numeric; replaced as byte
(10 missing values generated)
p_val_high: all characters numeric; replaced as byte
(10 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+--------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
          r5 |         0          0          0          0 
          r6 |         0          0          0          0 
          r7 |         0          0          0          0 
          r8 |         0          0          0          0 
          r9 |         0          0          0          0 
         r10 |         0          0          0          0 

             |        c5         c6         c7         c8 
-------------+--------------------------------------------
          r5 |         0                                  
          r6 |         0          0                       
          r7 |         0          0          0            
          r8 |         0          0          0          0 
          r9 |         0          0          0          0 
         r10 |         0          0          0          0 

             |        c9        c10 
-------------+---------------------
          r9 |         0            
         r10 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rggi.dta not
    found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rggi.dta
    saved
rice_in_st 
(13 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rice_in_st.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rice_in_st.d
    > ta saved
rice_in_up 
(12 vars, 3 obs)
(0 real changes made)
(0 real changes made)
(3 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(3 missing values generated)
(0 real changes made)
(3 missing values generated)
(3 missing values generated)
p_val_low: all characters numeric; replaced as byte
(3 missing values generated)
p_val_high: all characters numeric; replaced as byte
(3 missing values generated)
(0 observations deleted)

             |        c1         c2         c3 
-------------+--------------------------------
          r1 |         0                       
          r2 |         0          0            
          r3 |         0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rice_in_up.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rice_in_up.d
    > ta saved
rps 
(13 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rps.dta not
    found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/rps.dta
    saved
russo_crp 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/russo_crp.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/russo_crp.dt
    > a saved
sent_ch_gas 
(12 vars, 2 obs)
(1 real change made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/sent_ch_gas.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/sent_ch_gas.
    > dta saved
shirmali_ptc 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/shirmali_ptc
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/shirmali_ptc
    > .dta saved
sl_offset 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/sl_offset.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/sl_offset.dt
    > a saved
small_gas_lr 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/small_gas_lr
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/small_gas_lr
    > .dta saved
small_gas_sr 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/small_gas_sr
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/small_gas_sr
    > .dta saved
solarize 
(12 vars, 5 obs)
(0 real changes made)
(0 real changes made)
(5 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(5 missing values generated)
(0 real changes made)
(5 missing values generated)
(5 missing values generated)
p_val_low: all characters numeric; replaced as byte
(5 missing values generated)
p_val_high: all characters numeric; replaced as byte
(5 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4         c5 
-------------+------------------------------------------------------
          r1 |         0                                             
          r2 |         0          0                                  
          r3 |         0          0          0                       
          r4 |         0          0          0          0            
          r5 |         0          0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/solarize.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/solarize.dta
    saved
su_gas 
(12 vars, 2 obs)
(1 real change made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/su_gas.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/su_gas.dta
    saved
tiezzi_gas 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/tiezzi_gas.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/tiezzi_gas.d
    > ta saved
ug_deforest 
(13 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(1 missing value generated)
(0 real changes made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ug_deforest.
    > dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/ug_deforest.
    > dta saved
wap 
(12 vars, 2 obs)
(0 real changes made)
(0 real changes made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wap.dta not
    found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wap.dta
    saved
wap_mexico 
(12 vars, 1 obs)
(0 real changes made)
(0 real changes made)
(1 missing value generated)
(0 real changes made)
p_value: all characters numeric; replaced as double
variable se was byte now float
(1 real change made)
(1 missing value generated)
(1 missing value generated)
p_val_low: all characters numeric; replaced as byte
(1 missing value generated)
p_val_high: all characters numeric; replaced as byte
(1 missing value generated)
(0 observations deleted)

             |        c1 
-------------+----------
          r1 |         0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wap_mexico.d
    > ta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wap_mexico.d
    > ta saved
wap_nudge 
(12 vars, 3 obs)
(0 real changes made)
(0 real changes made)
(3 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as double
(2 missing values generated)
(1 real change made)
(3 missing values generated)
(3 missing values generated)
p_val_low: all characters numeric; replaced as byte
(3 missing values generated)
p_val_high: all characters numeric; replaced as byte
(3 missing values generated)
(0 observations deleted)

             |        c1         c2         c3 
-------------+--------------------------------
          r1 |         0                       
          r2 |         0          0            
          r3 |         0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wap_nudge.dt
    > a not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wap_nudge.dt
    > a saved
west_gas 
(13 vars, 2 obs)
(0 real changes made)
(1 real change made)
(2 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(2 missing values generated)
(0 real changes made)
(2 missing values generated)
(2 missing values generated)
p_val_low: all characters numeric; replaced as byte
(2 missing values generated)
p_val_high: all characters numeric; replaced as byte
(2 missing values generated)
(0 observations deleted)

             |        c1         c2 
-------------+---------------------
          r1 |         0            
          r2 |         0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/west_gas.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/west_gas.dta
    saved
wisc_rf 
(12 vars, 4 obs)
(0 real changes made)
(0 real changes made)
(4 missing values generated)
(0 real changes made)
p_value: all characters numeric; replaced as byte
(4 missing values generated)
(0 real changes made)
(4 missing values generated)
(4 missing values generated)
p_val_low: all characters numeric; replaced as byte
(4 missing values generated)
p_val_high: all characters numeric; replaced as byte
(4 missing values generated)
(0 observations deleted)

             |        c1         c2         c3         c4 
-------------+-------------------------------------------
          r1 |         0                                  
          r2 |         0          0                       
          r3 |         0          0          0            
          r4 |         0          0          0          0 
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wisc_rf.dta
    not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/2b_causal_estimates_draws/uncorrected_vJK/2024-11-15_16
    > -20-36__full_current_no_lbd_mira_uncorrected_vJK/wisc_rf.dta
    saved

. 
. *Throw errors if things didn't run
. if _rc!=1 {
.         global error_progs = "`error_progs'"
.         if "`error_progs'"!="" di as err "Finished running but the 
> following programs threw errors: `error_progs'"
.         else di in red "Finished running with no errors"
Finished running with no errors
. }

. 
. 
. 
. 
. 
. 
. 
. 
end of do-file
SECTION 2: ESTIMATION & BOOTSTRAPPING

. *******************************************************************
> *************
. *                                                               BOO
> TSTRAP WRAPPER                                                     
>      *
. *******************************************************************
> *************
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: " CPP_aj CPP_pj PER ac_
> mex audit_nudge baaqmd bento_gas bev_state bev_state_i bmm_crude bo
> lk_France bolk_Germany bolk_Spain bolk_UK bunker_fuel c4a_cw c4a_dw
>  c4a_fridge c4c_federal c4c_texas ca_cnt ca_electric cafe_as cafe_d
> k cafe_j care cog_gas cookstoves ct_solar cw_datta dahl_diesel dk_g
> as dorsey_itc dw_datta es_incent esa_fridge ethanol ets ets_c feder
> al_ev food_labels fridge_datta fridge_mex gelman_gas h_gas_01_06 h_
> gas_75_80 hancevic_rf her_compiled hev_usa_i hev_usa_s hitaj_ger hi
> taj_ptc hughes_csi hybrid_cr ihwap_hb ihwap_lb ihwap_nb india_cs in
> dia_offset jet_fuel k_gas_15_22 k_gas_89_14 levin_gas li_gas manzan
> _gas metcalf_ptc muehl_efmp mx_deforest ne_solar nicolini_eu nudge_
> ger nudge_qatar opower_e opower_ng park_gas pless_ho pless_tpo rao_
> crude rebate_es redd_offset retrofit_res rggi rice_in_st rice_in_up
>  rps russo_crp sent_ch_gas shirmali_ptc sl_offset small_gas_lr smal
> l_gas_sr solarize su_gas tiezzi_gas ug_deforest wap wap_mexico wap_
> nudge west_gas wisc_rf" "current"

. *Set options
. local debug = 1 // 1 noisily displays running .do files

. 
. *Set modes
. local modes "all"

. 
. /*
> Note: modes can contain any of the following:
> - baseline: only runs the baseline specification
> - current: only runs the 2020 specification
> */
. 
. // macro list
. *Set modes if running externally
. if "`2'"!="" local modes "`2'"

. 
. *Set all
. if "`modes'"=="all" local modes baseline current

. global compile_loop_modes "`modes'"

. 
. *Set estimates to be used
. local use_estimates $correction_mode

. 
. *------------------------------------------------------------------
> -------------
. *       0. Define programs to run for
. *------------------------------------------------------------------
> -------------
. global compile_programs `1'

. *Set programs if running externally
. if "`1'" != "" {
.         local programs "`1'"
. }

. 
. local prog_num = wordcount("`programs'")

. 
. *------------------------------------------------------------------
> -------------
. *       1. Simulations
. *------------------------------------------------------------------
> -------------
. global replications_master = $reps

. 
. foreach mode in `modes' {
  2.         di in red "the mode is `mode'"
  3. 
.         local m = 0 // reset counter
  4.         global replications $replications_master
  5.         local replications $reps
  6. 
.         ********** Looping through each program **********
. 
.         mat t`mode'=J(11, 5, .)
  7.         local x = 1
  8.         foreach program in `programs' {
  9. 
.                 *Sort issues where names of assumption files don't 
> line up with do file names
.                 local do_file = "`program'"
 10.                 local assumption_name = "`program'"
 11. 
.                 *Import program specific assumptions
.                 import excel "${assumptions}/program_specific/`assu
> mption_name'.xlsx", clear first
 12.                 ds
 13. 
.                 duplicates drop // drop rows of assumptions that ar
> e identical
 14.                 count
 15.                 local columns = r(N)
 16.                 ds
 17.                 local varying_assumptions "`r(varlist)'"
 18. 
.                 if inlist("`mode'","baseline", "current")  {
 19.                         confirm var spec_type // check for speci
> fication type indicator, previously had a capture
 20.                         if _rc==0 {
 21.                                 keep if spec_type == "`mode'"
 22.                                 assert _N == 1 | _N == 0
 23.                                 if _N == 0{
 24.                                         di in red "Skipping `pro
> gram' because `mode' does not exist for this program"
 25.                                         continue // skip program
> s missing certain assumptions
 26.                                 } 
 27.                 
.                                 qui ds spec_type, not
 28.                                 local varying_assumptions `r(var
> list)'
 29.                                 foreach assumption in `r(varlist
> )'  {
 30.                                         local `assumption'_1 = `
> assumption'[1]
 31.                                 }
 32.                         }       
 33. 
.                         keep in 1 // where not specified the first 
> row is the baseline specification
 34. 
.                         local correlation_1 = 1
 35.                         local varying_assumptions `varying_assum
> ptions' correlation
 36.                         local columns = _N
 37.                         di `columns'
 38.                 }
 39.                 if "`mode'" != "baseline"{
 40.                         keep if spec_type == "`mode'"
 41.                         ds
 42.                         local varying_assumptions `r(varlist)'
 43.                         foreach assumption in `r(varlist)'{
 44.                                 local `assumption'_1 = `assumpti
> on'[1]
 45.                         }
 46.                         local correlation_1 = 1
 47.                         local varying_assumptions `varying_assum
> ptions' correlation
 48.                         local columns = _N
 49.                         di `columns'
 50.                 }
 51. 
.                 local ++m
 52. 
.                 *Loop over types of assumptions
.                 forval c = 1/`columns' {
 53.                         noi di "Specification `c' of `columns', 
> program `m' of `prog_num' (`program')"
 54. 
.                         *set assumptions
.                         foreach assumption in `varying_assumptions'
>  {
 55.                                 global `assumption' ``assumption
> '_`c''
 56.                         }
 57.                         *generate estimates
.                         clear
 58. 
.                         set obs `replications'
 59. 
.                         di "`program'"
 60.                         * Generate variables to store the estima
> tes and clean globals
.                         local ests MVPF MVPF_no_cc cost WTP program
> _cost total_cost ///
>                         beh_fisc_ext utility_fisc_ext gas_fisc_ext 
> fed_fisc_ext state_fisc_ext ///
>                         WTP_USPres WTP_USFut WTP_RoW WTP_USTotal en
> viro_mvpf cost_mvpf firm_mvpf cost_wtp ///
>                         env_cost_wtp marginal infmarg wtp_private w
> tp_soc wtp_no_ice wtp_yes_ev wtp_yes_hev wtp_soc_rbd wtp_yes_ev_loc
> al wtp_no_ice_local env_cost_wtp_l wtp_soc_rbd_l ///
>                         wtp_yes_ev_g wtp_no_ice_g env_cost_wtp_g wt
> p_soc_rbd_g ///
>                         wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_glo
> b wtp_r_loc wtp_e_cost ///
>                         WTP_cc wtp_install wtp_prod wtp_prod_s wtp_
> prod_u wtp_cons wtp_deal admin_cost ///
>                         wtp_permits wtp_abatement permitrev wtp_no_
> leak wtp_leak ///
>                         wtp_soc_g wtp_soc_l fisc_ext_t fisc_ext_s f
> isc_ext_lr q_CO2 q_CO2_no p_spend ///
>                         ev_sub_c ev_sub_c_row ev_sub_c_us ev_sub_en
> v ev_sub_cost profits_fisc_e wtp_soc_l_po wtp_soc_l_dr ///
>                         gov_carbon resource_ce q_carbon_mck semie p
> ass_through ///
>                         permitrev_new permitrev_ex fiscalext firm_c
> ost_wtp c_savings resource_cost q_CO2_mck q_CO2_mck_no wtp_ctr gas_
> corp_fisc_e epsilon /// 
>                         transfer enviro_wtp cost_curve profits subs
> idies taxes ///
>                         wtp_batt wtp_local_w_r wind_g_wf wind_l_wf
 61.                         
.                         foreach est in `ests' {
 62.                                 gen `est'_`program' = .
 63.                                 macro drop `est'_`program'
 64.                         
.                         }
 65.                         cap recast double cost_wtp_`program'
 66.                         cap recast double cost_mvpf_`program'
 67.                         cap recast double MVPF_`program'
 68. 
.                         local i = 1
 69.                         * Simulations: run each do file ~1000 ti
> mes and store the estimates from each run
.                         if `replications' > 0 {
 70.                                 qui{
 71.                                         forvalues i = 1/`replica
> tions' {
 72.                                                 global draw_numb
> er = `i'
 73.                                                 di "${program_fo
> lder}/`do_file'"
 74.                                                 * Run the progra
> m with the "bootstrap" option and store estimates for this draw
.                                                 if `debug' == 0 qui
>  do "${program_folder}/`do_file'" `program' yes `use_estimates' `mo
> de' // first place the policy .do files are called
 75.                                                 if `debug' == 1 
> noi do "${program_folder}/`do_file'" `program' yes `use_estimates' 
> `mode'
 76.                                                 foreach est in `
> ests'{
 77.                                                         if "${`e
> st'_`program'}" != ""{
 78.                                                                 
> replace `est'_`program' = ${`est'_`program'} in `i'                
>                                      
 79.                                                         }
 80.                                                 }
 81.                                         }
 82.                                 }
 83.                         }
 84.                         *** End of 1000 loop
.                                 
.                         * Get point estimates
.                         global draw_number = 0
 85.                         if `debug' == 0 qui do "${program_folder
> }/`do_file'" `program' no `use_estimates' `mode'
 86.                         if `debug' == 1 noi do "${program_folder
> }/`do_file'" `program' no `use_estimates' `mode'
 87.                         local inf = 99999
 88.                         local infinity_`program' = `inf'
 89.                                 
.                         
.                         if `replications' >0 {
 90.                                 if inlist("`mode'","baseline", "
> current")  {
 91.                                         *Save draws
.                                         gen draw_id = _n
 92.                                         local program_temp `prog
> ram'
 93.                                         local mode_temp `mode'
 94.                                         save "${bootstrap_files}
> /`program_temp'_`mode_temp'_`replications'_draws_corr_1.dta", repla
> ce
 95.                                         drop draw_id
 96.                                 }
 97. 
. 
.                                 * If 99999 is not high enough, set 
> new infinity
.                                 qui su MVPF_`program' if !mi(MVPF_`
> program')
 98.                                 local max = r(max)
 99.                                 local min = r(min)
100.                                 local infinity_`program' = max(a
> bs(`max'), abs(`min'), `inf' , abs(${MVPF_`program'}))
101.                                 if `infinity_`program''>`inf' {
102.                                         local infinity_`program'
>  = `infinity_`program'' * 10
103.                                         replace MVPF_`program' =
>  `infinity_`program'' if MVPF_`program' == `inf'
104.                                         replace MVPF_`program' =
>  -`infinity_`program'' if MVPF_`program' == -`inf'
105.                                         if ${MVPF_`program'} == 
> `inf' {
106.                                                 global MVPF_`pro
> gram' = `infinity_`program''
107.                                         }
108.                                         if ${MVPF_`program'} == 
> -`inf' {
109.                                                 global MVPF_`pro
> gram' = -`infinity_`program''
110.                                         }
111. 
.                                 }
112.                         }
113. 
.                         
.                         *Save all estimates in separate rows
.                         clear
114.                         
.                         local word_count : word count `ests'
115.                         di in red `word_count'
116.                         scalar var_count = `word_count'
117.                         di var_count
118.                         set obs `=scalar(var_count)'
119.                         g col = `c'
120.                         g program = "`program'"
121.                         g component_type = ""
122.                         g component_value = .
123.                         recast double component_value
124.                         g l_component = .
125.                         g u_component = .
126.                         g component_sd = .
127.                         
.                         *********** Making the Final Table of Calcu
> lations ***********
.                         local i = 1
128.                         di in red "`i'"
129.                         foreach est in `ests' {
130.                                 di "`est'"
131.                                 replace component_type = "`est'"
>  if _n == `i'
132.                                 if "${`est'_`program'}" != ""{
133.                                         replace component_value 
> = ${`est'_`program'} if _n == `i'
134.                                 }
135.                                 local `est'index = `i'
136.                                 local ++ i
137.                         }
138.                         g infinity = `infinity_`program''
139.                         gen component_over_prog_cost = .
140.                         foreach est in WTP cost {
141.                                 replace component_over_prog_cost
>  = component_value / ${program_cost_`program'} if component_type ==
>  "`est'"
142.                         }
143. 
.                         *list assumptions
.                         gen assumptions = "`mode'"
144.                         gen correlation = $correlation
145.                         gen replications = $reps
146. 
.                         tempfile `program'_ests_`c'
147.                         save ``program'_ests_`c'', emptyok
148.                         ds
149.                 }
150. 
.                 *--------------------------------------------------
> -----------------------------
.                 *       3. Export estimates
.                 *--------------------------------------------------
> -----------------------------
.                 use ``program'_ests_1', clear
151. 
.                 if `columns' > 1 {
152.                         forval c = 2/`columns' {
153.                                 append using ``program'_ests_`c'
> '
154.                         }
155.                 }
156. 
.                 drop col
157. 
.                 tempfile `program'_unbdd_ests
158.                 save ``program'_unbdd_ests'
159.                 
.                 drop infinity
160.                 tempfile `program'_ests
161.                 save ``program'_ests'
162. 
. 
.                 if "`mode'" == "baseline"{
163.                         local out_temp ${bootstrap_files}
164. 
.                         export delimited using "`out_temp'/`program
> '_baseline_estimates_`replications'_replications.csv", replace
165.                         save "`out_temp'/`program'_baseline_esti
> mates_`replications'_replications.dta", replace // version used for
>  waterfall charts
166.                         use ``program'_unbdd_ests', clear
167.                         export delimited using "`out_temp'/`prog
> ram'_baseline_unbounded_estimates_`replications'_replications.csv",
>  replace
168.                 }
169.                 else{
170.                         save "${bootstrap_files}/`program'_`mode
> '_estimates_`replications'_replications.dta", replace // version us
> ed for waterfall charts
171.                         use ``program'_unbdd_ests', clear
172.                         save "${bootstrap_files}/`program'_`mode
> '_unbounded_estimates_`replications'_replications.dta", replace
173.                 }
174. 
.                 pause
175. 
.                 di in red "Finished running for `program' under `mo
> de'"
176. 
.                 *Get back bounded estimates for inspection
.                 use ``program'_ests', clear
177. 
. 
.                 if _rc > 0 {
178.                         if _rc == 1 continue, break
179.                         local error_progs = "`error_progs'"+"`pr
> ogram' on `mode', "
180.                         di as err "`program' broke"
181.                 }
182. 
.         } //end of program loop
183. } //end of mode loop
the mode is current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   ef_region     State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   ef_region     State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   ef_region     State
1
Specification 1 of 1, program 1 of 100 (CPP_aj)
Number of observations (_N) was 0, now 0.
CPP_aj

. *************************************************************
. /* 0. Program:  Critical Peak Pricing  - Active Joiners     */
. *************************************************************
. 
. /*
> "Default Effects and Follow-On Behaviour: Evidence from An Electric
> ity Pricing Program"
> Fowlie, M, Wolfram, C, Baylis, P, et al 
> *https://escholarship.org/content/qt3wv2r6t2/qt3wv2r6t2.pdf
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. 
. global spec_type = "`4'"

. 
. local mc_assumption = "high" // can be low, high, or vll

. 
. *The low case represents a marginal cost of 0.5 for the next kwh wh
> ereas high represents a marginal cost of 1 for the next kwh. The vl
> l case assumes there will be blackout so it is transferring a kwh f
> rom one person to another person valued at the vll
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"ATE"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.658           .      -.658      -.6
> 58
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
. restore

. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "`4'" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. 
. ****************************************************
. /* 3b. Policy Specific Assumptions */
. ****************************************************
. local tons_per_lb = 0.0004536

. 
. *We are assuming the marginal KWh during peak times is coming from 
> Coal
. *All emissions factors are from eGRID 2020
. local ch4_coal = 0.2412 * `tons_per_lb' // tons/MWh

. local nox_coal = 1.401 * `tons_per_lb' // tons/MWh

. local so2_coal = 1.959 * `tons_per_lb' // tons/MWh

. local co2_coal = 2165.370 * `tons_per_lb' // tons/MWh

. 
. // Unweighted == weighted by electricity generation, not VMT.
. local so2_cost = ${md_SO2_`dollar_year'_unweighted} * (${cpi_`dolla
> r_year'}/${cpi_${md_dollar_year}})

. local nox_cost = ${md_NOx_`dollar_year'_unweighted} * (${cpi_`dolla
> r_year'}/${cpi_${md_dollar_year}})

. 
. local co2_cost = ${sc_CO2_`dollar_year'} * (${cpi_`dollar_year'}/${
> cpi_${sc_dollar_year}})

. local ch4_cost = ${sc_CH4_`dollar_year'} * (${cpi_`dollar_year'}/${
> cpi_${sc_dollar_year}})

. 
. local env_local_per_kwh = ((`nox_cost' * `nox_coal') + (`so2_coal' 
> * `so2_cost')) / 1000 

. 
. local env_global_per_kwh = ((`ch4_coal' * ${sc_CH4_2020}) + (`co2_c
> oal' * ${sc_CO2_2020})) / 1000 // Total enviro ends up being about 
> 2 times higher than the AVERT marginal kwh enviro benefit

. 
. local marginal_cost = 0.5 // cost of the next kwh during peak times
>  from Rob - this is somewhere betwen 0.5 and 1

. 
. if "`mc_assumption'" == "high" {
.         local marginal_cost = 1 // cost of the next kwh during peak
>  times from Rob - this is somewhere betwen 0.5 and 1
. }

. 
. local vll = 4.292 // $/kWh - Value of Lost Load

. 
. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Using standard assumptions that 28% of utilities are public and a 
> 10% profit tax
. local profit_loss_private = (${kwh_price_2020_US} - `marginal_cost'
> ) * (1 - ${utility_public}) * (1 - ${utility_profit})

. 
. local profit_loss_public =  ((${kwh_price_2020_US} - `marginal_cost
> ') * ${utility_public}) + ((${kwh_price_2020_US} - `marginal_cost')
>  * (1 - ${utility_public}) * ${utility_profit})

. 
. if "`mc_assumption'" == "vll" {
.         local profit_loss_private = 0 
.         local profit_loss_public = 0
. }

. 
. if "${value_profits}" == "no" {
.         local profit_loss_private = 0 
.         local profit_loss_public = 0
. }

. 
. local epsilon = (`ATE' / 2.49)/3.50

. local semie = (`epsilon' / ${kwh_price_2020_US}) * (1/100) * -1

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. local wtp_cons = .01 // Increasing the price of electricity in peak
>  times by 1 cent

. 
. local wtp_producers = `profit_loss_private' * `semie' // They lose 
> money in the absence of this policy so they have a positive wtp

. 
. local global_pollutants = -1 * `env_global_per_kwh' * `semie'

. local local_pollutants = -1 * `env_local_per_kwh' * `semie'

. 
. if "`mc_assumption'" == "vll" {
.         local wtp_cons = .01 - `vll' * `semie'
.         local local_pollutants = 0
.         local global_pollutants = 0
. }

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local q_carbon = (`co2_coal'/1000) * `semie'

. 
. if "`mc_assumption'" == "vll" {
.         local q_carbon = 0
. }

. * Total WTP
. local WTP = `wtp_cons' + `wtp_society' + `wtp_producers' - (`global
> _pollutants' * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `wtp_cons' + `local_pollutants' + `wtp_producers
> '

. local WTP_USFut =     ${USShareFutureSSC}  * (`global_pollutants' -
>  (`global_pollutants' * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1 - ${USShareFutureSSC}) * `global_pollutants'

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = .01 // Increasing the price of electricity in 
> peak times by 1 cent

. 
. local fisc_ext_t = `profit_loss_public' * `semie' * -1

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = 1

. 
. local resource_cost = 1

. 
. local q_carbon_mck = (`ch4_coal' + `co2_coal') / 1000

. 
. local resource_ce = -`resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `semie' 

. 
. ****************
. /* 8. Output */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. 
. 
. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = `wtp_producers'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob", "wtp_loc", "wtp
> _prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "CPP - `mc_assumption'"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `"Producers"' 5 `"Total WTP"' 7 `""Program" "Cost""' 
> 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 11
>  `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 3

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_aj_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_aj_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_aj_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_aj_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for CPP_aj under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   ef_region     State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   ef_region     State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   ef_region     State
1
Specification 1 of 1, program 2 of 100 (CPP_pj)
Number of observations (_N) was 0, now 0.
CPP_pj

. *******************************************************************
> ******************
. /*    0. Program:  Critical Peak Pricing - Passive Joiners         
>  */
. *******************************************************************
> ******************
. 
. /*
> "Default Effects and Follow-On Behaviour: Evidence from An Electric
> ity Pricing Program"
> Fowlie, M, Wolfram, C, Baylis, P, et al 
> https://escholarship.org/content/qt3wv2r6t2/qt3wv2r6t2.pdf
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. 
. global spec_type = "`4'"

. 
. local mc_assumption = "high" // can be low, high, or vll

. 
. *The low case represents a marginal cost of 0.5 for the next kwh wh
> ereas high represents a marginal cost of 1 for the next kwh. The vl
> l case assumes there will be blackout so it is transferring a kwh f
> rom one person to another person valued at the vll
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"ATE"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.242           .      -.242      -.2
> 42
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
. restore

. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "`4'" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. 
. ****************************************************
. /* 3b. Policy Specific Assumptions */
. ****************************************************
. local tons_per_lb = 0.0004536

. 
. *We are assuming the marginal KWh during peak times is coming from 
> Coal
. *All emissions factors are from eGRID 2020
. local ch4_coal = 0.2412 * `tons_per_lb' // tons/MWh

. local nox_coal = 1.401 * `tons_per_lb' // tons/MWh

. local so2_coal = 1.959 * `tons_per_lb' // tons/MWh

. local co2_coal = 2165.370 * `tons_per_lb' // tons/MWh

. 
. 
. // Unweighted == weighted by electricity generation, not VMT.
. local so2_cost = ${md_SO2_`dollar_year'_unweighted} * (${cpi_`dolla
> r_year'}/${cpi_${md_dollar_year}})

. local nox_cost = ${md_NOx_`dollar_year'_unweighted} * (${cpi_`dolla
> r_year'}/${cpi_${md_dollar_year}})

. 
. local co2_cost = ${sc_CO2_`dollar_year'} * (${cpi_`dollar_year'}/${
> cpi_${sc_dollar_year}})

. local ch4_cost = ${sc_CH4_`dollar_year'} * (${cpi_`dollar_year'}/${
> cpi_${sc_dollar_year}})

. 
. local env_local_per_kwh = ((`nox_cost' * `nox_coal') + (`so2_coal' 
> * `so2_cost')) / 1000 

. 
. local env_global_per_kwh = ((`ch4_coal' * ${sc_CH4_2020}) + (`co2_c
> oal' * ${sc_CO2_2020})) / 1000 // Total enviro ends up being about 
> 2 times higher than the AVERT marginal kwh enviro benefit

. 
. local marginal_cost = 0.5 // cost of the next kwh during peak times
>  from Rob - this is somewhere betwen 0.5 and 1

. 
. if "`mc_assumption'" == "high" {
.         local marginal_cost = 1 // cost of the next kwh during peak
>  times from Rob - this is somewhere betwen 0.5 and 1
. }

. 
. local vll = 4.292 // $/kWh - Value of Lost Load

. 
. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Using standard assumptions that 28% of utilities are public and a 
> 10% profit tax
. local profit_loss_private = (${kwh_price_2020_US} - `marginal_cost'
> ) * (1 - ${utility_public}) * (1 - ${utility_profit})

. 
. local profit_loss_public =  ((${kwh_price_2020_US} - `marginal_cost
> ') * ${utility_public}) + ((${kwh_price_2020_US} - `marginal_cost')
>  * (1 - ${utility_public}) * ${utility_profit})

. 
. if "`mc_assumption'" == "vll" {
.         local profit_loss_private = 0 
.         local profit_loss_public = 0
. }

. 
. if "${value_profits}" == "no" {
.         local profit_loss_private = 0 
.         local profit_loss_public = 0
. }

. 
. local epsilon = (`ATE' / 2.49)/3.50

. local semie = (`epsilon' / ${kwh_price_2020_US}) * (1/100) * -1

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. local wtp_cons = .01 // Increasing the price of electricity in peak
>  times by 1 cent

. 
. local wtp_producers = `profit_loss_private' * `semie' // They lose 
> money in the absence of this policy so they have a positive wtp

. 
. local global_pollutants = -1 * `env_global_per_kwh' * `semie'

. local local_pollutants = -1 * `env_local_per_kwh' * `semie'

. 
. if "`mc_assumption'" == "vll" {
.         local wtp_cons = .01 - `vll' * `semie'
.         local local_pollutants = 0
.         local global_pollutants = 0
. }

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local q_carbon = (`co2_coal'/1000) * `semie'

. 
. if "`mc_assumption'" == "vll" {
.         local q_carbon = 0
. }

. * Total WTP
. local WTP = `wtp_cons' + `wtp_society' + `wtp_producers' - (`global
> _pollutants' * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `wtp_cons' + `local_pollutants' + `wtp_producers
> '

. local WTP_USFut =     ${USShareFutureSSC}  * (`global_pollutants' -
>  (`global_pollutants' * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1 - ${USShareFutureSSC}) * `global_pollutants'

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = .01 // Increasing the price of electricity in 
> peak times by 1 cent

. 
. local fisc_ext_t = `profit_loss_public' * `semie' * -1

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = 1

. 
. local resource_cost = 1

. 
. local q_carbon_mck = (`ch4_coal' + `co2_coal') / 1000

. 
. local resource_ce = -`resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `semie' 

. 
. ****************
. /* 8. Output */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. 
. 
. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = `wtp_producers'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob", "wtp_loc", "wtp
> _prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "CPP - `mc_assumption'"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `"Producers"' 5 `"Total WTP"' 7 `""Program" "Cost""' 
> 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 11
>  `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 3

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000005.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_pj_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_pj_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_pj_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/CPP_pj_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for CPP_pj under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   ef_region     State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   ef_region     State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   ef_region     State
1
Specification 1 of 1, program 3 of 100 (PER)
Number of observations (_N) was 0, now 0.
PER

. *******************************************************************
> ******************
. /*       0. Program:  Peak Energy Reports           */
. *******************************************************************
> ******************
. 
. /*
> "The Impact of Demand Response
> on Energy Consumption and Economic Welfare" 
> https://www.rmetcalfe.net/_files/ugd/fe9abe_1407ffb825d44414846a665
> 885c513a5.pdf
> */
. 
. /*
> "Testing for crowd out in social nudges: 
> Evidence from a natural field experiment in the market for electric
> ity"
> https://www.pnas.org/doi/10.1073/pnas.1802874115
> */
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. local mc_assumption = "high" // can be low, high, or vll

. 
. if "${PER_robustness}" == "yes" {
.         local mc_assumption = "${PER_mc}"
. }

. 
. /* The low case represents a marginal cost of 0.5 for the next kwh 
> whereas high represents a marginal cost of 1 for 
> the next kwh. The vll case assumes there will be blackout so it is 
> transferring a kwh from one person to another person 
> valued at the vll */
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow          
. levelsof estimate, local(estimates)
`"ATE"'
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.038           .      -.038      -.0
> 38
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
. restore

. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. local tons_per_lb = 0.000453592

. 
. *We are assuming the marginal kWh during peak times is coming from 
> coal
. *All emissions factors are from eGRID 2020
. local ch4_coal = 0.2412 * `tons_per_lb' // tons/MWh

. local nox_coal = 1.401 * `tons_per_lb' // tons/MWh

. local so2_coal = 1.959 * `tons_per_lb' // tons/MWh

. local co2_coal = 2165.370 * `tons_per_lb' // tons/MWh

. 
. // Unweighted == weighted by electricity generation, not VMT.
. local so2_cost = ${md_SO2_`dollar_year'_unweighted} * (${cpi_`dolla
> r_year'} / ${cpi_${md_dollar_year}})

. local nox_cost = ${md_NOx_`dollar_year'_unweighted} * (${cpi_`dolla
> r_year'} / ${cpi_${md_dollar_year}})

. 
. local co2_cost = ${sc_CO2_`dollar_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. local ch4_cost = ${sc_CH4_`dollar_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. local env_local_per_kwh = ((`nox_cost' * `nox_coal') + (`so2_coal' 
> * `so2_cost')) / 1000 

. 
. local env_global_per_kwh = ((`ch4_coal' * `ch4_cost') + (`co2_coal'
>  * `co2_cost')) / 1000 // Total enviro ends up being about 2 times 
> higher than the AVERT marginal kwh enviro benefit

. 
. local marginal_cost = 0.5 // cost of the next kwh during peak times

. 
. if "`mc_assumption'" == "high" {
.         local marginal_cost = 1 // cost of the next kwh during peak
>  times
. }

. 
. local baseline_consumption = 0.65 // kWh/hr from paper, exp(-0.428)
>  from Figure 5 of Brandon et al. 

. 
. local hours = 5 // Length of the peak times from the paper

. local cost = 0.1 // direct cost of the intervention per person

. 
. local vll = 4.292 * (${cpi_`dollar_year'}/${cpi_2020}) // $/kWh - V
> alue of Lost Load. Converted from /MWh to /KWh. Reported in 2020 do
> llars. https://media.rff.org/documents/WP_23-10.pdf

. 
. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. local kwh_reduction = `baseline_consumption' * `hours' * `ATE' * -1

. 
. *Using standard assumptions that 28% of utilities are public and a 
> 10% profit tax
. local profit_loss_private = (${kwh_price_2020_US} - `marginal_cost'
> ) * (1 - ${utility_public}) * (1 - ${utility_profit}) * `kwh_reduct
> ion'

. local kwh_price = ${kwh_price_2020_US} // for Latex

. 
. local profit_loss_public =  ((${kwh_price_2020_US} - `marginal_cost
> ') * ${utility_public} * `kwh_reduction') + ///
>                                                         ((${kwh_pri
> ce_2020_US} - `marginal_cost') * (1 - ${utility_public}) * ${utilit
> y_profit} * `kwh_reduction')

. local profit_pub_rev = (${kwh_price_2020_US} - `marginal_cost') * $
> {utility_public} * `kwh_reduction' // for Latex

. local profit_pri_rev = (${kwh_price_2020_US} - `marginal_cost') * (
> 1 - ${utility_public}) * ${utility_profit} * `kwh_reduction' // for
>  Latex

. 
. if "`mc_assumption'" == "vll" {
.         local profit_loss_private = 0 
.         local profit_loss_public = 0
. }

. 
. local program_cost = `cost'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. local wtp_consumers = 0

. 
. local wtp_producers = -1 * `profit_loss_private' // They lose money
>  in the absence of this policy so they have a positive wtp. Don't d
> o same for public loss b/c cost decreases. 

. local wtp_prod_n = `wtp_producers' / `program_cost' // for Latex

. 
. * Social Costs
. local local_pollutants = `kwh_reduction' * `env_local_per_kwh'

. local local_pollutants_n = `local_pollutants' / `program_cost' // f
> or Latex

. 
. local global_pollutants = `kwh_reduction' * `env_global_per_kwh'

. local wtp_glob = `global_pollutants' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_glob_n = `wtp_glob' / `program_cost' // for Latex

. 
. if "`mc_assumption'" == "vll" {
.         local wtp_consumers = `vll' * `kwh_reduction'
.         local local_pollutants = 0
.         local global_pollutants = 0
. }

. 
. local wtp_consumers_n = `wtp_consumers' / `program_cost' // for Lat
> ex

. 
. * Social benefits from reduced carbon
. local wtp_society = `global_pollutants' + `local_pollutants'

. local wtp_soc = `wtp_glob' + `local_pollutants'

. local wtp_soc_n = `wtp_soc' / `program_cost' 

. 
. local q_carbon = (`co2_coal' / 1000) * `kwh_reduction'

. 
. if "`mc_assumption'" == "vll" {
.         local q_carbon = 0
. }

. 
. * Total WTP
. local WTP = `wtp_consumers' + `wtp_society' + `wtp_producers' - (`g
> lobal_pollutants' * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. local WTP_n = `WTP' / `program_cost' // for Latex

. 
. // Quick decomposition
. local WTP_USPres = `wtp_consumers' + `local_pollutants' + `wtp_prod
> ucers'

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - (`global_pollutants' * ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants'

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. 
. local fisc_ext_t = `profit_loss_public' // Saves government money b
> /c utilities don't lose as much.

. local fisc_ext_t_n = `fisc_ext_t' / `program_cost' // for Latex

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. local fisc_ext_lr_n = `fisc_ext_lr' / `program_cost' // for Latex

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. local total_cost_n = `total_cost' / `program_cost' // for Latex

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = 1

. 
. local energy_savings = `kwh_reduction' * `energy_cost'

. 
. local per_cost = `program_cost'

. 
. local resource_cost = `per_cost' - `energy_savings'

. local per_price = `program_cost'

. local kwh_reduc = `kwh_reduction'

. 
. local q_carbon_mck = `kwh_reduction' * (`ch4_coal' + `co2_coal') / 
> 1000

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_consumers'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = `wtp_producers'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "PER - `mc_assumption'"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `"Producers"' 5 `"Total WTP"' 7 `""Program" "Cost""' 
> 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 11
>  `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 3

. global color_group3_`1' = 4

. global color_group4_`1' = 4

. global cost_color_start_`1' = 7

. global color_group5_`1' = 10

. 
. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
1.5998132

. di `total_cost'
.0617957

. di `WTP'
.09886158

. di `global_pollutants' + `local_pollutants'
.02980613

. di `kwh_reduction'
.1235

. di `WTP_USPres' + `WTP_USFut' + `WTP_RoW'
.09886158

. 
. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs kwh_reduction wtp_glob local_pollutan
> ts wtp_soc local_pollutants_n wtp_glob_n wtp_soc_n wtp_prod_n ///
>                           util_producer_surplus WTP_n tax_rate util
> ity_fisc_ext fisc_ext_lr_n MVPF total_cost_n program_cost env_local
> _per_kwh ///
>                           env_global_per_kwh global_pollutants kwh_
> price profit_loss_private profit_pub_rev profit_pri_rev fisc_ext_t_
> n ///
>                           wtp_consumers_n
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'_`mc_assumption'.sty", w
> rite replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> `mc_assumption'}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         local `original' = trim("`: display %5.2fc 
> ``original'''")
 10.                         local command = "\newcommand{\\`newname'
> `1'`4'`mc_assumption'}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000008.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/PER_current_estimates_0_replications
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/PER_current_estimates_0_replications
    > .dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/PER_current_unbounded_estimates_0_re
    > plications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/PER_current_unbounded_estimates_0_re
    > plications.dta saved
Finished running for PER under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 4 of 100 (ac_mex)
Number of observations (_N) was 0, now 0.
ac_mex

. *******************************************************************
> ******************
. /*       0. Program: Cash for Coolers (air conditioners) - Mexico  
>        */
. *******************************************************************
> ******************
. 
. /*
> Davis, Lucas W., Alan Fuchs, and Paul Gertler. 
> "Cash for coolers: evaluating a large-scale appliance replacement p
> rogram in Mexico." 
> American Economic Journal: Economic Policy 6.4 (2014): 207-38.
> * https://www.aeaweb.org/articles?id=10.1257/pol.6.4.207
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ac_mex no uncorrected_v
> JK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"kwh_summer"' `"kwh_winter"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         -15           .        -15        -
> 15

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         -.2           .        -.2        -
> .2
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.         *i. Import energy rebate assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("energy_rebate")
(3 vars, 6 obs)

.                 
.                 levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.         restore

.                 
.         local marginal_valuation = ${val_given}

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************
.         local lifetime = 5 // Paper assumes that the program accele
> rates retirement by 5 years

.         local tons_per_gram = .000001

.         
.         /* Do not have reliable non-CO2 numbers for Mexico grid
>         local SO2_per_kwh = ${md_SO2_`dollar_year'_unweighted} * ($
> {cpi_`dollar_year'}/${cpi_${md_dollar_year}}) * 9.1 * `tons_per_gra
> m'
>         
>         local NOx_per_kwh = ${md_NOx_`dollar_year'_unweighted} * ($
> {cpi_`dollar_year'}/${cpi_${md_dollar_year}}) * 8.5 * `tons_per_gra
> m'
>         */
.         local SO2_per_kwh = 0

.         local NOx_per_kwh = 0

.         
.         *431 gCO2/kWh from: https://www.climate-transparency.org/wp
> -content/uploads/2021/10/CT2021Mexico.pdf 
.         local CO2_per_kwh = ${sc_CO2_`dollar_year'} * (${cpi_`dolla
> r_year'}/${cpi_2020}) * 431 * `tons_per_gram'

.                 
.         local adj_subsidy = (13400000 / 98604) * (${cpi_`dollar_yea
> r'}/${cpi_2012}) // total spent on program divided by number of ac 
> replacements

.                 
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
.         local kwh_change = `kwh_winter' * 6 + `kwh_summer' * 6 // C
> onverting monthly effect to annual

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_marginal = 0.5 // 50% share supported by results from: h
> ttps://www.sciencedirect.com/science/article/pii/S0047272714000589

. 
. local wtp_inf = `adj_subsidy' * `prop_marginal'

. local wtp_marg = `adj_subsidy' * `marginal_valuation' * `prop_margi
> nal'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = ((`kwh_change' * (`SO2_per_kwh' + `NOx_per
> _kwh')) + ((`kwh_change' * (`SO2_per_kwh' + `NOx_per_kwh'))/`discou
> nt') * (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `prop_marginal'
>  * `r'

. 
. local global_pollutants = ((`kwh_change' * (`CO2_per_kwh')) + ((`kw
> h_change' * (`CO2_per_kwh'))/`discount') * (1 - (1/(1+`discount')^(
> `lifetime' - 1)))) * `prop_marginal' * `r'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = ((-1 * `kwh_change' * `prop_marginal' * `CO2_per_k
> wh' * `lifetime')/(1/`tons_per_gram')) * `r'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `adj_subsidy'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "AC Rebate - Mexico"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
.67351692

. di `total_cost'
153.44266

. di `WTP'
103.34623

. di `wtp_cons'
114.91258

. di `local_pollutants'
0

. di `global_pollutants'
-14.664518

. di `rebound_global'
-2.8722808

. di `rebound_local'
0

. di `wtp_society'
-11.792237

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
103.34623

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
-.01005558

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000b.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ac_mex_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ac_mex_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ac_mex_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ac_mex_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for ac_mex under current
(7 vars, 5 obs)
spec_type     policy_year   ef_region     G
emissions_~r  State         F

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region     G
emissions_~r  State         F
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region     G
emissions_~r  State         F
1
Specification 1 of 1, program 5 of 100 (audit_nudge)
Number of observations (_N) was 0, now 0.
audit_nudge

. *******************************************************************
> *************
. /*       0. Program: Nudging Energy Efficiency Audits RCT          
>            */
. *******************************************************************
> *************
. 
. /*
> Kenneth Gillingham, Tsvetan Tsvetanov. 
> "Nudging energy efficiency audits: Evidence from a field experiment
> ." 
> Journal of Environmental Economics and Management, Volume 90, 2018,
>  Pages 303-316, ISSN 0095-0696.
> * https://doi.org/10.1016/j.jeem.2018.06.009
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: audit_nudge no uncorrec
> ted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow          
. 
.                 levelsof estimate, local(estimates)
`"audit_impact"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .011           .       .011       .0
> 11
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.                         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         
. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************    
.         local annual_energy_use = 10566 // US 2020: https://www.eia
> .gov/consumption/residential/

.         
.         
.         if "${spec_type}" == "baseline" {
.                 local annual_energy_use = 7794 // Electricity consu
> mption in Connecticut in 2020 from https://www.eia.gov/consumption/
> residential/ (consumption is fairly stable over time) // Deviates f
> rom what the paper reports
.         }

. 
.         *Paper assumes that an audit leads to 5% energy reduction a
> nd the impacts last for 5 years (Section 4.3)
.         local audit_savings = 0.05

.         local years_impact = 5

. 
.         * cost
.         local cost_per_card = 2.40 * (${cpi_`dollar_year'}/${cpi_${
> policy_year}}) // (Section 4.3)

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. *Number of cards needed to cause one successful audit
. local audit_estimate = 1 - (1 - `audit_impact')^6 // The paper does
>  not give enough information to precisely convert their reduced for
> m estimate to a impact on overall likelihood to apply. Using the fo
> otnote on pg 312 and using the fact that their estimate leads to a 
> 6.5 percentage point reduction, I can estimate T (days) to be 6.

. 
. local cards_for_audit = 1 / `audit_estimate' // This is the number 
> of treated units for every successful audit

. local program_cost = `cost_per_card' * `cards_for_audit'

. 
. *Benefits of one audit
. local kwh_reduced_annual = `audit_savings' * `annual_energy_use'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = 0

. local marginal = 0

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings = (`kwh_reduced_annual' * ${kwh_price_`doll
> ar_year'_${State}}) + (((`kwh_reduced_annual' * ${kwh_price_`dollar
> _year'_${State}}))/`discount') * (1 - (1/(1+`discount')^(`years_imp
> act' - 1)))
. }

. 
. *Producers
. local corporate_loss = ((`kwh_reduced_annual' * ${producer_surplus_
> `dollar_year'_${State}}) + (((`kwh_reduced_annual' * ${producer_sur
> plus_`dollar_year'_${State}}))/`discount') * (1 - (1/(1+`discount')
> ^(`years_impact' - 1)))) * `r'

. local util_producer_surplus = ${producer_surplus_`dollar_year'_${St
> ate}} // for Latex

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. local wtp_prod_n = -`corporate_loss' / `program_cost' // for Latex

. 
. * Social Costs
. dynamic_grid `kwh_reduced_annual', starting_year(`dollar_year') lif
> etime(`years_impact') discount_rate(`discount') ef("`replacement'")
>  type("uniform") geo("${State}") grid_specify("yes") model("${grid_
> model}")

. local local_pollutants = `r(local_enviro_ext)'

. local local_pollutants_n = `local_pollutants' / `program_cost' // f
> or Latex

. 
. local global_pollutants = `r(global_enviro_ext)'

. local wtp_glob = `global_pollutants' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_glob_n = `wtp_glob' / `program_cost' // for Latex

. local carbon = `r(carbon_content)'

. 
. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 - `r')

. local rebound_local_n = `rebound_local' / `program_cost'

. 
. local rebound_global = `global_pollutants' * (1 - `r')

. local wtp_r_glob = -`rebound_global' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_r_glob_n = `wtp_r_glob' / `program_cost'

. 
. local wtp_soc_rbd_n = (-`rebound_local' + `wtp_r_glob') / `program_
> cost'

. 
. * Social benefits from reduced carbon
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. local wtp_society_n = `wtp_society' / `program_cost'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. local WTP_n = `WTP' / `program_cost' // for Latex

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local annual_fe_t = `kwh_reduced_annual' * ${government_revenue_`do
> llar_year'_${State}}

. local gov_rev = ${government_revenue_`dollar_year'_${State}} // for
>  Latex

. 
. local fisc_ext_t = `annual_fe_t' + (`annual_fe_t' / `discount') * (
> 1 - (1 / (1 + `discount')^(`years_impact' - 1))) * `r'

. local tax_rate = ${government_revenue_`dollar_year'_${State}} // fo
> r Latex

. local utility_fisc_ext = `fisc_ext_t' / `program_cost' // for Latex

. local fisc_ext_t_n = `fisc_ext_t' / `program_cost' // for Latex

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = ((99 * (0.571)) + (75 * (1 - 0.571))) * (${cpi_`
> dollar_year'} / ${cpi_${policy_year}}) // Need to take into account
>  cost of audit

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local fisc_ext_lr_n = `fisc_ext_lr' / `program_cost' // for Latex

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr' 

. local total_cost_n = `total_cost' / `program_cost' // for Latex

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local energy_savings = `kwh_reduced_annual' * `years_impact' * `ene
> rgy_cost'

. 
. local nudge_cost = `program_cost'

. 
. local resource_cost = `nudge_cost' - `energy_savings'

. local nudge_price = `program_cost'

. local kwh_reduc = `kwh_reduced_annual' * `years_impact'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `r'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_consumers'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_r_loc wtp_r_glob
>  wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Energy Audit Nudge"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `""Rebound" "Local""' 5 `""Rebound" "Global""' 6 `"Pr
> oducers"' 7 `"Total WTP"' 9 `""Program" "Cost""' 10 `""FE" "Subsidi
> es""' 11 `""FE" "Taxes""' 12 `""FE" "Long-Run""' 13 `"Total Cost"' 
> ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
. 
. di `program_cost'
41.531164

. di `fiscal_externality'


. di `total_cost'
147.29227

. di `WTP'
311.79518

. di `wtp_consumers'
0

. di `corporate_loss'
22.526809

. di `wtp_society'
339.98159

. di `total_cost'
147.29227

. di `MVPF'
2.1168468

. di `local_pollutants'
55.361428

. di `global_pollutants'
367.4308

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs kwh_reduced_annual wtp_consumers wtp_
> glob wtp_loc wtp_r_glob wtp_r_loc wtp_prod WTP_n global_pollutants 
> local_pollutants ///
>                                           program_cost gov_rev fisc
> _ext_t fisc_ext_t_n fisc_ext_lr_n total_cost_n MVPF wtp_glob_n loca
> l_pollutants_n wtp_soc_rbd_n ///
>                                           wtp_society_n util_produc
> er_surplus wtp_prod_n tax_rate utility_fisc_ext audit_estimate card
> s_for_audit
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "fisc_ext_t", "global_poll
> utants", "local_pollutants"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "audit_estimate"){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000e.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000g.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/audit_nudge_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/audit_nudge_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/audit_nudge_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/audit_nudge_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for audit_nudge under current
(4 vars, 5 obs)
spec_type     emissions_~r  policy_year   State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State
1
Specification 1 of 1, program 6 of 100 (baaqmd)
Number of observations (_N) was 0, now 0.
baaqmd

. *******************************************************************
> ******************
. /*       0. Program: Vehicle Buyback (BAAQMD_Buyback)              
>         */
. *******************************************************************
> ******************
. /*
> Clunkers or Junkers? Adverse Selection in a Vehicle Retirement Prog
> ram
> By Ryan Sandler
> https://pubs.aeaweb.org/doi/pdfplus/10.1257/pol.4.4.253
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. global c4c_interest_rate                                0.03

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"days_accelerated"' `"miles_abated"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      1394.2           .     1394.2     1394
> .2

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1     16027.6           .    16027.6    16027
> .6
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
.         if "${spec_type}" == "baseline"{
.                 
.                 local dollar_year = ${policy_year}
.                 
.         }

.         
.         if "${spec_type}" == "current"{
.                 
.                 local dollar_year = ${today_year}
.                 
.         }

. 
.     ****************************************************
.     /* 3b. Policy Category Assumptions */
.     ****************************************************
.     *i. Import car rebate assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("car_rebate")
(4 vars, 5 obs)

.                 
.                 levelsof Parameter, local(levels)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_ma
> rginal"' `"retirement_age"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.         
.                 local marginal_valuation = ${marg_valuation}

.                 local prop_marginal = ${prop_marginal}

.                 local retirement_age = ${retirement_age}

. 
.         restore 

.         
.     ****************************************************
.     /* 3c. Policy Specific Assumptions */
.     ****************************************************    
.     local year_num = `days_accelerated' / 365 // retire cars 3.8 ye
> ars earlier

.     local age_retired 26

.         
.     ****************************************************
.     /* 3d. Inflation Adjusted Values */
.     ****************************************************
.     *Convert rebate to current dollars
.     local admin_costs = 240 * (${cpi_`dollar_year'}/${cpi_2000}) //
>  these costs are reported in 2000 $s

.         
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseli
> ne_gen" {
.                 local transfer_payment = 500 * (${cpi_`dollar_year'
> }/${cpi_2000}) // these costs are reported in 2000 $s
.         }

.         if "${spec_type}" == "current" {
.                 local transfer_payment = 650 * (${cpi_`dollar_year'
> }/${cpi_2000}) // these costs are reported in 2000 $s
.         }       

.         
.         local adj_rebate = `transfer_payment'

.    
.         
. ************************f****************************
. /* 4. Estimate Emissions of Replaced (Old) Vehicle */
. ****************************************************
. preserve

. 
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Externalities/gasoline_vehicle_externalities_no_ethanol_${scc_i
> nd_name}_${dr_ind_name}.dta", clear

.                 keep if year == `dollar_year'
(32 observations deleted)

.                 
.         local cf new    

.         if substr("`cf'", 1, 3) == "new" {
.                 
.                 ***************************************************
> ****************************
.                 /* Save Upstream Externalities for Later. */
.                 ***************************************************
> **************************** 
.                 // Want upstream damages for year we are analyzing;
>  emission rates from year vehicle was released.
. 
.                 keep year *upstream* *ethanol*
.                 tempfile upstream_save
.                 save "`upstream_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000k.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000k.tmp saved
    as .dta format
.                                                                 
.                 ***************************************************
> ****************************
.                 /* Calculate Per-Gallon Externality from Sulfur. */
.                 ***************************************************
> **************************** 
.                 import excel "${policy_assumptions}", first clear s
> heet("sulfur_content_gas")
(2 vars, 24 obs)
.                 keep if year == `dollar_year'
(23 observations deleted)
.                 local SO2_gal = sulfur_content_ppm
. 
.                 ***************************************************
> ****************************
.                 /* Calculate Per-Gallon Externality from CO, HC, an
> d NOx. */
.                 ***************************************************
> ****************************                                       
>   
.                 use "${assumptions_model_year}/combined_Jacobsen_re
> plicated", clear 
.                 qui sum model_year
.                 local my_min = r(min)
.                 local my_max = r(max)
.                 
.                 forval my = `my_min'(1)`my_max' {
  2.                         
.                         qui sum model_year if model_year == `my'
  3.                         if r(mean) == . {
  4.                                 assert !missing(model_year)
  5.                                 insobs 1
  6.                                 replace model_year = `my' if mod
> el_year == .
  7.                         }
  8.                         sort model_year
  9.                         
.                 }
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
.                 
.                 // Missing emission rates for select years, consist
> ent with Jacobsen et al. 2023.
.                 ds emissions_new*
emissions_~O  emissions_~C  emissions_~x
.                 foreach var in `r(varlist)' {
  2.                         
.                         ipolate `var' model_year, generate(`var'_fi
> xed) 
  3.                         replace `var' = `var'_fixed if `var' == 
> .
  4.                         drop `var'_fixed
  5.                         
.                 }
(2 real changes made)
(2 real changes made)
(3 real changes made)
.                 keep if model_year == (`dollar_year' - `age_retired
> ') + 1
(63 observations deleted)
.                                                                 
.                 ***************************************************
> ****************************
.                 /* Calculate Per-Gallon Externality from CH4, N2O, 
> and PM2.5. */
.                 ***************************************************
> ****************************                                 
.                 merge 1:1 model_year using "${assumptions_model_yea
> r}/fuel_economy_final.dta", nogen noreport 
.                 
.                 merge 1:1 model_year using "${assumptions_model_yea
> r}/GREET_emissions_final", nogen noreport // Emission rates for CH4
> , N2O, and PM2.5
.                 order model_year mpg
.                 gen CO2_gal = ${CO2_per_gallon}
.                 gen SO2_gal = `SO2_gal' * ${sulfur_ppm_conversion}
.                                 
.                 qui sum model_year if PM25_exhaust != .
.                 local earliest_year = r(min)
.                         
.                 if (`dollar_year' - `age_retired') + 1 < `earliest_
> year' {
.                         
.                         ds PM25* CH4 N2O
.                         foreach var in `r(varlist)' {
  2.                                 
.                                 qui sum `var' if model_year == `ear
> liest_year'
  3.                                 replace `var' = r(mean) if model
> _year == (`dollar_year' - `age_retired') + 1
  4.                                 
.                         }
.                         
.                 }
. 
.                 ***************************************************
> ****************************
.                 /* Unit Conversions and Standardizing Naming. */
.                 ***************************************************
> ****************************                 
.                 // Renaming Variables.
.                 qui ds emissions*
.                 foreach var in `r(varlist)' {
  2.                         
.                         local newname = substr("`var'", 15, .)
  3.                         qui rename `var' `newname'
  4.                         
.                 }
.                                 
.                 // Converting from g/mi to g/gallon. 
.                 qui ds *_gal *year mpg, not
.                 foreach var in `r(varlist)' {
  2.                         
.                         qui gen `var'_gal = `var' * mpg
  3.                         drop `var'
  4.                         
.                 }
.                 qui rename HC_gal VOC_gal
.                 keep if model_year == (`dollar_year' - `age_retired
> ') + 1
(65 observations deleted)
.                 
.                 // Converting from g/gallon to tons/gallon. 
.                 qui ds mpg *_gal
.                 foreach var in `r(varlist)' {
  2.                         
.                         qui replace `var' = `var'/1000000 if `var' 
> != mpg
  3.                         local `var' = r(mean)
  4.                         
.                 }       
.                 
.                 *************************************************
.                 /* Account for Vehicle Decay (Until Age 19). */
.                 *************************************************  
>      
.                 gen age = `age_retired'
.                 gen decay_ind = age - 1
.                 replace decay_ind = ${decay_age_cutoff} if age > ${
> decay_age_cutoff}
(1 real change made)
.                 replace decay_ind = 0 if model_year < 1975 // Cars 
> pre-1975 don't decay because they didn't have modern emission abate
> ment technologies.
(0 real changes made)
. 
.                 replace CO_gal = CO_gal * (1 + ${CO_decay})^(decay_
> ind)         
(1 real change made)
.                 replace NOx_gal = NOx_gal * (1 + ${NOx_decay})^(dec
> ay_ind)              
(1 real change made)
.                 replace VOC_gal = VOC_gal * (1 + ${HC_decay})^(deca
> y_ind)       
(1 real change made)
.                 
.                 drop age decay_ind
. 
.                 *************************************************
.                 /* Import Social Costs and Value Damages. */
.                 *************************************************  
>      
.                 local ghg CO2 CH4 N2O
.                 foreach g of local ghg {
  2.                         
.                         local social_cost_`g' = ${sc_`g'_`dollar_ye
> ar'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                                 
.                 }       
. 
.                 local md_w SO2 PM25 NOx VOC CO
.                 foreach p of local md_w {
  2.                         
.                         local social_cost_`p' = ${md_`p'_`dollar_ye
> ar'_weighted} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year}})
  3.                         
.                 }
. 
. 
.                 local md_u SO2 PM25 NOx VOC NH3 CO
.                 foreach p of local md_u  {
  2.                         
.                         local social_cost_`p'_uw = ${md_`p'_`dollar
> _year'_unweighted} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year
> }})
  3.                         
.                 }
.                 
.                 * Pollution Externalities: Social Cost * Emissions 
> per Gallon
.                 qui foreach val of global pollutants_list {
.                 
.                 ***************************************************
> *****************************************
.                 /* Collect Results and Bring in Per-Mile Upstream. 
> */
.                 ***************************************************
> *****************************************
.                 assert model_year == (`dollar_year' - `age_retired'
> ) + 1
.                 gen year = `dollar_year'
.                 order year model_year
.                 merge 1:1 year using "`upstream_save'", nogen norep
> ort assert(3)
.                 cap drop wtp_upstream_CO
.                 cap drop wtp_upstream_VOC
.         }

. 
.         ***********************************************************
> ********************
.         **# /* Account for Changing Social Costs. */
.         ***********************************************************
> ********************                 
.         // Handle changes over vehicle lifetime the same for all co
> unterfactuals, with exception of VMT.
.         cap drop wtp_upstream_VOC wtp_upstream_CO *accidents *conge
> stion // Need to keep local and global damages split.

.         qui ds

.         local numvars : word count `r(varlist)'

.         cap drop model_year

.         
.         // Adjust for Ethanol
.         
.         ****************************************************
.         /* Adjust Components Proportional to Gas Usage.  */
.         ****************************************************
.         ds *upstream* wtp_CO2 wtp_CH4 wtp_N2O
wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_CH4
wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m  wtp_N2O
wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_CO2

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = `var' * (1 - share_ethanol)
  3.                 // NOTE: SO2 reported ppm already reflects sulfu
> r content.
.                 // NOTE: EPA fuel economy accounts for mileage pena
> lty from ethanol. 
.                 // NOTE: Lifecycle analysis of ethanol includes CH4
>  and N2O from burning methane, so scaling down.
.         
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         assert round(local_VOC + global_VOC, 0.0001) == round(wtp_V
> OC, 0.0001)

.         assert round(local_CO + global_CO, 0.0001) == round(wtp_CO,
>  0.0001)

.         
.         
.         ****************************************************
.         /* Adjust Local Pollution using % Change Estimates.  */
.         ****************************************************
.         local ethanol_local_adj         NOx CO VOC

.         foreach p of local ethanol_local_adj {
  2.                 
.                 if "`p'" == "NOx" {
  3.                         replace wtp_`p' = wtp_`p' * ((1 + (${`p'
> _change_e10}*(share_ethanol/0.098))))                   
  4.                 }
  5.                 if inlist("`p'", "CO", "VOC") {
  6.                         replace local_`p' = local_`p' * ((1 + ($
> {`p'_change_e10}*(share_ethanol/0.098))))
  7.                         replace global_`p' = global_`p' * ((1 + 
> (${`p'_change_e10}*(share_ethanol/0.098))))
  8.                 }
  9.                 
.                 // Assuming linear relationship b/w ethanol share a
> nd emission rate for low levels of ethanol. Paper tests percent dec
> line in emissions for fuel w/ 9.8% ethanol.
.                 // Leaving PM2.5 unadjusted.
. 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         replace wtp_CO = local_CO + global_CO
(1 real change made)

.         replace wtp_VOC = local_VOC + global_VOC
(1 real change made)

.         
.         ****************************************************
.         /* Account for Upstream Ethanol Emissions.  */
.         ****************************************************    
. 
.         local upstream_CO2_ethanol = (((${upstream_CO2_intensity_`d
> ollar_year'} + ${luc_CO2_intensity}) * ${mj_per_gal_ethanol})/10000
> 00) * (${sc_CO2_`dollar_year'} * (${cpi_`dollar_year'}/${cpi_${sc_d
> ollar_year}}))

.         // Grams per MJ, multiplied by MJ per/gallon of ethanol, co
> nverted to tons, multiplied by SCC.
.         
.         replace wtp_upstream_CO2 = wtp_upstream_CO2 + (`upstream_CO
> 2_ethanol' * share_ethanol)
(1 real change made)

.         // Already scaled down petroleum upstream emissions by shar
> e petroleum; now adding upstream ethanol emissions.
.         
.         drop wtp_CO wtp_VOC share_ethanol

.                                 
.         ***********************************************************
> ********************
.         /* Everything Expressed in Nominal Dollars; Convert to SCC 
> Dollar Year. */
.         ***********************************************************
> ********************         
.         ds year mpg, not
wtp_SO2       global_VOC    wtp_N2O       wtp_upstre~x  global_CO_~m
wtp_CO2       wtp_PM25_e~t  wtp_upst~CO2  wtp_upstr~25  local_CO_u~m
local_CO      wtp_PM25_TBW  wtp_upstre~4  wtp_upst~SO2
global_CO     wtp_NOx       wtp_upstr~2O  global_VOC~m
local_VOC     wtp_CH4       wtp_upstre~3  local_VOC_~m

.         foreach var in `r(varlist)' {
  2.                 
.                 qui replace `var' = `var' * (${cpi_${sc_dollar_year
> }} / ${cpi_`dollar_year'}) // All in 2020 dollars (${sc_dollar_year
> }).
  3.                 
.         }

.         
.         gen age = .
(1 missing value generated)

.         replace age = `age_retired' if _n == 1
(1 real change made)

.         order year age

.         insobs 3, after(1)
(3 observations added)

.         replace age = (age[1] + _n - 1)
(3 real changes made)

.         replace age = `age_retired' + `year_num' - 1 if _n == 4 // 
> Not retiring exactly 4 years early.
(1 real change made)

.         pause

.         replace mpg = mpg[1]
(3 real changes made)

.         replace year = year[1] + _n - 1
(3 real changes made)

.                         
.         ***********************************************************
> ********************
.         /* Import VMT (Varies with Counterfactual). */
.         ***********************************************************
> ******************** 
.         gen vmt = .
(4 missing values generated)

.         gen days = 365 * (age - age[_n - 1])    
(1 missing value generated)

.         replace days = 365 if _n == 1
(1 real change made)

.         order year days age vmt

.         replace vmt = (`miles_abated')/(`year_num' * 365) * days
(4 real changes made)

.         egen vmt_check = total(vmt)

.         drop vmt_check days

.                                 
.         ***********************************************************
> ********************
.         /* Deal with Static Externalities. */
.         ***********************************************************
> ********************         
.         local no_adj_ext                SO2 PM25 NH3

.         qui foreach p of local no_adj_ext {

.         
.         ***********************************************
.         /* Deal with Time-varying Externalities. */
.         ***********************************************         
.         local adj_ext                   CO2 N2O CH4 NOx CO VOC

.         
.         foreach p of local adj_ext {
  2.                 
.                 if inlist("`p'", "CO2", "CH4", "N2O") { // Social c
> osts rising over time; All expressed in 2020 dollars already.
  3.                         
.                         levelsof(year), local(y_loop)
  4.                         foreach y of local y_loop {
  5.                                 
.                                 qui sum year 
  6.                                 assert `dollar_year' == r(min)
  7.                                 
.                                 replace wtp_`p' = wtp_`p'[1] * (${s
> c_`p'_`y'}/${sc_`p'_`dollar_year'}) if year == `y'
  8.                                 replace wtp_upstream_`p' = wtp_u
> pstream_`p'[1] * (${sc_`p'_`y'}/${sc_`p'_`dollar_year'}) if year ==
>  `y'
  9.                                         
.                         }
 10.                 
.                 }
 11.                         
.                 if "`p'" == "NOx" { // Vehicle has finished decayin
> g
 12.                         
.                         foreach y of local y_loop {
 13.                                 
.                                 replace wtp_`p' = wtp_`p'[1]       
>              
 14.                                 replace wtp_upstream_`p' = wtp_u
> pstream_`p'[1]
 15.                                 
.                         }       
 16.                                                 
.                 }
 17.                 
.                 if "`p'" == "VOC" | "`p'" == "CO" {
 18.                                                 
.                         replace local_`p'_upstream = local_`p'_upst
> ream[1] // No changes to local upstream damages over time.
 19. 
.                         foreach y of local y_loop {
 20.                                 
.                                 if "`p'" == "VOC" {
 21.                                         local decay = ${HC_decay
> } // Only doing this step b/c decay factor is named HC_decay, not V
> OC_decay.
 22.                                 }
 23.                                 if "`p'" == "CO" {
 24.                                         local decay = ${CO_decay
> }
 25.                                 }                               
>         
 26.                                 
.                                 replace global_`p'_upstream = globa
> l_`p'_upstream[1] * (${sc_CO2_`y'}/${sc_CO2_`dollar_year'}) if year
>  == `y' 
 27.                                 // Same approach as upstream CO2
>  adjustment. GWP already applied in earlier calculations. Scale by 
> annual change in SCC; constant GWP.
.                                 
.                                 replace global_`p' = global_`p'[1] 
> * (${sc_CO2_`y'}/${sc_CO2_`dollar_year'}) if year == `y' 
 28.                                 // VOC decay = HC decay rate. Ri
> sing social costs and emission rate. Vehicle has stopped decaying.
.                                 
.                                 replace local_`p' = local_`p'[1] 
 29.                                 // No change in VOC's and CO's m
> arginal damages (local). Vehicle has stopped decaying. 
.                                 
.                         }
 30.                         
.                 }
 31.                 
.         }       
2020 2021 2022 2023
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
2020 2021 2022 2023
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
2020 2021 2022 2023
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(3 real changes made)
(3 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(3 real changes made)
(0 real changes made)
(0 real changes made)
(3 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(3 real changes made)
(0 real changes made)
(0 real changes made)
(3 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)

.                                         
.         ***********************************************************
> ********************
.         /*      Sum Damages to Calculate Total Local / Global Exter
> nality.      */
.         ***********************************************************
> ********************                                 
.         ** First, check that no observations are empty
.         qui ds

.         foreach var in `r(varlist)' {
  2.                 
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         qui sum `var' if year == `y'
  5.                         assert `var' != .
  6.                         
.                 }
  7.                 
.         }

.         
.         
.         ** Next, Sum to Construct Global / Local Externalities, NOT
>  INCLUDING PER-MILE EXTERNALITIES.
.         gen wtp_local = 0

.         qui foreach val of global damages_local {

. 
.         gen wtp_global = 0 

.         qui foreach val of global damages_global {

. 
.         gen wtp_total = wtp_local + wtp_global

.         
.         local wtp_accidents_mi = ${accidents_per_mi} // In 2020 dol
> lars already, from gas_vehicle_externalities file.

.         local wtp_congestion_mi = ${congestion_per_mi} // In 2020 d
> ollars already, from gas_vehicle_externalities file.

.         local wtp_PM25_TBW_mi = wtp_PM25_TBW / mpg // Calculated ab
> ove, after all expressed in 2020 dollars.

.         
.         gen wtp_local_per_mi = `wtp_accidents_mi' + `wtp_congestion
> _mi' + `wtp_PM25_TBW_mi' // Does not vary over time.

.         
.         levelsof(year), local(year_loop)
2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 qui sum wtp_local if year == `y'
  3.                         di in red "Local Pollution in `y'"
  4.                         di in red r(mean) * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}}) 
  5.                         
.                 qui sum wtp_global if year == `y'
  6.                         di in red "Global Pollution in `y'"
  7.                         di in red r(mean) * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}}) 
  8.                 
.                 qui sum wtp_local_per_mi if year == `y'
  9.                         di in red "Local Driving in `y'"
 10.                         di in red r(mean) * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}}) 
 11.                 
.         }
Local Pollution in 2020
.64130707
Global Pollution in 2020
1.9569972
Local Driving in 2020
.11829054
Local Pollution in 2021
.64130707
Global Pollution in 2021
1.9983362
Local Driving in 2021
.11829054
Local Pollution in 2022
.64130707
Global Pollution in 2022
2.0299827
Local Driving in 2022
.11829054
Local Pollution in 2023
.64130707
Global Pollution in 2023
2.0713227
Local Driving in 2023
.11829054

.         
.         keep year age vmt mpg wtp_total wtp_local* wtp_global

.         gen gallons_used = vmt / mpg

.                 
.         ***********************************************************
> ********************
.         /*         Calculate Damages over Vehicle Lifetime and Disc
> ount.         */
.         ***********************************************************
> ******************** 
.         local components_to_calculate total global local CO2 profit
> s gallons taxes savings mpg local_driving

.         foreach c of local components_to_calculate {
  2.                 
.                 if "`c'" == "mpg" {
  3.                         
.                         continue
  4.                         
.                 }
  5.                 
.                 if "`c'" != "mpg" {
  6.                         
.                         gen `c' = .
  7.                                         
.                 }
  8.                                         
.         }
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)

. 
.         foreach c of local components_to_calculate {
  2.         
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         if inlist("`c'", "total", "global", "local"
> ) {
  5. 
.                                 replace `c' = (gallons_used * wtp_`
> c') / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN
>  SCC DOLLAR YEAR DOLLARS.
  6.                                 
.                         }
  7.                         
.                         if inlist("`c'", "local_driving") {
  8.                                 
.                                 replace `c' = (vmt * wtp_local_per_
> mi) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN
>  SCC DOLLAR YEAR DOLLARS.
  9.                                 
.                         }
 10. 
.                         if inlist("`c'", "profits") {
 11.                                 
.                                 replace `c' = (gallons_used * ${nom
> inal_gas_markup_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_
> year')) if year == `y' // NOMINAL DOLLARS.
 12.                                 
.                         }
 13.                         
.                         if inlist("`c'", "taxes") {
 14.                                 
.                                 replace `c' = (gallons_used * ${nom
> inal_gas_tax_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_yea
> r')) if year == `y' // NOMINAL DOLLARS.
 15.                                 
.                         }
 16.                         
.                         if inlist("`c'", "savings") {
 17.                                 
.                                 replace `c' = (gallons_used * ${nom
> inal_gas_price_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_y
> ear')) if year == `y' // NOMINAL DOLLARS.
 18.                                 
.                         }
 19.                         
.                         if inlist("`c'", "CO2") {
 20.                                 
.                                 replace `c' = (gallons_used * (wtp_
> global / ${sc_CO2_`y'})) if year == `y' // Not discounting CO2 (b/c
>  in tons).
 21.                                 
.                         }       
 22.                         
.                         if inlist("`c'", "gallons") {
 23.                                 
.                                 replace `c' = gallons_used if year 
> == `y' // Not discounting gallons.
 24.                                 
.                         }                                       
 25.                         
.                         if inlist("`c'", "mpg") {
 26.                                 
.                                 continue
 27.                                 
.                         }
 28.                         
.                 }
 29.                 
.         }       
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.         foreach c of local components_to_calculate {
  2.         
.                 if "`c'" != "mpg" {
  3.                         
.                         egen total_`c' = total(`c')
  4.                         drop `c'
  5.                         global old_`c' = total_`c' 
  6.                         global old_`c'_rbd = 0
  7.                         
.                         if inlist("`c'", "global", "local", "local_
> driving") {
  8.                                 di in red "`c'"
  9.                                 di in red ${old_`c'} * (${cpi_`d
> ollar_year'} / ${cpi_${sc_dollar_year}})
 10.                         }
 11.                                 
.                 }
 12. 
.                 if "`c'" == "mpg" {
 13.                         
.                         global old_`c' = mpg 
 14.                         
.                 }
 15.                 
.         }       
global
1529.502
local
487.86057
local_driving
1843.44

.                 
. ****************************************************
. /* 5. Estimate Emissions of Replacement (New) Vehicle */
. ****************************************************
. use "${user_specific_assumptions}/files_v${user_name}/Vehicle Lifet
> ime Damages/vmt_dist_avg.dta", clear

. collapse (mean) age [aw=age_share]

. assert age + `year_num' < ${decay_age_cutoff}

. 
.         ****************************************************
.         /* Estimate Emissions of Replacement (New) Vehicle -- Assum
> ing Fleet Average */
.         ****************************************************
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Externalities/gasoline_vehicle_externalities_${scc_ind_name}_${
> dr_ind_name}.dta", clear                  

.         keep if year == `dollar_year'
(32 observations deleted)

.         drop CO2_total wtp_total wtp_local wtp_global *accidents *c
> ongestion wtp_CO wtp_VOC 

.         qui ds

.         local numvars : word count `r(varlist)'

.         
.         drop wtp_upstream_CO wtp_upstream_VOC share_ethanol

.         
.         // Already ethanol-adjusted b/c using fleet average.
. 
.         ***********************************************************
> ********************
.         /* Everything Expressed in Nominal Dollars; Convert to SCC 
> Dollar Year. */
.         ***********************************************************
> ********************         
.         ds year mpg, not
wtp_SO2       wtp_CH4       wtp_upstre~3  global_VOC    global_CO_~m
wtp_CO2       wtp_N2O       wtp_upstre~x  global_VOC~m  local_CO_u~m
wtp_PM25_e~t  wtp_upst~CO2  wtp_upstr~25  local_VOC_~m
wtp_PM25_TBW  wtp_upstre~4  wtp_upst~SO2  local_CO
wtp_NOx       wtp_upstr~2O  local_VOC     global_CO

.         foreach var in `r(varlist)' {
  2.                 
.                 qui replace `var' = `var' * (${cpi_${sc_dollar_year
> }} / ${cpi_`dollar_year'}) // All in 2020 dollars (${sc_dollar_year
> }).
  3.                 
.         }

.         
.         gen age = .
(1 missing value generated)

.         replace age = 1
(1 real change made)

.         order year age

.         insobs 3, after(1)
(3 observations added)

.         replace age = (age[1] + _n - 1)
(3 real changes made)

.         replace age = `year_num' if _n == 4 // Not retiring exactly
>  4 years early.
(1 real change made)

.         replace mpg = mpg[1]
(3 real changes made)

.         replace year = year[1] + _n - 1
(3 real changes made)

. 
.         ***********************************************************
> ********************
.         /* Import VMT (Varies with Counterfactual). */
.         ***********************************************************
> ******************** 
.         gen vmt = .
(4 missing values generated)

.         gen days = 365 * (age - age[_n - 1])    
(1 missing value generated)

.         replace days = 365 if _n == 1
(1 real change made)

.         order year days age vmt

.         replace vmt = (`miles_abated')/(`year_num' * 365) * days
(4 real changes made)

. 
.                 egen vmt_check = total(vmt)

.                         drop vmt_check days

.                                         
.                         
.         ***********************************************************
> ********************
.         /* Deal with Static Externalities. */
.         ***********************************************************
> ********************         
.         local no_adj_ext                SO2 PM25 NH3

.         qui foreach p of local no_adj_ext {

.         
.         ***********************************************
.         /* Deal with Time-varying Externalities. */
.         ***********************************************         
.         local adj_ext                   CO2 N2O CH4 NOx CO VOC

.         
.         qui foreach p of local adj_ext {

.         
.         ***********************************************************
> ********************
.         /*      Sum Damages to Calculate Total Local / Global Exter
> nality.           */
.         ***********************************************************
> ********************                                 
.         ** First, check that no observations are empty
.         qui ds

.         foreach var in `r(varlist)' {
  2.                 
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         qui sum `var' if year == `y'
  5.                         assert `var' != .
  6.                         
.                 }
  7.                 
.         }

.         
.         
.         ** Next, Sum to Construct Global / Local Externalities, NOT
>  INCLUDING PER-MILE EXTERNALITIES.
.         gen wtp_local = 0

.         qui foreach val of global damages_local {

. 
.         gen wtp_global = 0 

.         qui foreach val of global damages_global {

.                 
.         gen wtp_total = wtp_local + wtp_global

.         
.         local wtp_accidents_mi = ${accidents_per_mi} // In 2020 dol
> lars already, from gas_vehicle_externalities file.

.         local wtp_congestion_mi = ${congestion_per_mi} // In 2020 d
> ollars already, from gas_vehicle_externalities file.

.         local wtp_PM25_TBW_mi = wtp_PM25_TBW / mpg // Calculated ab
> ove, after all expressed in 2020 dollars.

.         
.         gen wtp_local_per_mi = `wtp_accidents_mi' + `wtp_congestion
> _mi' + `wtp_PM25_TBW_mi' // Does not vary over time. 

.         
.         levelsof(year), local(year_loop)
2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 qui sum wtp_local if year == `y'
  3.                         di in red "Local Pollution in `y'"
  4.                         di in red r(mean) * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}}) 
  5.                         
.                 qui sum wtp_global if year == `y'
  6.                         di in red "Global Pollution in `y'"
  7.                         di in red r(mean) * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}}) 
  8.                 
.                 qui sum wtp_local_per_mi if year == `y'
  9.                         di in red "Local Driving in `y'"
 10.                         di in red r(mean) * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}}) 
 11.                 
.         }
Local Pollution in 2020
.22570442
Global Pollution in 2020
1.890611
Local Driving in 2020
.11759418
Local Pollution in 2021
.2316592
Global Pollution in 2021
1.9312645
Local Driving in 2021
.11759418
Local Pollution in 2022
.23787757
Global Pollution in 2022
1.9623976
Local Driving in 2022
.11759418
Local Pollution in 2023
.24317996
Global Pollution in 2023
2.0030157
Local Driving in 2023
.11759418

.         
.         keep year age *vmt* mpg wtp_total wtp_local* wtp_global

.         
.         // Replacement vehicle should have fleet-wide averages in y
> ear one. 
.         assert round(wtp_global[1], 0.001) == round(${gas_ldv_ext_g
> lobal_`dollar_year'} * (${cpi_2020}/${cpi_`dollar_year'}), 0.001)

.         
.         ***********************************************************
> ********************
.         /*         Account for Per-Mile Externalities if Accounting
>  for Rebound.         */
.         ***********************************************************
> ******************** 
.         local cost_of_driving_change = ((${nominal_gas_price_`dolla
> r_year'}/mpg) - (${nominal_gas_price_`dollar_year'}/${old_mpg}))/($
> {nominal_gas_price_`dollar_year'}/${old_mpg})

.         local vmt_change = `cost_of_driving_change' * ${vmt_rebound
> _elasticity}

.         
.         gen rebound_vmt = (vmt * (1 + `vmt_change')) - vmt

.                 replace vmt = vmt * (1 + `vmt_change')
(4 real changes made)

.                 
.         gen gallons_used = vmt / mpg    

.         gen rebound_gallons = rebound_vmt / mpg         

.         
.         di in red `cost_of_driving_change'
-.11364508

.         di in red `vmt_change'
.02524057

.         
.         ***********************************************************
> ********************
.         /*         Calculate Damages over Vehicle Lifetime and Disc
> ount.         */
.         ***********************************************************
> ******************** 
.         foreach c of local components_to_calculate {
  2.                 
.                 if "`c'" == "mpg" {
  3.                         
.                         continue
  4.                         
.                 }
  5.                 
.                 if "`c'" != "mpg" {
  6.                         
.                         gen `c' = .
  7.                         gen `c'_rbd = .
  8.                                         
.                 }
  9.                                         
.         }
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)

.         
.         foreach c of local components_to_calculate {
  2.         
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         if inlist("`c'", "total", "global", "local"
> ) {
  5. 
.                                 replace `c' = (gallons_used * wtp_`
> c') / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN
>  SCC DOLLAR YEAR DOLLARS.
  6.                                 replace `c'_rbd = (rebound_gallo
> ns * wtp_`c') / ((1 + `discount')^(`y' - `dollar_year')) if year ==
>  `y' // IN SCC DOLLAR YEAR DOLLARS.
  7.                                 
.                         }
  8.                         
.                         if inlist("`c'", "local_driving") {
  9.                                 
.                                 replace `c' = (vmt * wtp_local_per_
> mi) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN
>  SCC DOLLAR YEAR DOLLARS.
 10.                                 replace `c'_rbd = (rebound_vmt *
>  wtp_local_per_mi) / ((1 + `discount')^(`y' - `dollar_year')) if ye
> ar == `y' // IN SCC DOLLAR YEAR DOLLARS.                           
>   
 11.                                 
.                         }
 12. 
.                         if inlist("`c'", "profits") {
 13.                                 
.                                 replace `c' = (gallons_used * ${nom
> inal_gas_markup_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_
> year')) if year == `y' // NOMINAL DOLLARS.
 14.                                 replace `c'_rbd = (rebound_gallo
> ns * ${nominal_gas_markup_`dollar_year'}) / ((1 + `discount')^(`y' 
> - `dollar_year')) if year == `y' // NOMINAL DOLLARS.
 15.                                 
.                         }
 16.                         
.                         if inlist("`c'", "taxes") {
 17.                                 
.                                 replace `c' = (gallons_used * ${nom
> inal_gas_tax_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_yea
> r')) if year == `y' // NOMINAL DOLLARS.
 18.                                 replace `c'_rbd = (rebound_gallo
> ns * ${nominal_gas_tax_`dollar_year'}) / ((1 + `discount')^(`y' - `
> dollar_year')) if year == `y' // NOMINAL DOLLARS.
 19.                                 
.                         }
 20.                         
.                         if inlist("`c'", "savings") {
 21.                                 
.                                 replace `c' = (gallons_used * ${nom
> inal_gas_price_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_y
> ear')) if year == `y' // NOMINAL DOLLARS.
 22.                                 replace `c'_rbd = (rebound_gallo
> ns * ${nominal_gas_price_`dollar_year'}) / ((1 + `discount')^(`y' -
>  `dollar_year')) if year == `y' // NOMINAL DOLLARS.
 23.                                 
.                         }
 24.                         
.                         if inlist("`c'", "CO2") {
 25.                                 
.                                 replace `c' = (gallons_used * (wtp_
> global / ${sc_CO2_`y'})) if year == `y' // Not discounting CO2 (b/c
>  in tons).
 26.                                 replace `c'_rbd = (rebound_gallo
> ns * (wtp_global / ${sc_CO2_`y'})) if year == `y' // Not discountin
> g CO2 (b/c in tons).
 27.                                 
.                         }       
 28.                         
.                         if inlist("`c'", "gallons") {
 29.                                 
.                                 replace `c' = gallons_used if year 
> == `y' // Not discounting gallons.
 30.                                 replace `c'_rbd = rebound_gallon
> s if year == `y' // Not discounting gallons.
 31.                                 
.                         }                                       
 32.                         
.                         if inlist("`c'", "mpg") {
 33.                                 
.                                 continue
 34.                                 
.                         }
 35.                         
.                 }
 36.                 
.         }       
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                         
.         foreach c of local components_to_calculate {
  2.         
.                 if "`c'" != "mpg" {
  3.                         
.                         egen total_`c' = total(`c')
  4.                         egen total_`c'_rbd = total(`c'_rbd)
  5.                         drop `c'
  6.                         
.                         global new_`c' = total_`c' 
  7.                         global new_`c'_rbd = total_`c'_rbd
  8.                         
.                         if inlist("`c'", "global", "local", "local_
> driving") {
  9.                                 di in red "`c'"
 10.                                 di in red ${new_`c'} * (${cpi_`d
> ollar_year'} / ${cpi_${sc_dollar_year}})
 11.                                 di in red ${new_`c'_rbd} * (${cp
> i_`dollar_year'} / ${cpi_${sc_dollar_year}})
 12.                         }
 13.                 
.                 }
 14. 
.                 if "`c'" == "mpg" {
 15.                         
.                         global new_`c' = mpg 
 16.                         
.                 }
 17.                 
.         }       
global
1343.3917
33.073188
local
161.80528
3.9835115
local_driving
1878.8435
46.255568

.                                 
.         ***********************************************************
> ********************
.         /*  6.  Collect Results.         */
.         ***********************************************************
> ********************         
.         clear

.         insobs 2
(2 observations added)

.         gen vehicle_type = ""
(2 missing values generated)

.         replace vehicle_type = "old" if _n == 1
variable vehicle_type was str1 now str3
(1 real change made)

.         replace vehicle_type = "new" if _n == 2
(1 real change made)

. 
.         qui foreach c of local components_to_calculate {

.         order vehicle_type mpg

. 
.         *********************************
.         /* 7. Intermediate Calculations */
.         *********************************
.         *Environmental Benefit
.         local local_benefit = (local[1] - local[2]) + (local_drivin
> g[1] - local_driving[2])

.         local local_rbd = -(local_rbd[2] + local_driving_rbd[2])

.         local global_benefit = global[1] - global[2]

.         local global_rbd = -global_rbd[2]

. 
.         local tax_rev_loss = (taxes[1] - taxes[2]) + ((profits[1] -
>  profits[2]) * ${gasoline_effective_corp_tax})

.         local tax_rev_loss_no_rbd = (taxes[1] - taxes[2] + taxes_rb
> d[2]) + ((profits[1] - profits[2] + profits_rbd[2]) * ${gasoline_ef
> fective_corp_tax})        

.         local profit_loss = ((profits[1] - profits[2]) * (1 - ${gas
> oline_effective_corp_tax})) * -1

.         local profit_loss_no_rbd = ((profits[1] - profits[2] + prof
> its_rbd[2]) * (1 - ${gasoline_effective_corp_tax})) * -1

. 
.         local carbon_reduced = CO2[1] - CO2[2]

.         local carbon_rbd = -CO2_rbd[2]

. 
.         local gas_private_savings = savings[1] - savings[2]

.         local gas_private_savings_no_rbd = savings[1] - savings[2] 
> + savings_rbd[2]

. 
.         pause

. 
.         di in red `global_benefit'
186.11034

.         di in red `global_benefit' * (1 - (${USShareFutureSSC} * ${
> USShareGovtFutureSCC}))
182.5454

.         di in red (local[1] - local[2])
326.05529

.         di in red (local_driving[1] - local_driving[2])
-35.403499

.         di in red `local_benefit'
290.65179

.         
. restore

. **************************
. /* 8. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate' + `admin_costs'

. local fiscal_externality_tax = (`prop_marginal' * `tax_rev_loss')

. 
. *************************
. /* 9. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = `adj_rebate'

. 
. local marginal =  0

. 
. * Social Costs
. local local_pollutants = `prop_marginal' * `local_benefit'

. local global_pollutants = `prop_marginal' * `global_benefit'

. local carbon_reduction = `prop_marginal' * `carbon_reduced'

. local producers = `prop_marginal' * `profit_loss'

. 
. if "${value_profits}" == "no" {
.         
.         local producers = 0
.         local fiscal_exernality_corp = 0        
.         
. }

. 
. if "${value_savings}" == "yes" {
.         
.         local wtp_savings = `prop_marginal' * `gas_private_savings'
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. 
. 
. * Social benefits from reduced carbon 
. local WTP = `marginal' + `inframarginal' + ///
>                         (`global_pollutants' * (1 - (${USShareFutur
> eSSC} * ${USShareGovtFutureSCC}))) + `local_pollutants' + `producer
> s' + `wtp_savings'

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' + `producers' + `wtp_savings'

. local WTP_USFut = `global_pollutants' * (${USShareFutureSSC} - (${U
> SShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1-(${USShareFutureSSC})) * `global_pollutants' 

. 
. local fiscal_externality_lr = -`global_pollutants' * (${USShareFutu
> reSSC} * ${USShareGovtFutureSCC})

. 
. 
. **************************
. /* 10. MVPF Calculations */
. **************************
. local total_cost = `program_cost' + `fiscal_externality_lr' + `fisc
> al_externality_tax' 

. 
. local MVPF = `WTP'/`total_cost'

. di in red `MVPF'
1.0299329

. 
. assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost',
>  0.1) == round(`MVPF', 0.1)

. 
. ****************************************
. /* 11. Cost-Effectiveness Calculations */
. ****************************************
. local used_sales_2020 = 39.3 // millions

. local new_sales_2020 = 14.2 // millions

. local used_price_2020 = 27409 // CarGurus

. local new_price_2020 = 39592 // KBB

. local car_price = (`used_price_2020' * `used_sales_2020' + `new_pri
> ce_2020' * `new_sales_2020') / (`used_sales_2020' + `new_sales_2020
> ') // average transaction cost

. 
. local leasing_cost = ${c4c_interest_rate} * (`days_accelerated' / 3
> 65) * `car_price' // interest is 3% 

. di in red "days accelerated is `days_accelerated'"
days accelerated is 1394.2

. di in red "leasing cost is `leasing_cost'"
leasing cost is 3511.392244916144

. 
. local lifetime_gas_savings = 0.92 * `gas_private_savings_no_rbd' - 
> `tax_rev_loss_no_rbd' +  `profit_loss_no_rbd'

. di in red "gas savings are `gas_private_savings_no_rbd'"
gas savings are 196.6298598317988

. di in red "tax revenue is `tax_rev_loss_no_rbd'"
tax revenue is 51.31069357184716

. di in red "profit loss is `profit_loss_no_rbd'"
profit loss is -41.83714135297752

. di in red "gas savings are `lifetime_gas_savings'"
gas savings are 87.75163612043022

. 
. local resource_cost = `leasing_cost' - `lifetime_gas_savings'

. di in red "resource cost is `resource_cost'"
resource cost is 3423.640608795714

. local q_carbon_mck = (`carbon_reduced' - `carbon_rbd')

. 
. di in red "carbon is `q_carbon_mck'"
carbon is 1.137602698064455

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is 3009.522230055168

. pause

. 
. local gov_carbon = `prop_marginal' * `carbon_reduced'

. assert `q_carbon_mck' >= `gov_carbon'

. 
. ****************
. /* 12. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. 
. global wtp_marg_`1' = `marginal' 

. global wtp_inf_`1' = `inframarginal'

. 
. global wtp_glob_`1' = (`global_pollutants' - `global_rbd'*`prop_mar
> ginal') * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = (`local_pollutants' - `local_rbd'*`prop_margin
> al')

. 
. global wtp_soc_rbd_`1' = (`global_rbd'*`prop_marginal' * (1 - (${US
> ShareFutureSSC} * ${USShareGovtFutureSCC}))) + (`local_rbd'*`prop_m
> arginal')

. global wtp_r_glob_`1' = `global_rbd'*`prop_marginal' * (1 - (${USSh
> areFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = `local_rbd'*`prop_marginal'

. 
.         assert round(${wtp_glob_`1'} + ${wtp_loc_`1'} + ${wtp_r_loc
> _`1'} + ${wtp_r_glob_`1'}, 0.01) == round((`global_pollutants' * (1
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))) + `local_pollu
> tants', 0.01)

.         
. global wtp_prod_`1' = `producers'

. 
. global c_savings_`1' = `prop_marginal' * `gas_private_savings'

. 
. global fisc_ext_t_`1' = `fiscal_externality_tax'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global q_CO2_`1' = `carbon_reduced' *`prop_marginal'

. global q_CO2_mck_`1' = `carbon_reduced'

. global resource_cost_`1' = -`gas_private_savings'

. 
. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global wtp_prod_s_`1' = `producers'

. 
. global admin_cost_`1' = `admin_costs'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000h.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000i.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000j.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/baaqmd_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/baaqmd_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/baaqmd_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/baaqmd_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for baaqmd under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 7 of 100 (bento_gas)
Number of observations (_N) was 0, now 0.
bento_gas

. *******************************************************************
> ******************
. /*       0. Program: Gas taxes                                     
>                                      */
. *******************************************************************
> ******************
. 
. /*Bento, Antonio M., Lawrence H. Goulder, Mark R. Jacobsen, and Rog
> er H. Von Haefen. 
> "Distributional and efficiency impacts of increased US gasoline tax
> es." 
> American Economic Review 99, no. 3 (2009): 667-99. */
. * https://www.jstor.org/stable/pdf/25592478.pdf
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: bento_gas no uncorrecte
> d_vJK current

. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.35           .       -.35       -.
> 35

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Outputs */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Bento 
> et al. 2009)"

. 
. if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. 
. global note_`1' = `"Publication: Bento et al. 2009" "Global Assumpt
> ions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline Price
>  of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_note_g
> as_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000k.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000l.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000m.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bento_gas_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bento_gas_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bento_gas_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bento_gas_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for bento_gas under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 8 of 100 (bev_state)
Number of observations (_N) was 0, now 0.
bev_state

. *******************************************************************
> ******************
. /*       0. Program: State-Level Battery Electric Vehicle (BEV) Reb
> ate        */
. *******************************************************************
> ******************
. 
. /*
> Clinton, Bentley C., and Daniel C. Steinberg. 
> "Providing the Spark: Impact of financial incentives on battery ele
> ctric vehicle 
> adoption." Journal of Environmental Economics and Management 98 (20
> 19): 102255.
> * https://www.sciencedirect.com/science/article/pii/S00950696183031
> 15
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: bev_state no uncorrecte
> d_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local dynamic_grid = 1

. local static_grid = 0

. 
. local want_rebound = 1

. 
. local elec_dem_elas = -0.190144

. local elec_sup_elas = 0.7806420154513118

. 
. local bev_cf = "${bev_cf}"

. local veh_lifespan_type = substr("${bev_cf}", strpos("${bev_cf}", "
> _") + 1, .)

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .078           .       .078       .0
> 78
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. EV Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         forvalues y = 2011(1)2014{
  2.                 qui sum total_sales if year == `y'
  3.                 local total_sales`y' = r(mean)
  4.         }

.         if "`4'" == "baseline"{
.                 keep if year >= 2011 & year <= 2014
.                 forvalues y = 2011(1)2014{
  2.                         qui sum total_sales if year == `y'
  3.                         local total_sales`y' = r(mean)
  4.                         qui sum cf_mpg if year == `y'
  5.                         local cf_mpg_`y' = r(mean)
  6.                 }
.                 local ev_cf_mpg = (`total_sales2011' * `cf_mpg_2011
> ' + `total_sales2012' * `cf_mpg_2012' + `total_sales2013' * `cf_mpg
> _2013' + `total_sales2014' * `cf_mpg_2014') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013' + `total_sales201
> 4')
.         }

.         else{
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum cf_mpg
.                 local ev_cf_mpg = r(mean)
.         }

. restore

. 
. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                         
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                         
.         keep if year==${run_year}
(56 observations deleted)

.                 
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.                 
.         if "${spec_type}" == "baseline" {
.                 qui import excel "${assumptions}/evs/processed/stat
> e_level_gas_tax_rates", first clear
.                 keep tax2011 tax2012 tax2013 tax2014 state
.                 replace tax2011 = tax2011 * (${cpi_${dollar_year}} 
> / ${cpi_2011})
.                 replace tax2012 = tax2012 * (${cpi_${dollar_year}} 
> / ${cpi_2012})
.                 replace tax2013 = tax2013 * (${cpi_${dollar_year}} 
> / ${cpi_2013})
.                 replace tax2014 = tax2014 * (${cpi_${dollar_year}} 
> / ${cpi_2014})
.                 keep if state == "California" | state == "Hawaii" |
>  state == "Illinois" | state == "Massachusetts" | state == "Pennsyl
> vania" | state == "Tennessee" | state == "Texas"
.                 merge m:1 state using "${assumptions}/evs/processed
> /pop_by_state", keep(match)
.                 gen N = pop2011 + pop2012 + pop2013 + pop2014
.                 gen weighted_avg = pop2011 * tax2011 + pop2012 * ta
> x2012 + pop2013 * tax2013 + pop2014 * tax2014
.                 replace weighted_avg = weighted_avg / N
.                 
.                 egen N_states = total(N)
.                 egen weighted_avg_states = total(N * weighted_avg)
.                 replace weighted_avg_states = weighted_avg_states /
>  N_states
.                 sum weighted_avg_states
.                 local tax_rate = r(mean) / 100
. 
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if inrange(year, 2010, 2014)
.                 drop if year == 2014 & month > 6
.                 * Clinton and Steinberg 2019 look at BEV rebates fo
> r Q1 2010 through Q2 2014. 
.                 * Calculate gas price for 2014 using only 6 months 
> in 2014 sample. 
. 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) // no state-level gas price data so just gonna keep u
> sing national numbers
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
. 
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes.
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. EV Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs")

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. EV Energy Consumption Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2014{
  2.                         qui sum avg_kwh_per_mile if year == `y'
  3.                         local kwh_per_mile`y' = r(mean)
  4.                         qui sum avg_batt_cap if year == `y'
  5.                         local batt_cap`y' = r(mean)
  6.                 }
. 
.                 local kwh_per_mile = (`total_sales2011' * `kwh_per_
> mile2011' + `total_sales2012' * `kwh_per_mile2012' + `total_sales20
> 13' * `kwh_per_mile2013' + `total_sales2014' * `kwh_per_mile2014') 
> ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013' + `total_sales201
> 4')
.                 local batt_cap = (`total_sales2011' * `batt_cap2011
> ' + `total_sales2012' * `batt_cap2012' + `total_sales2013' * `batt_
> cap2013' + `total_sales2014' * `batt_cap2014') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013' + `total_sales201
> 4')
.         }

.         else{
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_kwh_per_mile
.                 local kwh_per_mile = r(mean)
.                 qui sum avg_batt_cap
.                 local batt_cap = r(mean)
.         }

. restore

. 
. 
. ****************************************************
. /*                  3e. EV Price Data             */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         forvalues y = 2011(1)2014{
  2.                 replace avg_msrp = avg_msrp * (${cpi_2011} / ${c
> pi_`y'}) if year == `y'
  3.                 qui sum avg_msrp if year == `y'
  4.                 local msrp`y' = r(mean)
  5.         }
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)

.         * calculating fixed price in paper's sample period for use 
> in calculating a constant elasticity
.         local elas_msrp = (`total_sales2011' * `msrp2011' + `total_
> sales2012' * `msrp2012' + `total_sales2013' * `msrp2013' + `total_s
> ales2014' * `msrp2014') ///
>                                         / (`total_sales2011' + `tot
> al_sales2012' + `total_sales2013' + `total_sales2014')

.         if "`4'" == "baseline"{
.                 local msrp = `elas_msrp'
.         }

.         else{
.                 use "${assumptions}/evs/processed/kwh_msrp_batt_cap
> .dta", clear
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_msrp
.                 local msrp = r(mean) * (${cpi_`dollar_year'} / ${cp
> i_${run_year}})
.         }

. 
.         use "${assumptions}/evs/processed/ice_price_data", clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2014{
  2.                         replace price = price * (${cpi_2011} / $
> {cpi_`y'}) if year == `y'
  3.                         qui sum price if year == `y'
  4.                         local ice_price`y' = r(mean)
  5.                 }
.                 local ice_price = (`total_sales2011' * `ice_price20
> 11' + `total_sales2012' * `ice_price2012' + `total_sales2013' * `ic
> e_price2013' + `total_sales2014' * `ice_price2014') ///
>                                         / (`total_sales2011' + `tot
> al_sales2012' + `total_sales2013' + `total_sales2014')       
.         }

.         else{
.                 qui sum price if year == `dollar_year'
.                 local ice_price = r(mean) // assuming prices are no
> minal
.         }

. restore

. 
. ****************************************************
. /* 3f. Population Data */
. ****************************************************
. preserve

.         ** avg over policy's time period (2011-2014) and across sta
> tes
.         ** No Hawaii!!!
.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/pop_by_state_2000
> _2019", clear
.                 forvalues y = 2011(1)2014{
  2.                         qui sum pop`y' if state == "California"
  3.                         local CA_pop_`y' = r(mean)
  4.                         qui sum pop`y' if state == "Illinois"
  5.                         local IL_pop_`y' = r(mean)
  6.                         qui sum pop`y' if state == "Massachusett
> s"
  7.                         local MA_pop_`y' = r(mean)
  8.                         qui sum pop`y' if state == "Pennsylvania
> "
  9.                         local PA_pop_`y' = r(mean)
 10.                         qui sum pop`y' if state == "Tennessee"
 11.                         local TN_pop_`y' = r(mean)
 12.                         qui sum pop`y' if state == "Texas"
 13.                         local TX_pop_`y' = r(mean)
 14.                 }
.                 keep if state == "California" | state == "Massachus
> etts" | state == "Pennsylvania" | state == "Tennessee" | state == "
> Texas"
.                 collapse (sum) pop2011 pop2012 pop2013 pop2014
.                 forvalues y = 2011(1)2014{
  2.                         qui sum pop`y'
  3.                         local total_pop`y' = r(mean)
  4.                 }
.         }

. restore

. 
. ****************************************************
. /* 3g. EV and ICE Age-State-Level VMT Data */
. ****************************************************
. local ub = `lifetime'

. local states CA IL MA PA TN TX

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ev_vmt_by_state_b
> y_age", clear
.                 keep if state == "CA" | state == "HI" | state == "I
> L" | state == "MA" | state == "PA" | state == "TN" | state == "TX"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2011(1)2014{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 4 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ev_miles_traveled`y' = weighted_av
> g[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ev_vmt_by_age", c
> lear
.                 local ub = `lifetime'
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ev_miles_traveled`y' = vmt[`y']
  3.                 }
.         }

. restore

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ice_vmt_by_state_
> by_age", clear
.                 keep if state == "CA" | state == "HI" | state == "I
> L" | state == "MA" | state == "PA" | state == "TN" | state == "TX"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2011(1)2014{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 4 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = weighted_a
> vg[`y'] * ${EV_VMT_car_adjustment}
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ice_vmt_by_age", 
> clear
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt[`y'] *
>  ${EV_VMT_car_adjustment}
  3.                 }
.         }       

. restore

. 
. ** Fixing EVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local ev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/cyl_batt_costs_combined",
>  clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2014{
  2.                         qui sum prod_cost_2018 if year == `y'
  3.                         local prod_cost`y' = r(mean)
  4.                 }
.                 local prod_cost = (`total_sales2011' * `prod_cost20
> 11' + `total_sales2012' * `prod_cost2012' + `total_sales2013' * `pr
> od_cost2013' + `total_sales2014' * `prod_cost2014') ///
>                                                 / (`total_sales2011
> ' + `total_sales2012' + `total_sales2013' + `total_sales2014')
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

.         else{
.                 keep if year == `dollar_year'
(31 observations deleted)
.                 qui sum prod_cost_2018
.                 local prod_cost = r(mean)
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

. restore

. 
. ****************************************************
. /* 3i. Subsidy Levels */
. ****************************************************
. preserve

.         ** Federal Subsidy
.         
.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         keep if year >= 2011 & year <= 2014
(8 observations deleted)

.         egen N = total(subsidy_N)

.         egen weighted_avg = total(subsidy_weighted_avg * subsidy_N)

.         replace weighted_avg = weighted_avg / N
(4 real changes made)

.         qui sum weighted_avg

.         local elas_avg_fed_subsidy = r(mean)

. 
.         if "`4'" == "baseline"{
.                 local avg_fed_subsidy = `elas_avg_fed_subsidy'
.         }

.         else{
.                 use "${assumptions}/evs/processed/bev_fed_subsidy_d
> ata", clear
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum subsidy_weighted_avg
.                 local avg_fed_subsidy = r(mean)
. 
.                 local avg_state_subsidy = 604.27 // see NST-EST2023
> -POP spreadsheet
.         }

.         if "${ev_fed_subsidy}" != ""{
.                 if ${ev_fed_subsidy} != -1 {
.                         local avg_fed_subsidy = ${ev_fed_subsidy}
.                 }
.         }

. restore

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$, (Table 8) 
. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 185444000 / 69972 // numerator from Tab
> le 8, denominator is sum of BEV registrations in Panel A of Table 1
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 2912 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'} / ${c
> pi_${policy_year}})

. local avg_subsidy = `adj_rebate_cost'

. local elas_avg_subsidy = `rebate_cost' // state subsidy, always wan
> t this in the policy year's dollars

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_state_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_state_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. ** adjust semi-elasticity to be for $1 of subsidy instead of $1,000
. local semie_paper = `semie'

. local semie = `semie' / 1000 // this is the in-context semi-elastic
> ity

. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_fed_subsidy' - 0.5 * 
> `elas_avg_subsidy'

. local epsilon = -`semie' * `net_elas_msrp'

. 
. local net_msrp = `msrp' - `avg_subsidy' - `avg_fed_subsidy'

. local total_subsidy = `avg_subsidy' + `avg_fed_subsidy'

. if "`4'" != "baseline"{
.         local semie = -`epsilon' / `net_msrp'
. }

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie' // positive
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `semie' * `avg_subsidy'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * utility companies
. if "`4'" == "baseline"{
.         * not including Hawaii for utility producer surplus or gov 
> revenue
.         forvalues y = 2011(1)2014{
  2.                 local util_gov_revenue_`y' = (`CA_pop_`y'' * ${g
> overnment_revenue_`y'_CA} + `IL_pop_`y'' * ${government_revenue_`y'
> _IL} + `MA_pop_`y'' * ${government_revenue_`y'_MA} + `PA_pop_`y'' *
>  ${government_revenue_`y'_PA} + `TN_pop_`y'' * ${government_revenue
> _`y'_TN} + `TX_pop_`y'' * ${government_revenue_`y'_TX}) ///
>                                                                    
>      / (`CA_pop_`y'' + `IL_pop_`y'' + `MA_pop_`y'' + `PA_pop_`y'' +
>  `TN_pop_`y'' + `TX_pop_`y'')
  3.                 local util_producer_surplus_`y' = (`CA_pop_`y'' 
> * ${producer_surplus_`y'_CA}  + `IL_pop_`y'' * ${producer_surplus_`
> y'_IL} + `MA_pop_`y'' * ${producer_surplus_`y'_MA} + `PA_pop_`y'' *
>  ${producer_surplus_`y'_PA} + `TN_pop_`y'' * ${producer_surplus_`y'
> _TN} + `TX_pop_`y'' * ${producer_surplus_`y'_TX}) ///
>                                                                    
>      / (`CA_pop_`y'' + `IL_pop_`y'' + `MA_pop_`y'' + `PA_pop_`y'' +
>  `TN_pop_`y'' + `TX_pop_`y'')
  4.         }
.         local util_gov_revenue = (`util_gov_revenue_2011' * `total_
> pop2011' + `util_gov_revenue_2012' * `total_pop2012' + `util_gov_re
> venue_2013' * `total_pop2013' + `util_gov_revenue_2014' * `total_po
> p2014') ///
>                                                                    
>      / (`total_pop2011' + `total_pop2012' + `total_pop2013' + `tota
> l_pop2014')
.         local util_producer_surplus = (`util_producer_surplus_2011'
>  * `total_pop2011' + `util_producer_surplus_2012' * `total_pop2012'
>  + `util_producer_surplus_2013' * `total_pop2013' + `util_producer_
> surplus_2014' * `total_pop2014') ///
>                                                                    
>      / (`total_pop2011' + `total_pop2012' + `total_pop2013' + `tota
> l_pop2014')
. }

. 
. else{
.         local util_gov_revenue ${government_revenue_`dollar_year'_$
> {State}}
.         local util_producer_surplus ${producer_surplus_`dollar_year
> '_${State}}
. }

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. local utility_fisc_ext = 0

. forvalues y = 1(1)`ub'{
  2.         local utility_fisc_ext = `utility_fisc_ext' + (`beh_resp
> onse' * `ev_miles_traveled`y'' * `kwh_per_mile' * `util_gov_revenue
> ') / ((1 + `discount')^(`y' - 1)) // gain in profit tax from highte
> r utility profits + gain in gov revenue since 28% of utilities are 
> publicly owned
  3. }

. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * `tax_rate') / ((
> 1+`discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = `beh_response' * ${`bev_cf'_cf_gas_fis
> c_ext_`dollar_year'}
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local fed_fisc_ext = `beh_response' * `avg_fed_subsidy'

. local avg_fed_subsidy_n = `avg_fed_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. 
. if `marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `fed_fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `fed_fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = 1

. 
. * marginal and inframarginal consumers
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_u = 0

. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         if "`4'" == "baseline"{
.                 local tot_gal = (${`bev_cf'_gal_2011} * `total_sale
> s2011' + ${`bev_cf'_gal_2012} * `total_sales2012' + ${`bev_cf'_gal_
> 2013} * `total_sales2013' + ${`bev_cf'_gal_2014} * `total_sales2014
> ') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014') // for Latex
.                 local gas_markup = (${nominal_gas_markup_2011} * ($
> {cpi_${dollar_year}} / ${cpi_2011}) * `total_sales2011' + ${nominal
> _gas_markup_2012} * (${cpi_${dollar_year}} / ${cpi_2012}) * `total_
> sales2012' + ${nominal_gas_markup_2013} * (${cpi_${dollar_year}} / 
> ${cpi_2013}) * `total_sales2013' + ${nominal_gas_markup_2014} * (${
> cpi_${dollar_year}} / ${cpi_2014}) * `total_sales2014') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014') // for Latex
. 
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * (`producer_p
> rice' - `producer_mc')) / ((1 + `discount')^(`y' - 1))) // positive
  3.                 }
.         }
. 
.         else{
.                 local tot_gal = ${`bev_cf'_gal_`dollar_year'} // fo
> r Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * ${`bev_cf'_wtp_
> prod_s_`dollar_year'} 
. 
.         }
. 
.         * producers - utilities
.         local wtp_prod_u = 0
.         local tot_kwh = 0
. 
.         forvalues y = 1(1)`ub'{
  2.                 local tot_kwh = `tot_kwh' + (`ev_miles_traveled`
> y'' * `kwh_per_mile') // for Latex
  3.                 local wtp_prod_u = `wtp_prod_u' + ((`beh_respons
> e' * (`ev_miles_traveled`y'' * `kwh_per_mile') * `util_producer_sur
> plus') / ((1 + `discount')^(`y' - 1)))
  4.         }
. }

. 
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. local profits_fisc_e = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' - `wtp_prod_s' + `wtp_prod_u
> '
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' - `wtp_prod_s' +
>  `wtp_prod_u'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a battery electric vehicle
. 
. if "`4'" == "baseline"{
.         
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         
.         *** dynamic grid stuff
.         local kwh_used `ev_miles_traveled1' * `kwh_per_mile'
.         local end_year = `dollar_year' + `ub' - 1
.         * no HI rip
.         local states CA MA PA TN TX
.         foreach s of local states{
  2.                 local i = 1
  3.                 local kwh_used `ev_miles_traveled1' * `kwh_per_m
> ile'
  4.                 forvalues y = `dollar_year'(1)`end_year'{
  5.                         dynamic_split_grid `kwh_used', starting_
> year(`dollar_year') ext_year(`y') discount_rate(`discount') ef(${re
> placement}) geo("`s'") type("uniform") grid_specify("yes") model(${
> grid_model})
  6.                         if `i' == 1{
  7.                                 local ev_first_damages_g_`s' = `
> r(global_enviro_ext)' // for Latex
  8.                         }
  9.                         local i = `i' + 1
 10.                         if `i' < 20{
 11.                                 local kwh_used `ev_miles_travele
> d`i'' * `kwh_per_mile'
 12.                         }
 13.                         local local_benefit_`s' = `local_benefit
> _`s'' + `r(local_enviro_ext)'
 14.                         local global_benefit_`s' = `global_benef
> it_`s'' + `r(global_enviro_ext)'
 15. 
.                         local carbon_content_`s' = `carbon_content_
> `s'' + `r(carbon_content)'
 16.                 }
 17.         }
.         local ev_first_damages_g = (`ev_first_damages_g_CA'* `CA_po
> p_2011' + `ev_first_damages_g_MA' * `MA_pop_2011' + `ev_first_damag
> es_g_PA' * `PA_pop_2011' + `ev_first_damages_g_TN' * `TN_pop_2011' 
> + `ev_first_damages_g_TX' * `TX_pop_2011') / (`CA_pop_2011' + `MA_p
> op_2011' + `PA_pop_2011' + `TN_pop_2011' + `TX_pop_2011')
.         local local_benefit = (`local_benefit_CA' * `CA_pop_2011' +
>  `local_benefit_MA' * `MA_pop_2011' + `local_benefit_PA' * `PA_pop_
> 2011' + `local_benefit_TN' * `TN_pop_2011' + `local_benefit_TX' * `
> TX_pop_2011') / (`CA_pop_2011' + `MA_pop_2011' + `PA_pop_2011' + `T
> N_pop_2011' + `TX_pop_2011')
.         local global_benefit = (`global_benefit_CA' * `CA_pop_2011'
>  + `global_benefit_MA' * `MA_pop_2011' + `global_benefit_PA' * `PA_
> pop_2011' + `global_benefit_TN' * `TN_pop_2011' + `global_benefit_T
> X' * `TX_pop_2011') / (`CA_pop_2011' + `MA_pop_2011' + `PA_pop_2011
> ' + `TN_pop_2011' + `TX_pop_2011')
.         local carbon_content = (`carbon_content_CA' * `CA_pop_2011'
>  + `carbon_content_MA' * `MA_pop_2011' + `carbon_content_PA' * `PA_
> pop_2011' + `carbon_content_TN' * `TN_pop_2011' + `carbon_content_T
> X' * `TX_pop_2011') / (`CA_pop_2011' + `MA_pop_2011' + `PA_pop_2011
> ' + `TN_pop_2011' + `TX_pop_2011')
.         local q_carbon_yes_ev = -`beh_response' * `carbon_content'
.         local q_carbon_yes_ev_mck = -`carbon_content'
. 
.         local total_bev_damages_glob = `global_benefit' // for Late
> x
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -`local_benefit' / `net_msr
> p' // for Latex
. 
.         local wtp_yes_ev_local = -`beh_response' * `local_benefit'
.         local wtp_yes_ev_global_tot = -`beh_response' * `global_ben
> efit'
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         ** need US-wide stuff for scaling cost curve outputs
.         local us_wtp_yes_ev_local = -`beh_response' * ${yes_ev_dama
> ges_local_no_r_`dollar_year'}
.         local us_wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev
> _damages_global_no_r_`dollar_year'} 
.         local us_wtp_yes_ev_g = `us_wtp_yes_ev_global_tot' * ((1 - 
> ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutu
> reSCC}))
.         local us_wtp_yes_ev = `us_wtp_yes_ev_local' + `us_wtp_yes_e
> v_g'
. }

. 
. ** now using Aidan's cleanly calculated externality values
. else{
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         local total_bev_damages_glob = ${yes_ev_damages_global_no_r
> _`dollar_year'} // for Latex
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -${yes_ev_damages_local_no_
> r_`dollar_year'} / `net_msrp' // for Latex
.         if "${latex}" == "yes"{
.                 local ev_first_damages_g = ${ev_first_damages_g_202
> 0} // for Latex
.         }
. 
.         local wtp_yes_ev_local = -`beh_response' * ${yes_ev_damages
> _local_no_r_`dollar_year'}
.         local wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev_da
> mages_global_no_r_`dollar_year'}
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local q_carbon_yes_ev = -`beh_response' * ${yes_ev_carbon_c
> ontent_`dollar_year'}
.         local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_`dolla
> r_year'}
. }

. 
. local yes_ev_local_ext = `wtp_yes_ev_local' / `beh_response'

. local yes_ev_global_ext_tot = `wtp_yes_ev_global_tot' / `beh_respon
> se'

. 
. local wtp_yes_ev = `wtp_yes_ev_local' + `wtp_yes_ev_g'

. 
. local yes_ev_ext = `wtp_yes_ev' / `beh_response'

. 
. ** Calculating the gallons used in the first year of a vehicle's li
> fetime for Latex
. preserve

.         
.         if "`4'" == "baseline"{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
.         
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 forvalues y = 2011(1)2014{
  2.                         qui sum `bev_cf'_mpg if year == `y'
  3.                         local cf_mpg_`y' = `r(mean)'
  4. 
.                         local gas_consumed_year_one_`y' = `vmt_age_
> 1' / `cf_mpg_`y''
  5.                 }
. 
.                 local gas_consumed_year_one = (`gas_consumed_year_o
> ne_2011' * `total_sales2011' + `gas_consumed_year_one_2012' * `tota
> l_sales2012' + `gas_consumed_year_one_2013' * `total_sales2013' + `
> gas_consumed_year_one_2014' * `total_sales2014') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014')
. 
.         }

. 
.         else{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 qui sum `bev_cf'_mpg if year == 2020
.                 local cf_mpg_2020 = `r(mean)'
. 
.                 local gas_consumed_year_one = `vmt_age_1' / `cf_mpg
> _2020'
.         }

. 
. restore

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. if "`4'" == "baseline"{
.         local wtp_no_ice_local = `beh_response' * ((${`bev_cf'_cf_d
> amages_loc_2011} * `total_sales2011' + ${`bev_cf'_cf_damages_loc_20
> 12} * `total_sales2012' + ${`bev_cf'_cf_damages_loc_2013} * `total_
> sales2013' + ${`bev_cf'_cf_damages_loc_2014} * `total_sales2014') /
> //
>                                                                    
>                               / (`total_sales2011' + `total_sales20
> 12' + `total_sales2013' + `total_sales2014'))
.         
.         local wtp_no_ice_global_tot = `beh_response' * ((${`bev_cf'
> _cf_damages_glob_2011} * `total_sales2011' + ${`bev_cf'_cf_damages_
> glob_2012} * `total_sales2012' + ${`bev_cf'_cf_damages_glob_2013} *
>  `total_sales2013' + ${`bev_cf'_cf_damages_glob_2014} * `total_sale
> s2014') ///
>                                                                    
>                              / (`total_sales2011' + `total_sales201
> 2' + `total_sales2013' + `total_sales2014'))
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
. 
.         local q_carbon_no_ice = `beh_response' * ((${`bev_cf'_cf_ca
> rbon_2011} * `total_sales2011' + ${`bev_cf'_cf_carbon_2012} * `tota
> l_sales2012' + ${`bev_cf'_cf_carbon_2013} * `total_sales2013' + ${`
> bev_cf'_cf_carbon_2014} * `total_sales2014') / (`total_sales2011' +
>  `total_sales2012' + `total_sales2013' + `total_sales2014'))
.         local q_carbon_no_ice_mck = `q_carbon_no_ice' / `beh_respon
> se'
. 
. 
.         ** need US-wide stuff for scaling cost curve outputs
.         local us_wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_
> damages_loc_`dollar_year'}
.         local us_wtp_no_ice_global_tot = `beh_response' * ${`bev_cf
> '_cf_damages_glob_`dollar_year'} 
.         local us_wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${U
> SShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureS
> CC}))
.         local us_wtp_no_ice = `us_wtp_no_ice_local' + `us_wtp_no_ic
> e_g'
. }

. else{
.         local wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_dam
> ages_loc_`dollar_year'}
.         local wtp_no_ice_global_tot = `beh_response' * ${`bev_cf'_c
> f_damages_glob_`dollar_year'}
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
.         local q_carbon_no_ice = `beh_response' * ${`bev_cf'_cf_carb
> on_`dollar_year'}
.         local q_carbon_no_ice_mck = ${`bev_cf'_cf_carbon_`dollar_ye
> ar'}
. }

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. if "`4'" == "baseline"{
.         local us_wtp_local = `us_wtp_yes_ev_local' + `us_wtp_no_ice
> _local'
.         local us_wtp_g = `us_wtp_yes_ev_g' + `us_wtp_no_ice_g'
. }

. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions, 59.5 kg CO2eq/kWh for NMC111 b
> atteries ***
. 
. * Averaging the SCC for 2011-2014
. if "`4'" == "baseline"{
.         local relevant_scc = (${sc_CO2_2011} * `total_sales2011' + 
> ${sc_CO2_2012} * `total_sales2012' + ${sc_CO2_2013} * `total_sales2
> 013' + ${sc_CO2_2014} * `total_sales2014') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014')
. }

. else{
.         local relevant_scc = ${sc_CO2_`dollar_year'}
. }

. 
. local batt_emissions = 59.5 * `batt_cap' // for Latex

. 
. local batt_damages = `batt_emissions' * 0.001 * `relevant_scc'

. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. 
. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_ev' + `wtp_no_ice' - `batt_man_ext'

. 
. local us_wtp_g = `us_wtp_g' - `batt_man_ext' // nothing location sp
> ecific for battery emissiosn, so the externality is the same for th
> e in-context estimate and the US-wide 2011-14 estimate 

. local wtp_glob = `wtp_yes_ev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_ev_local' + `wtp_no_ice_local'

. 
. if "`4'" == "baseline"{
.         local us_wtp_soc = `us_wtp_yes_ev' + `us_wtp_no_ice'
. }

. 
. if `want_rebound' == 1{
.         ** rebound effect
.         local rbd_coeff = (1 / (1 - (`elec_dem_elas'/`elec_sup_elas
> ')))
.         local wtp_soc_rbd =  -(1 - `rbd_coeff') * `wtp_yes_ev'
.         local wtp_soc_rbd_l = -(1 - `rbd_coeff') * `wtp_yes_ev_loca
> l'
.         local wtp_soc_rbd_global_tot = -(1 - `rbd_coeff') * `wtp_ye
> s_ev_global_tot'
.         local wtp_soc_rbd_g = -(1 - `rbd_coeff') * `wtp_yes_ev_g'
.         
.         local q_carbon_rbd = -(1 - `rbd_coeff') * `q_carbon_yes_ev'
.         local q_carbon_rbd_mck = -(1 - `rbd_coeff') * `q_carbon_yes
> _ev_mck'
.         
.     * Adding the rebound effect to the utility producer WTP
.         local wtp_private = `wtp_private' - (1 - `rbd_coeff') * `wt
> p_prod_u'
.         local wtp_prod_u = `rbd_coeff' * `wtp_prod_u' 
. 
.         * Adding the rebound effect to the utility fiscal externali
> ty
.         local total_cost = `total_cost' + (1 - `rbd_coeff') * `util
> ity_fisc_ext'
.         local utility_fisc_ext =  `utility_fisc_ext' - (1 - `rbd_co
> eff') * `utility_fisc_ext' // rebound makes the utility fe smaller
. 
.         if "`4'" == "baseline"{
.                 local us_wtp_soc_rbd_l = -(1 - `rbd_coeff') * `us_w
> tp_yes_ev_local'
.                 local us_wtp_soc_rbd_g = -(1 - `rbd_coeff') * `us_w
> tp_yes_ev_g'
.         }
.     
. }

. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_ev_local') 
> / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_e
> v_global_tot') / `beh_response'

. 
. 
. local enviro_ext = `wtp_soc' / `beh_response'

. local enviro_ext_l = (`wtp_loc' + `wtp_soc_rbd_l') / `beh_response'

. local enviro_ext_g = (`wtp_glob' + `wtp_soc_rbd_g') / `beh_response
> '

. 
. if "`4'" == "baseline"{
.         local us_enviro_ext = `us_wtp_soc' / `beh_response'
.         local us_enviro_ext_l = (`us_wtp_local' + `us_wtp_soc_rbd_l
> ') / `beh_response'
.         local us_enviro_ext_g = (`us_wtp_g' + `us_wtp_soc_rbd_g') /
>  `beh_response'
. }

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.         local lbd_cf = ("`bev_cf'" == "new_car")
.         ** --------------------- COST CURVE --------------------- *
> *
.         if "`4'" == "baseline"{
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_l
> ocal) ///
>                                                            start_ye
> ar(`dollar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${
> EV_VMT_car_adjustment})
.                 local dyn_enviro_local = `r(enviro_mvpf)' * (`envir
> o_ext_l' / `us_enviro_ext_l')
.                 di in red "dynamic enviro local is `dyn_enviro_loca
> l'"
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_g
> lobal) ///
>                                                            start_ye
> ar(`dollar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${
> EV_VMT_car_adjustment})
.                 local dyn_enviro_global_tot = `r(enviro_mvpf)' * (`
> enviro_ext_g' / `us_enviro_ext_g')
.                 local dyn_enviro_global = `dyn_enviro_global_tot' *
>  ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareG
> ovtFutureSCC}))
.                 di in red "dynamic enviro global is `dyn_enviro_glo
> bal'"
.                 
.         }
.         else{
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_l
> ocal) ///
>                                                            scc(${sc
> c_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_car_adjustment}) ev
> _grid(${ev_grid})
.                 local dyn_enviro_local = `r(enviro_mvpf)'
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_g
> lobal) ///
>                                                            scc(${sc
> c_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_car_adjustment}) ev
> _grid(${ev_grid})
.                 local dyn_enviro_global_tot = `r(enviro_mvpf)'
.                 local dyn_enviro_global = `dyn_enviro_global_tot' *
>  ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareG
> ovtFutureSCC}))
.         }
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost'
.                 local env_cost_wtp = (`dyn_enviro_local' + `dyn_env
> iro_global') * `program_cost'
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost'
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost'
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost'
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_ev' + `q_carbon_
> rbd'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_ev_mck' 
> + `q_carbon_rbd_mck' 

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_ev_glo
> bal_tot' + `wtp_soc_rbd_global_tot' + `env_cost_wtp_global_tot' + `
> batt_man_ext_tot') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost' + `fisc_ext_lr' + `gas_corp_fisc_e'

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`bev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${yes_ev_savings_`dollar_year'}) 
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_soc_rbd' + `wtp_saving
> s' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_ev_local' + `wtp_no_ice
> _local' + `env_cost_wtp_l' + `wtp_soc_rbd_l'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_ev_global_tot' + `wtp_no_ice_global_tot' + `env_co
> st_wtp_global_tot' + `wtp_soc_rbd_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_ev_global_tot
> ' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot' + `wtp_soc_
> rbd_global_tot') + 0.9 * `cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. local avg_lcoe = ${energy_cost}

. local energy_cost = `avg_lcoe'

. 
. local lifetime_energy_cost = 0

. forvalues y = 1(1)`ub'{
  2.         local lifetime_energy_cost = `lifetime_energy_cost' + (`
> ev_miles_traveled`y'' * `kwh_per_mile' * `energy_cost') / ((1 + `di
> scount')^(`y' - 1))
  3. }

. 
. di in red "lifetime energy cost is `lifetime_energy_cost'"
lifetime energy cost is 2215.685923488727

. 
. local purchase_price_diff = 8166 * (${cpi_2020} / ${cpi_2023}) // f
> rom vin diesel

. di in red "purchase price difference is `purchase_price_diff'"
purchase price difference is 6937.084013508324

. 
. local lifetime_gas_cost = ${clean_car_cf_gas_savings_2020} - ${clea
> n_car_wtp_prod_s_2020} - 0.08 * ${clean_car_cf_gas_savings_2020} - 
> ${clean_car_cf_gas_fisc_ext_2020}

. 
. di in red "lifetime gas cost is `lifetime_gas_cost'"
lifetime gas cost is 2518.564059499788

. 
. local resource_cost = `purchase_price_diff' + `lifetime_energy_cost
> ' - `lifetime_gas_cost'

. 
. di in red "resource cost is `resource_cost'"
resource cost is 6634.205877497263

. 
. local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_2020} - (59.5 
> * `batt_cap' * 0.001) - ${yes_ev_rbd_CO2_2020} // need to remove th
> e rebound effect

. di in red "yes ev carbon is `q_carbon_yes_ev_mck'"
yes ev carbon is -12.80923193082744

. local q_carbon_no_ice_mck = ${clean_car_cf_carbon_2020}

. di in red "no ice carbon is `q_carbon_no_ice_mck'"
no ice carbon is 27.89600716268394

. 
. local q_carbon_mck = `q_carbon_yes_ev_mck' + `q_carbon_no_ice_mck'

. di in red "carbon is `q_carbon_mck'"
carbon is 15.0867752318565

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck' + (1 - `rbd_coeff') * `
> semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_deal_`1' = 0

. global wtp_prod_s_`1' = -`wtp_prod_s'

. global wtp_prod_u_`1' = `wtp_prod_u'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global utility_fisc_ext_`1' = -`utility_fisc_ext'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global state_fisc_ext_`1' = 0

. global fed_fisc_ext_`1' = `fed_fisc_ext'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_`4'_ep = round(`epsilon', 0.001)

. 
. global profits_fisc_e_`1' = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob' 

. global wtp_loc_`1'= `wtp_loc'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_ev_`1' = `wtp_yes_ev'

. global wtp_yes_ev_local_`1' = `wtp_yes_ev_local'

. global wtp_yes_ev_g_`1' = `wtp_yes_ev_g'

. 
. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. global wtp_soc_rbd_l_`1' = `wtp_soc_rbd_l'

. global wtp_soc_rbd_g_`1' = `wtp_soc_rbd_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_deal wtp_glob wtp_loc wtp_soc_rbd
>  env_cost_wtp cost_wtp wtp_prod_s wtp_prod_u WTP_cc

. global wtp_comps_`1'_commas "wtp_cons", "wtp_deal", "wtp_glob", "wt
> p_loc", "wtp_soc_rbd", "env_cost_wtp", "wtp_prod_s", "wtp_prod_u"

. global wtp_comps_`1'_commas2 "cost_wtp", "WTP_cc"

. 
. global cost_comps_`1' program_cost beh_fisc_ext fed_fisc_ext gas_fi
> sc_ext profits_fisc_e fisc_ext_lr total_cost

. global cost_comps_`1'_commas "program_cost", "beh_fisc_ext", "fed_f
> isc_ext", "gas_fisc_ext", "profits_fisc_e", "fisc_ext_lr", "total_c
> ost"

. 
. global `1'_xlab 1 `"Consumers"' 2 `"Dealers"' 3 `""Global" "Env.""'
>  4 `""Local" "Env.""' 5 `"Rebound"' 6 `""Dynamic" "Env.""' 7 `""Dyn
> amic" "Price""' 8 `""Gasoline" "Producers""' 9 `"Utilities"' 10 `"T
> otal WTP"' 12 `""Program" "Cost""' 13 `""State" "Subsidy""' 14 `""F
> ederal" "Subsidy""' 15 `""Gas" "Tax""' 16 `""Profits" "Tax""' 17 `"
> "Climate" "FE""' 18 `""Govt" "Cost""' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 7

. global color_group4_`1' = 9

. global cost_color_start_`1' = 12

. global color_group5_`1' = 17

. 
. global `1'_name "State-level Battery Electric Vehicle Financial Inc
> entives"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. if "${latex}" == "yes"{
.         if "`bev_cf'" == "clean_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp kwh_per_mile tota
> l_subsidy kwh_used_year_one total_bev_damages_glob ev_first_damages
> _g wtp_yes_ev_g wtp_no_ice_global_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac gas_c
> onsumed_year_one total_bev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc tot_kwh util_producer_surplus wtp_prod_u total_bev_damage
> s_loc_n total_damages_loc_n ///
>                                         avg_state_subsidy avg_fed_s
> ubsidy avg_state_subsidy_n avg_fed_subsidy_n fed_fisc_ext state_fis
> c_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax_rate utility_fisc_e
> xt util_gov_revenue fisc_ext_lr ///
>                                         total_cost MVPF epsilon sem
> ie_paper EV_increase ep_avg_subsidy net_elas_msrp ev_cf_mpg avg_sub
> sidy_n batt_emissions batt_damages_n batt_man_ext
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "gas_consumed_
> year_one", "avg_subsidy", "net_elas_msrp") | inlist("`i'", "tot_gal
> ", "avg_state_subsidy") {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_fed_subsidy",
>  "total_subsidy", "ep_avg_subsidy") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
. 
.         }
. 
.         if "`bev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. 
. 
.         if "`bev_cf'" == "clean_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output for cost per ton measures
.                 local outputs ev_price ice_price 
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/Cost per Ton Measures/macros_`1'_`4'_ce.sty", write replac
> e
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> ce}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
(1 real change made)
state_fisc_ext
(1 real change made)
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
(1 real change made)
wtp_yes_ev_g
(1 real change made)
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000n.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000o.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000p.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for bev_state under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 9 of 100 (bev_state_i)
Number of observations (_N) was 0, now 0.
bev_state_i

. *******************************************************************
> ******************
. /*       0. Program: State-Level Battery Electric Vehicle (BEV) Reb
> ate        */
. *******************************************************************
> ******************
. 
. /*
> Clinton, Bentley C., and Daniel C. Steinberg. 
> "Providing the Spark: Impact of financial incentives on battery ele
> ctric vehicle 
> adoption." Journal of Environmental Economics and Management 98 (20
> 19): 102255.
> * https://www.sciencedirect.com/science/article/pii/S00950696183031
> 15
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: bev_state_i no uncorrec
> ted_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local dynamic_grid = 1

. local static_grid = 0

. 
. local want_rebound = 1

. 
. local elec_dem_elas = -0.190144

. local elec_sup_elas = 0.7806420154513118

. 
. local bev_cf = "${bev_cf}"

. local veh_lifespan_type = substr("${bev_cf}", strpos("${bev_cf}", "
> _") + 1, .)

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.055           .      -.055      -.0
> 55
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. EV Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         forvalues y = 2011(1)2014{
  2.                 qui sum total_sales if year == `y'
  3.                 local total_sales`y' = r(mean)
  4.         }

.         if "`4'" == "baseline"{
.                 keep if year >= 2011 & year <= 2014
.                 forvalues y = 2011(1)2014{
  2.                         qui sum total_sales if year == `y'
  3.                         local total_sales`y' = r(mean)
  4.                         qui sum cf_mpg if year == `y'
  5.                         local cf_mpg_`y' = r(mean)
  6.                 }
.                 local ev_cf_mpg = (`total_sales2011' * `cf_mpg_2011
> ' + `total_sales2012' * `cf_mpg_2012' + `total_sales2013' * `cf_mpg
> _2013' + `total_sales2014' * `cf_mpg_2014') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013' + `total_sales201
> 4')
.         }

.         else{
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum cf_mpg
.                 local ev_cf_mpg = r(mean)
.         }

. restore

. 
. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                         
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                         
.         keep if year==${run_year}
(56 observations deleted)

.                 
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.                 
.         if "${spec_type}" == "baseline" {
.                 qui import excel "${assumptions}/evs/processed/stat
> e_level_gas_tax_rates", first clear
.                 keep tax2011 tax2012 tax2013 tax2014 state
.                 replace tax2011 = tax2011 * (${cpi_${dollar_year}} 
> / ${cpi_2011})
.                 replace tax2012 = tax2012 * (${cpi_${dollar_year}} 
> / ${cpi_2012})
.                 replace tax2013 = tax2013 * (${cpi_${dollar_year}} 
> / ${cpi_2013})
.                 replace tax2014 = tax2014 * (${cpi_${dollar_year}} 
> / ${cpi_2014})
.                 keep if state == "Colorado" | state == "Georgia" | 
> state == "Louisiana" | state == "Maryland" | state == "Oregon" | st
> ate == "South Carolina" | state == "Utah" | state == "West Virginia
> "
.                 merge m:1 state using "${assumptions}/evs/processed
> /pop_by_state", keep(match)
.                 gen N = pop2011 + pop2012 + pop2013 + pop2014
.                 gen weighted_avg = pop2011 * tax2011 + pop2012 * ta
> x2012 + pop2013 * tax2013 + pop2014 * tax2014
.                 replace weighted_avg = weighted_avg / N
.                 
.                 egen N_states = total(N)
.                 egen weighted_avg_states = total(N * weighted_avg)
.                 replace weighted_avg_states = weighted_avg_states /
>  N_states
.                 sum weighted_avg_states
.                 local tax_rate = r(mean) / 100
. 
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if inrange(year, 2010, 2014)
.                 drop if year == 2014 & month > 6
.                 * Clinton and Steinberg 2019 look at BEV rebates fo
> r Q1 2010 through Q2 2014. 
.                 * Calculate gas price for 2014 using only 6 months 
> in 2014 sample. 
. 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) // no state-level gas price data so just gonna keep u
> sing national numbers
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
. 
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes.
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. EV Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs")

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. EV Energy Consumption Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2014{
  2.                         qui sum avg_kwh_per_mile if year == `y'
  3.                         local kwh_per_mile`y' = r(mean)
  4.                         qui sum avg_batt_cap if year == `y'
  5.                         local batt_cap`y' = r(mean)
  6.                 }
. 
.                 local kwh_per_mile = (`total_sales2011' * `kwh_per_
> mile2011' + `total_sales2012' * `kwh_per_mile2012' + `total_sales20
> 13' * `kwh_per_mile2013' + `total_sales2014' * `kwh_per_mile2014') 
> ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013' + `total_sales201
> 4')
.                 local batt_cap = (`total_sales2011' * `batt_cap2011
> ' + `total_sales2012' * `batt_cap2012' + `total_sales2013' * `batt_
> cap2013' + `total_sales2014' * `batt_cap2014') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013' + `total_sales201
> 4')
.         }

.         else{
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_kwh_per_mile
.                 local kwh_per_mile = r(mean)
.                 qui sum avg_batt_cap
.                 local batt_cap = r(mean)
.         }

. restore

. 
. 
. ****************************************************
. /*                  3e. EV Price Data             */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         forvalues y = 2011(1)2014{
  2.                 replace avg_msrp = avg_msrp * (${cpi_2011} / ${c
> pi_`y'}) if year == `y'
  3.                 qui sum avg_msrp if year == `y'
  4.                 local msrp`y' = r(mean)
  5.         }
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)

.         * calculating fixed price in paper's sample period for use 
> in calculating a constant elasticity
.         local elas_msrp = (`total_sales2011' * `msrp2011' + `total_
> sales2012' * `msrp2012' + `total_sales2013' * `msrp2013' + `total_s
> ales2014' * `msrp2014') ///
>                                         / (`total_sales2011' + `tot
> al_sales2012' + `total_sales2013' + `total_sales2014')

.         if "`4'" == "baseline"{
.                 local msrp = `elas_msrp'
.         }

.         else{
.                 use "${assumptions}/evs/processed/kwh_msrp_batt_cap
> .dta", clear
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_msrp
.                 local msrp = r(mean) * (${cpi_`dollar_year'} / ${cp
> i_${run_year}})
.         }

. 
.         use "${assumptions}/evs/processed/ice_price_data", clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2014{
  2.                         replace price = price * (${cpi_2011} / $
> {cpi_`y'}) if year == `y'
  3.                         qui sum price if year == `y'
  4.                         local ice_price`y' = r(mean)
  5.                 }
.                 local ice_price = (`total_sales2011' * `ice_price20
> 11' + `total_sales2012' * `ice_price2012' + `total_sales2013' * `ic
> e_price2013' + `total_sales2014' * `ice_price2014') ///
>                                         / (`total_sales2011' + `tot
> al_sales2012' + `total_sales2013' + `total_sales2014')       
.         }

.         else{
.                 qui sum price if year == `dollar_year'
.                 local ice_price = r(mean) // assuming prices are no
> minal
.         }

. restore

. 
. ****************************************************
. /* 3f. Population Data */
. ****************************************************
. preserve

.         ** avg over policy's time period (2011-2014) and across sta
> tes
.         ** No Hawaii!!!
.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/pop_by_state_2000
> _2019", clear
.                 forvalues y = 2011(1)2014{
  2.                         qui sum pop`y' if state == "Colorado"
  3.                         local CO_pop_`y' = r(mean)
  4.                         qui sum pop`y' if state == "Georgia"
  5.                         local GA_pop_`y' = r(mean)
  6.                         qui sum pop`y' if state == "Louisiana"
  7.                         local LA_pop_`y' = r(mean)
  8.                         qui sum pop`y' if state == "Maryland"
  9.                         local MD_pop_`y' = r(mean)
 10.                         qui sum pop`y' if state == "Oregon"
 11.                         local OR_pop_`y' = r(mean)
 12.                         qui sum pop`y' if state == "South Caroli
> na"
 13.                         local SC_pop_`y' = r(mean)
 14.             qui sum pop`y' if state == "Utah"
 15.                         local UT_pop_`y' = r(mean)
 16.                 }
.                 keep if state == "Colorado" | state == "Georgia" | 
> state == "Louisiana" | state == "Maryland" | state == "Oregon" | st
> ate == "South Carolina" | state == "Utah"
.                 collapse (sum) pop2011 pop2012 pop2013 pop2014
.                 forvalues y = 2011(1)2014{
  2.                         qui sum pop`y'
  3.                         local total_pop`y' = r(mean)
  4.                 }
.         }

. restore

. 
. ****************************************************
. /* 3g. EV and ICE Age-State-Level VMT Data */
. ****************************************************
. local ub = `lifetime'

. local states CO GA LA MD OR SC UT

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ev_vmt_by_state_b
> y_age", clear
.                 keep if state == "CO" | state == "GA" | state == "L
> A" | state == "MD" | state == "OR" | state == "SC" | state == "UT"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2011(1)2014{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 4 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ev_miles_traveled`y' = weighted_av
> g[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ev_vmt_by_age", c
> lear
.                 local ub = `lifetime'
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ev_miles_traveled`y' = vmt[`y']
  3.                 }
.         }

. restore

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ice_vmt_by_state_
> by_age", clear
.                 keep if state == "CO" | state == "GA" | state == "L
> A" | state == "MD" | state == "OR" | state == "SC" | state == "UT"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2011(1)2014{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 4 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = weighted_a
> vg[`y'] * ${EV_VMT_car_adjustment}
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ice_vmt_by_age", 
> clear
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt[`y'] *
>  ${EV_VMT_car_adjustment}
  3.                 }
.         }       

. restore

. 
. ** Fixing EVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local ev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/cyl_batt_costs_combined",
>  clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2014{
  2.                         qui sum prod_cost_2018 if year == `y'
  3.                         local prod_cost`y' = r(mean)
  4.                 }
.                 local prod_cost = (`total_sales2011' * `prod_cost20
> 11' + `total_sales2012' * `prod_cost2012' + `total_sales2013' * `pr
> od_cost2013' + `total_sales2014' * `prod_cost2014') ///
>                                                 / (`total_sales2011
> ' + `total_sales2012' + `total_sales2013' + `total_sales2014')
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

.         else{
.                 keep if year == `dollar_year'
(31 observations deleted)
.                 qui sum prod_cost_2018
.                 local prod_cost = r(mean)
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

. restore

. 
. ****************************************************
. /* 3i. Subsidy Levels */
. ****************************************************
. preserve

.         ** Federal Subsidy
.         
.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         keep if year >= 2011 & year <= 2014
(8 observations deleted)

.         egen N = total(subsidy_N)

.         egen weighted_avg = total(subsidy_weighted_avg * subsidy_N)

.         replace weighted_avg = weighted_avg / N
(4 real changes made)

.         qui sum weighted_avg

.         local elas_avg_fed_subsidy = r(mean)

. 
.         if "`4'" == "baseline"{
.                 local avg_fed_subsidy = `elas_avg_fed_subsidy'
.         }

.         else{
.                 use "${assumptions}/evs/processed/bev_fed_subsidy_d
> ata", clear
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum subsidy_weighted_avg
.                 local avg_fed_subsidy = r(mean)
. 
.                 local avg_state_subsidy = 604.27 // see NST-EST2023
> -POP spreadsheet
.         }

.         if "${ev_fed_subsidy}" != ""{
.                 if ${ev_fed_subsidy} != -1 {
.                         local avg_fed_subsidy = ${ev_fed_subsidy}
.         }
.         }

. restore

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$, (Table 2) 
. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 3032
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 3032 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'} / ${c
> pi_${policy_year}})

. local avg_subsidy = `adj_rebate_cost'

. local elas_avg_subsidy = `rebate_cost' // state subsidy, always wan
> t this in the policy year's dollars

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_state_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_state_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. ** adjust semi-elasticity to be for $1 of subsidy instead of $1,000
. local semie_paper = `semie'

. local semie = `semie' / 1000 // this is the in-context semi-elastic
> ity

. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_fed_subsidy' - 0.5 * 
> `elas_avg_subsidy'

. local epsilon = -`semie' * `net_elas_msrp'

. 
. local net_msrp = `msrp' - `avg_subsidy' - `avg_fed_subsidy'

. local total_subsidy = `avg_subsidy' + `avg_fed_subsidy'

. if "`4'" != "baseline"{
.         local semie = -`epsilon' / `net_msrp'
. }

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie'
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `semie' * `avg_subsidy'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * utility companies
. if "`4'" == "baseline"{
.         * not including Hawaii for utility producer surplus or gov 
> revenue
.         forvalues y = 2011(1)2014{
  2.                 local util_gov_revenue_`y' = (`CO_pop_`y'' * ${g
> overnment_revenue_`y'_CO} + `GA_pop_`y'' * ${government_revenue_`y'
> _GA} + `LA_pop_`y'' * ${government_revenue_`y'_LA} + `MD_pop_`y'' *
>  ${government_revenue_`y'_MD} + `OR_pop_`y'' * ${government_revenue
> _`y'_OR} + `SC_pop_`y'' * ${government_revenue_`y'_SC} + `UT_pop_`y
> '' * ${government_revenue_`y'_UT}) ///
>                                                                    
>      / (`CO_pop_`y'' + `GA_pop_`y'' + `LA_pop_`y'' + `MD_pop_`y'' +
>  `OR_pop_`y'' + `SC_pop_`y'' + `UT_pop_`y'')
  3.                 local util_producer_surplus_`y' = (`CO_pop_`y'' 
> * ${producer_surplus_`y'_CO}  + `GA_pop_`y'' * ${producer_surplus_`
> y'_GA} + `LA_pop_`y'' * ${producer_surplus_`y'_LA} + `MD_pop_`y'' *
>  ${producer_surplus_`y'_MD} + `OR_pop_`y'' * ${producer_surplus_`y'
> _OR} + `SC_pop_`y'' * ${producer_surplus_`y'_SC} + `UT_pop_`y'' * $
> {producer_surplus_`y'_UT}) ///
>                                                                    
>      / (`CO_pop_`y'' + `GA_pop_`y'' + `LA_pop_`y'' + `MD_pop_`y'' +
>  `OR_pop_`y'' + `SC_pop_`y'' + `UT_pop_`y'')
  4.         }
.         local util_gov_revenue = (`util_gov_revenue_2011' * `total_
> pop2011' + `util_gov_revenue_2012' * `total_pop2012' + `util_gov_re
> venue_2013' * `total_pop2013' + `util_gov_revenue_2014' * `total_po
> p2014') ///
>                                                                    
>      / (`total_pop2011' + `total_pop2012' + `total_pop2013' + `tota
> l_pop2014')
.         local util_producer_surplus = (`util_producer_surplus_2011'
>  * `total_pop2011' + `util_producer_surplus_2012' * `total_pop2012'
>  + `util_producer_surplus_2013' * `total_pop2013' + `util_producer_
> surplus_2014' * `total_pop2014') ///
>                                                                    
>      / (`total_pop2011' + `total_pop2012' + `total_pop2013' + `tota
> l_pop2014')
. }

. 
. else{
.         local util_gov_revenue ${government_revenue_`dollar_year'_$
> {State}}
.         local util_producer_surplus ${producer_surplus_`dollar_year
> '_${State}}
. }

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. local utility_fisc_ext = 0

. forvalues y = 1(1)`ub'{
  2.         local utility_fisc_ext = `utility_fisc_ext' + (`beh_resp
> onse' * `ev_miles_traveled`y'' * `kwh_per_mile' * `util_gov_revenue
> ') / ((1 + `discount')^(`y' - 1)) // gain in profit tax from highte
> r utility profits + gain in gov revenue since 28% of utilities are 
> publicly owned
  3. }

. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * `tax_rate') / ((
> 1+`discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = `beh_response' * ${`bev_cf'_cf_gas_fis
> c_ext_`dollar_year'}
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local fed_fisc_ext = `beh_response' * `avg_fed_subsidy'

. local avg_fed_subsidy_n = `avg_fed_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. 
. if `marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `fed_fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `fed_fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = 1

. 
. * marginal and inframarginal consumers
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_u = 0

. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         if "`4'" == "baseline"{
.                 local tot_gal = (${`bev_cf'_gal_2011} * `total_sale
> s2011' + ${`bev_cf'_gal_2012} * `total_sales2012' + ${`bev_cf'_gal_
> 2013} * `total_sales2013' + ${`bev_cf'_gal_2014} * `total_sales2014
> ') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014') // for Latex
.                 local gas_markup = (${nominal_gas_markup_2011} * ($
> {cpi_${dollar_year}} / ${cpi_2011}) * `total_sales2011' + ${nominal
> _gas_markup_2012} * (${cpi_${dollar_year}} / ${cpi_2012}) * `total_
> sales2012' + ${nominal_gas_markup_2013} * (${cpi_${dollar_year}} / 
> ${cpi_2013}) * `total_sales2013' + ${nominal_gas_markup_2014} * (${
> cpi_${dollar_year}} / ${cpi_2014}) * `total_sales2014') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014') // for Latex
. 
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * (`producer_p
> rice' - `producer_mc')) / ((1 + `discount')^(`y' - 1))) // positive
  3.                 }
.         }
. 
.         else{
.                 local tot_gal = ${`bev_cf'_gal_`dollar_year'} // fo
> r Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * ${`bev_cf'_wtp_
> prod_s_`dollar_year'} 
. 
.         }
. 
.         * producers - utilities
.         local wtp_prod_u = 0
.         local tot_kwh = 0
. 
.         forvalues y = 1(1)`ub'{
  2.                 local tot_kwh = `tot_kwh' + (`ev_miles_traveled`
> y'' * `kwh_per_mile') // for Latex
  3.                 local wtp_prod_u = `wtp_prod_u' + ((`beh_respons
> e' * (`ev_miles_traveled`y'' * `kwh_per_mile') * `util_producer_sur
> plus') / ((1 + `discount')^(`y' - 1)))
  4.         }
. }

. 
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. local profits_fisc_e = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' - `wtp_prod_s' + `wtp_prod_u
> '
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' - `wtp_prod_s' +
>  `wtp_prod_u'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a battery electric vehicle
. 
. if "`4'" == "baseline"{
.         
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         
.         *** dynamic grid stuff
.         local kwh_used `ev_miles_traveled1' * `kwh_per_mile'
.         local end_year = `dollar_year' + `ub' - 1
.         local states CO GA LA MD OR SC UT WV
.         foreach s of local states{
  2.                 local i = 1
  3.                 local kwh_used `ev_miles_traveled1' * `kwh_per_m
> ile'
  4.                 forvalues y = `dollar_year'(1)`end_year'{
  5.                         dynamic_split_grid `kwh_used', starting_
> year(`dollar_year') ext_year(`y') discount_rate(`discount') ef(${re
> placement}) geo("`s'") type("uniform") grid_specify("yes") model(${
> grid_model})
  6.                         if `i' == 1{
  7.                                 local ev_first_damages_g_`s' = `
> r(global_enviro_ext)' // for Latex
  8.                         }
  9.                         local i = `i' + 1
 10.                         if `i' < 20{
 11.                                 local kwh_used `ev_miles_travele
> d`i'' * `kwh_per_mile'
 12.                         }
 13.                         local local_benefit_`s' = `local_benefit
> _`s'' + `r(local_enviro_ext)'
 14.                         local global_benefit_`s' = `global_benef
> it_`s'' + `r(global_enviro_ext)'
 15. 
.                         local carbon_content_`s' = `carbon_content_
> `s'' + `r(carbon_content)'
 16.                 }
 17.         }
.         local ev_first_damages_g = (`ev_first_damages_g_CO'* `CO_po
> p_2011' + `ev_first_damages_g_GA' * `GA_pop_2011' + `ev_first_damag
> es_g_LA' * `LA_pop_2011' + `ev_first_damages_g_MD' * `MD_pop_2011' 
> + `ev_first_damages_g_OR' * `OR_pop_2011' + `ev_first_damages_g_SC'
>  * `SC_pop_2011' + `ev_first_damages_g_UT' * `UT_pop_2011') / (`CO_
> pop_2011' + `GA_pop_2011' + `LA_pop_2011' + `MD_pop_2011' + `OR_pop
> _2011' + `SC_pop_2011' + `UT_pop_2011')
.         local local_benefit = (`local_benefit_CO' * `CO_pop_2011' +
>  `local_benefit_GA' * `GA_pop_2011' + `local_benefit_LA' * `LA_pop_
> 2011' + `local_benefit_MD' * `MD_pop_2011' + `local_benefit_OR' * `
> OR_pop_2011' + `local_benefit_SC' * `SC_pop_2011' + `local_benefit_
> UT' * `UT_pop_2011') / (`CO_pop_2011' + `GA_pop_2011' + `LA_pop_201
> 1' + `MD_pop_2011' + `OR_pop_2011' + `SC_pop_2011' + `UT_pop_2011')
.         local global_benefit = (`global_benefit_CO' * `CO_pop_2011'
>  + `global_benefit_GA' * `GA_pop_2011' + `global_benefit_LA' * `LA_
> pop_2011' + `global_benefit_MD' * `MD_pop_2011' + `global_benefit_O
> R' * `OR_pop_2011' + `global_benefit_SC' * `SC_pop_2011' + `global_
> benefit_UT' * `UT_pop_2011') / (`CO_pop_2011' + `GA_pop_2011' + `LA
> _pop_2011' + `MD_pop_2011' + `OR_pop_2011' + `SC_pop_2011' + `UT_po
> p_2011')
.         local carbon_content = (`carbon_content_CO' * `CO_pop_2011'
>  + `carbon_content_GA' * `GA_pop_2011' + `carbon_content_LA' * `LA_
> pop_2011' + `carbon_content_MD' * `MD_pop_2011' + `carbon_content_O
> R' * `OR_pop_2011' + `carbon_content_SC' * `SC_pop_2011' + `carbon_
> content_UT' * `UT_pop_2011') / (`CO_pop_2011' + `GA_pop_2011' + `LA
> _pop_2011' + `MD_pop_2011' + `OR_pop_2011' + `SC_pop_2011' + `UT_po
> p_2011')
.         local q_carbon_yes_ev = -`beh_response' * `carbon_content'
.         local q_carbon_yes_ev_mck = -`carbon_content'
. 
.         local total_bev_damages_glob = `global_benefit' // for Late
> x
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = `local_benefit' / `net_msrp
> ' // for Latex
. 
.         local wtp_yes_ev_local = -`beh_response' * `local_benefit'
.         local wtp_yes_ev_global_tot = -`beh_response' * `global_ben
> efit'
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         ** need US-wide stuff for scaling cost curve outputs
.         local us_wtp_yes_ev_local = -`beh_response' * ${yes_ev_dama
> ges_local_no_r_`dollar_year'}
.         local us_wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev
> _damages_global_no_r_`dollar_year'} 
.         local us_wtp_yes_ev_g = `us_wtp_yes_ev_global_tot' * ((1 - 
> ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutu
> reSCC}))
.         local us_wtp_yes_ev = `us_wtp_yes_ev_local' + `us_wtp_yes_e
> v_g'
. }

. 
. ** now using Aidan's cleanly calculated externality values
. else{
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         local total_bev_damages_glob = ${yes_ev_damages_global_no_r
> _`dollar_year'} // for Latex
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -${yes_ev_damages_local_no_
> r_`dollar_year'} / `net_msrp' // for Latex
.         if "${latex}" == "yes"{
.                 local ev_first_damages_g = ${ev_first_damages_g_202
> 0} // for Latex
.         }
. 
.         local wtp_yes_ev_local = -`beh_response' * ${yes_ev_damages
> _local_no_r_`dollar_year'}
.         local wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev_da
> mages_global_no_r_`dollar_year'}
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local q_carbon_yes_ev = -`beh_response' * ${yes_ev_carbon_c
> ontent_`dollar_year'}
.         local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_`dolla
> r_year'}
. }

. 
. local yes_ev_local_ext = `wtp_yes_ev_local' / `beh_response'

. local yes_ev_global_ext_tot = `wtp_yes_ev_global_tot' / `beh_respon
> se'

. local wtp_yes_ev = `wtp_yes_ev_local' + `wtp_yes_ev_g'

. 
. 
. local yes_ev_ext = `wtp_yes_ev' / `beh_response'

. 
. ** Calculating the gallons used in the first year of a vehicle's li
> fetime for Latex
. preserve

.         
.         if "`4'" == "baseline"{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 forvalues y = 2011(1)2014{
  2.                         qui sum `bev_cf'_mpg if year == `y'
  3.                         local cf_mpg_`y' = `r(mean)'
  4. 
.                         local gas_consumed_year_one_`y' = `vmt_age_
> 1' / `cf_mpg_`y''
  5.                 }
. 
.                 local gas_consumed_year_one = (`gas_consumed_year_o
> ne_2011' * `total_sales2011' + `gas_consumed_year_one_2012' * `tota
> l_sales2012' + `gas_consumed_year_one_2013' * `total_sales2013' + `
> gas_consumed_year_one_2014' * `total_sales2014') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014')
. 
.         }

. 
.         else{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 qui sum `bev_cf'_mpg if year == 2020
.                 local cf_mpg_2020 = `r(mean)'
. 
.                 local gas_consumed_year_one = `vmt_age_1' / `cf_mpg
> _2020'
.         }

. 
. restore

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. if "`4'" == "baseline"{
.         local wtp_no_ice_local = `beh_response' * ((${`bev_cf'_cf_d
> amages_loc_2011} * `total_sales2011' + ${`bev_cf'_cf_damages_loc_20
> 12} * `total_sales2012' + ${`bev_cf'_cf_damages_loc_2013} * `total_
> sales2013' + ${`bev_cf'_cf_damages_loc_2014} * `total_sales2014') /
> //
>                                                                    
>                               / (`total_sales2011' + `total_sales20
> 12' + `total_sales2013' + `total_sales2014'))
.         
.         local wtp_no_ice_global_tot = `beh_response' * ((${`bev_cf'
> _cf_damages_glob_2011} * `total_sales2011' + ${`bev_cf'_cf_damages_
> glob_2012} * `total_sales2012' + ${`bev_cf'_cf_damages_glob_2013} *
>  `total_sales2013' + ${`bev_cf'_cf_damages_glob_2014} * `total_sale
> s2014') ///
>                                                                    
>                              / (`total_sales2011' + `total_sales201
> 2' + `total_sales2013' + `total_sales2014'))
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
. 
.         local q_carbon_no_ice = `beh_response' * ((${`bev_cf'_cf_ca
> rbon_2011} * `total_sales2011' + ${`bev_cf'_cf_carbon_2012} * `tota
> l_sales2012' + ${`bev_cf'_cf_carbon_2013} * `total_sales2013' + ${`
> bev_cf'_cf_carbon_2014} * `total_sales2014') / (`total_sales2011' +
>  `total_sales2012' + `total_sales2013' + `total_sales2014'))
.         local q_carbon_no_ice_mck = `q_carbon_no_ice' / `beh_respon
> se'
. 
. 
.         ** need US-wide stuff for scaling cost curve outputs
.         local us_wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_
> damages_loc_`dollar_year'}
.         local us_wtp_no_ice_global_tot = `beh_response' * ${`bev_cf
> '_cf_damages_glob_`dollar_year'} 
.         local us_wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${U
> SShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureS
> CC}))
.         local us_wtp_no_ice = `us_wtp_no_ice_local' + `us_wtp_no_ic
> e_g'
. }

. else{
.         local wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_dam
> ages_loc_`dollar_year'}
.         local wtp_no_ice_global_tot = `beh_response' * ${`bev_cf'_c
> f_damages_glob_`dollar_year'}
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
.         local q_carbon_no_ice = `beh_response' * ${`bev_cf'_cf_carb
> on_`dollar_year'}
.         local q_carbon_no_ice_mck = ${`bev_cf'_cf_carbon_`dollar_ye
> ar'}
. }

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions, 59.5 kg CO2eq/kWh for NMC111 b
> atteries ***
. 
. * Averaging the SCC for 2011-2014
. if "`4'" == "baseline"{
.         local relevant_scc = (${sc_CO2_2011} * `total_sales2011' + 
> ${sc_CO2_2012} * `total_sales2012' + ${sc_CO2_2013} * `total_sales2
> 013' + ${sc_CO2_2014} * `total_sales2014') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
>  + `total_sales2014')
. }

. else{
.         local relevant_scc = ${sc_CO2_`dollar_year'}
. }

. 
. local batt_emissions = 59.5 * `batt_cap' // for Latex

. 
. local batt_damages = `batt_emissions' * 0.001 * `relevant_scc'

. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_ev' + `wtp_no_ice' - `batt_man_ext'

. local wtp_glob = `wtp_yes_ev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_ev_local' + `wtp_no_ice_local'

. 
. 
. if "`4'" == "baseline"{
.         local us_wtp_soc = `us_wtp_yes_ev' + `us_wtp_no_ice'
. }

. 
. if `want_rebound' == 1{
.         ** rebound effect
.         local rbd_coeff = (1 / (1 - (`elec_dem_elas'/`elec_sup_elas
> ')))
.         local wtp_soc_rbd =  -(1 - `rbd_coeff') * `wtp_yes_ev'
.         local wtp_soc_rbd_l = -(1 - `rbd_coeff') * `wtp_yes_ev_loca
> l'
.         local wtp_soc_rbd_global_tot = -(1 - `rbd_coeff') * `wtp_ye
> s_ev_global_tot'
.         local wtp_soc_rbd_g = -(1 - `rbd_coeff') * `wtp_yes_ev_g'
.         
.         local q_carbon_rbd = -(1 - `rbd_coeff') * `q_carbon_yes_ev'
.         local q_carbon_rbd_mck = -(1 - `rbd_coeff') * `q_carbon_yes
> _ev_mck'
.     
.     * Adding the rebound effect to the utility producer WTP
.     local wtp_private = `wtp_private' - (1 - `rbd_coeff') * `wtp_pr
> od_u'
.     local wtp_prod_u = `rbd_coeff' * `wtp_prod_u'
. 
.         * Adding the rebound effect to the utility fiscal externali
> ty
.         local total_cost = `total_cost' + (1 - `rbd_coeff') * `util
> ity_fisc_ext'
.         local utility_fisc_ext =  `utility_fisc_ext' - (1 - `rbd_co
> eff') * `utility_fisc_ext' // rebound makes the utility fe smaller
.     
. }

. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_ev_local') 
> / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_e
> v_global_tot') / `beh_response'

. 
. local enviro_ext = `wtp_soc' / `beh_response'

. if "`4'" == "baseline"{
.         local us_enviro_ext = `us_wtp_soc' / `beh_response'
. }

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.     local lbd_cf = ("`bev_cf'" == "new_car")
.         ** --------------------- COST CURVE --------------------- *
> *
.         if "`4'" == "baseline"{
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_l
> ocal) ///
>                                                            start_ye
> ar(`dollar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${
> EV_VMT_car_adjustment})
.                 local dyn_enviro_local = `r(enviro_mvpf)' * (`envir
> o_ext' / `us_enviro_ext')
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_g
> lobal) ///
>                                                            start_ye
> ar(`dollar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${
> EV_VMT_car_adjustment})
.                 local dyn_enviro_global_tot = `r(enviro_mvpf)' * (`
> enviro_ext' / `us_enviro_ext')
.                 local dyn_enviro_global = `dyn_enviro_global_tot' *
>  ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareG
> ovtFutureSCC}))
.         }
.         else{
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_l
> ocal) ///
>                                                            scc(${sc
> c_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_car_adjustment}) ev
> _grid(${ev_grid})
.                 local dyn_enviro_local = `r(enviro_mvpf)'
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                        curr_prod(`m
> arg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_globa
> l) ///
>                                                            scc(${sc
> c_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_car_adjustment}) ev
> _grid(${ev_grid})
.                 local dyn_enviro_global_tot = `r(enviro_mvpf)'
.                 local dyn_enviro_global = `dyn_enviro_global_tot' *
>  ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareG
> ovtFutureSCC}))
.         }
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost'
.                 local env_cost_wtp = (`dyn_enviro_local' + `dyn_env
> iro_global') * `program_cost'
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost'
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost'
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost'
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_ev' + `q_carbon_
> rbd'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_ev_mck' 
> + `q_carbon_rbd_mck' 

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_ev_glo
> bal_tot' + `wtp_soc_rbd_global_tot' + `env_cost_wtp_global_tot' + `
> batt_man_ext_tot') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost' + `fisc_ext_lr' + `gas_corp_fisc_e'

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`bev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${yes_ev_savings_`dollar_year'})
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_soc_rbd' + `wtp_saving
> s' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_ev_local' + `wtp_no_ice
> _local' + `env_cost_wtp_l' + `wtp_soc_rbd_l'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_ev_global_tot' + `wtp_no_ice_global_tot' + `env_co
> st_wtp_global_tot' + `wtp_soc_rbd_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_ev_global_tot
> ' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot' + `wtp_soc_
> rbd_global_tot') + 0.9 * `cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. local avg_lcoe = ${energy_cost}

. local energy_cost = `avg_lcoe'

. 
. local lifetime_energy_cost = 0

. forvalues y = 1(1)`ub'{
  2.         local lifetime_energy_cost = `lifetime_energy_cost' + (`
> ev_miles_traveled`y'' * `kwh_per_mile' * `energy_cost') / ((1 + `di
> scount')^(`y' - 1))
  3. }

. 
. 
. 
. local purchase_price_diff = 8166 * (${cpi_2020} / ${cpi_2023}) // f
> rom vin diesel

. 
. local lifetime_gas_cost = ${clean_car_cf_gas_savings_2020} - ${clea
> n_car_wtp_prod_s_2020} - 0.08 * ${clean_car_cf_gas_savings_2020} - 
> ${clean_car_cf_gas_fisc_ext_2020}

. 
. local resource_cost = `purchase_price_diff' + `lifetime_energy_cost
> ' - `lifetime_gas_cost'

. 
. local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_2020} - (59.5 
> * `batt_cap' * 0.001) - ${yes_ev_rbd_CO2_2020} // need to remove th
> e rebound effect

. 
. local q_carbon_no_ice_mck = ${clean_car_cf_carbon_2020}

. 
. local q_carbon_mck = `q_carbon_yes_ev_mck' + `q_carbon_no_ice_mck'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck' + (1 - `rbd_coeff') * `
> semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_deal_`1' = 0

. global wtp_prod_s_`1' = -`wtp_prod_s'

. global wtp_prod_u_`1' = `wtp_prod_u'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global utility_fisc_ext_`1' = -`utility_fisc_ext'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global state_fisc_ext_`1' = 0

. global fed_fisc_ext_`1' = `fed_fisc_ext'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_`4'_ep = round(`epsilon', 0.001)

. 
. global profits_fisc_e_`1' = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob' 

. global wtp_loc_`1'= `wtp_loc'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_ev_`1' = `wtp_yes_ev'

. global wtp_yes_ev_local_`1' = `wtp_yes_ev_local'

. global wtp_yes_ev_g_`1' = `wtp_yes_ev_g'

. 
. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. global wtp_soc_rbd_l_`1' = `wtp_soc_rbd_l'

. global wtp_soc_rbd_g_`1' = `wtp_soc_rbd_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_deal wtp_glob wtp_loc wtp_soc_rbd
>  env_cost_wtp cost_wtp wtp_prod_s wtp_prod_u WTP_cc

. global wtp_comps_`1'_commas "wtp_cons", "wtp_deal", "wtp_glob", "wt
> p_loc", "wtp_soc_rbd", "env_cost_wtp", "wtp_prod_s", "wtp_prod_u"

. global wtp_comps_`1'_commas2 "cost_wtp", "WTP_cc"

. 
. global cost_comps_`1' program_cost beh_fisc_ext fed_fisc_ext gas_fi
> sc_ext profits_fisc_e fisc_ext_lr total_cost

. global cost_comps_`1'_commas "program_cost", "beh_fisc_ext", "fed_f
> isc_ext", "gas_fisc_ext", "profits_fisc_e", "fisc_ext_lr", "total_c
> ost"

. 
. global `1'_xlab 1 `"Consumers"' 2 `"Dealers"' 3 `""Global" "Env.""'
>  4 `""Local" "Env.""' 5 `"Rebound"' 6 `""Dynamic" "Env.""' 7 `""Dyn
> amic" "Price""' 8 `""Gasoline" "Producers""' 9 `"Utilities"' 10 `"T
> otal WTP"' 12 `""Program" "Cost""' 13 `""State" "Subsidy""' 14 `""F
> ederal" "Subsidy""' 15 `""Gas" "Tax""' 16 `""Profits" "Tax""' 17 `"
> "Climate" "FE""' 18 `""Govt" "Cost""' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 7

. global color_group4_`1' = 9

. global cost_color_start_`1' = 12

. global color_group5_`1' = 17

. 
. global `1'_name "State-level Battery Electric Vehicle Tax Credits"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. if "${latex}" == "yes"{
.         if "`bev_cf'" == "clean_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp kwh_per_mile tota
> l_subsidy kwh_used_year_one total_bev_damages_glob ev_first_damages
> _g wtp_yes_ev_g wtp_no_ice_global_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac gas_c
> onsumed_year_one total_bev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc tot_kwh util_producer_surplus wtp_prod_u total_bev_damage
> s_loc_n total_damages_loc_n ///
>                                         avg_state_subsidy avg_fed_s
> ubsidy avg_state_subsidy_n avg_fed_subsidy_n fed_fisc_ext state_fis
> c_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax_rate utility_fisc_e
> xt util_gov_revenue fisc_ext_lr ///
>                                         total_cost MVPF epsilon sem
> ie_paper EV_increase ep_avg_subsidy net_elas_msrp ev_cf_mpg avg_sub
> sidy_n batt_emissions batt_damages_n batt_man_ext
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "gas_consumed_
> year_one", "avg_subsidy", "net_elas_msrp") | inlist("`i'", "tot_gal
> ", "avg_state_subsidy") {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_fed_subsidy",
>  "total_subsidy", "ep_avg_subsidy") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
. 
.         }
. 
.         if "`bev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
(1 real change made)
state_fisc_ext
(1 real change made)
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
(1 real change made)
wtp_yes_ev_g
(1 real change made)
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000q.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000r.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000s.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_i_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_i_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_i_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bev_state_i_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for bev_state_i under current
(4 vars, 5 obs)
spec_type     policy_year   paper_doll~r  tax_rate_p~r

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   paper_doll~r  tax_rate_p~r
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   paper_doll~r  tax_rate_p~r
1
Specification 1 of 1, program 10 of 100 (bmm_crude)
Number of observations (_N) was 0, now 0.
bmm_crude

. *************************************************************
. /* 1. Program: Tax on Crude Oil Production                         
>          */
. *************************************************************
. 
. /* 
> Brown, Jason P. and Maniloff, Peter and Manning, Dale T. 2020.
> "Spatially variable taxation and resource extraction: The impact of
>  state oil taxes on drilling in the US"
> Journal of Environmental Economics and Management 103.  
> */
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
.         if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
.         }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" != "yes" {
.         preserve
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow          
. levelsof estimate, local(estimates)
`"e_supply_crude"'
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.315           .      -.315      -.3
> 15
.         restore
. }

. 
. global crude_market_toggle              elastic

. 
. *********************************
. /* 3. Pull Necessary Estimates / Parameters */
. *********************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 4. Pull Tax Rates */
. *********************************
. local tax_rate_crude = ${tax_rate_paper} * (${cpi_`dollar_year'}/${
> cpi_${paper_dollar_year}})

. 
. preserve

. 
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear        

.                 keep if year == `dollar_year'
(56 observations deleted)

.                 
.                 gen per_barrel_markup = (refiner_crude_cost - crude
> _landed_cost)

.                 local tax_per_barrel = per_barrel_markup * ${gasoli
> ne_effective_corp_tax}

.                 
. restore

. 
. *********************************
. /* 5. Calculate Environmental Externality */
. *********************************
. 
.         *********************************
.         /* 5a. Import Social Costs and Parameters*/
.         *********************************
.         preserve

. 
.                 local ghg CO2 CH4 N2O

.                 foreach g of local ghg {
  2.                         
.                         local social_cost_`g' = ${sc_`g'_`dollar_ye
> ar'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                                 
.                 }       

.                 
.                 ** Emissions from crude oil production (global).
.                 import excel "${policy_assumptions}", first clear s
> heet("driving_parameters")
(7 vars, 26 obs)

.                 
.                         qui sum estimate if parameter == "well_to_r
> efinery_global"

.                                 local global_intensity = r(mean)

.                         qui sum estimate if parameter == "well_to_r
> efinery_US"

.                                 local US_intensity = r(mean)

. 
.                 local enviro_externality_difference = `global_inten
> sity' - `US_intensity'

.         
.                 
.         restore 

. 
.         *********************************
.         /* 5b. Calculate Pollution Externality per Barrel of Crude 
> */
.         *********************************
.         preserve

. 
.                 use "${gas_refinery_data}/upstream_emissions", clea
> r

.                         keep year refinery_yield_gal

.                 
.                 gen emissions_difference = (`enviro_externality_dif
> ference'*${MJ_conversion})/1000000

.                 // Converting from g/MJ to mt/barrel of crude oil. 
> Leave in per-barrel terms. 
.                 
.                         gen CH4_well_to_refinery = (emissions_diffe
> rence*0.34)/30

.                         // 34% of Masnadi et al. emissions are meth
> ane. 
.                         
.                         gen N2O_well_to_refinery = (emissions_diffe
> rence*0.005)/265

.                         // <1% of Masnadi et al. emissions are N2O 
> and VOC. Assuming half are N2O.
.                         // Don't need to do anything about VOC b/c 
> we use the method as them to value it globally. 
. 
.                         gen CO2_well_to_refinery = (emissions_diffe
> rence*0.655)

.                         // Remainder: CO2 (and VOC)
.                         
.                 gen well_to_refinery_check = CH4_well_to_refinery*3
> 0 + N2O_well_to_refinery*265 + CO2_well_to_refinery

.                         assert well_to_refinery_check == emissions_
> difference

.                         drop well_to_refinery_check

.                 
.                 keep if year == `dollar_year'
(32 observations deleted)

. 
.                 local upstream CO2 CH4 N2O

.                 
.                         local wtp_upstream_difference = 0

.                         
.                         foreach val of local upstream {
  2.                                 
.                                 local wtp_upstream_`val' = ///
>                                                         `val'_well_
> to_refinery*`social_cost_`val''
  3.                                                         
.                                 local wtp_upstream_difference = `wt
> p_upstream_difference' + `wtp_upstream_`val''
  4.                                 
.                         }

.                 
.         restore

.         
. *********************************
. /* 6. Intermediate Calculations */
. *********************************
. local semi_e_crude_tax = `e_supply_crude' / `tax_rate_crude'

.         assert `semi_e_crude_tax' <= 0

. 
. local wtp_soc_l = 0 // No local pollutants

. local wtp_soc_g = -`wtp_upstream_difference' * `semi_e_crude_tax'

.         assert `wtp_soc_g' <= 0

. 
. local wtp_producers = 1

. 
.         local total_wtp = `wtp_producers' + `wtp_soc_l' + (`wtp_soc
> _g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))

.         
. local program_cost = 1

.         assert `program_cost' == `wtp_producers'

. 
. local fiscal_externality_tax = `semi_e_crude_tax' * `tax_rate_crude
> '

.         assert `fiscal_externality_tax' <= 0 

.         assert round(`fiscal_externality_tax', 0.001) == round(`e_s
> upply_crude', 0.001)

.         // Elasticity of supply w.r.t. tax rate, so multiplying sem
> i by tax gives us back the elasticity.
.         
.         // Account for corporate profit taxes lost.
.         local fiscal_externality_tax = `fiscal_externality_tax' + (
> `tax_per_barrel' * `semi_e_crude_tax')

. 
. local fiscal_externality_lr = -`wtp_soc_g' * ${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}

.         assert `fiscal_externality_lr' >= 0

. 
. local total_cost = `program_cost' + `fiscal_externality_lr' + `fisc
> al_externality_tax'

. 
.         local MVPF = `total_wtp'/`total_cost'

.                 di in red `MVPF'
1.4514253

.                 
. *********************************
. /* 7. Output */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. 
. 
. local US_CO2_tons_prod = (`US_intensity'*${MJ_conversion})/1000000

. local carbon_content_barrel = 0.43 // Metric tons.

. 
.         local q_CO2_per_barrel = `US_CO2_tons_prod' + `carbon_conte
> nt_barrel'

. 
. global q_CO2_`1' = -`wtp_soc_g'/`social_cost_CO2'

. global q_CO2_no_`1' = -`wtp_soc_g'/`social_cost_CO2'

. global q_CO2_mck_`1' = `q_CO2_per_barrel'

. global q_CO2_mck_no_`1' = `q_CO2_per_barrel' 

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `program_cost'

. global p_spend_`1' = `program_cost' + `fiscal_externality_tax'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global fisc_ext_s_`1' = 0

. global fisc_ext_t_`1' = `fiscal_externality_tax'

. 
. global WTP_`1' = `total_wtp'

. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1'  = `wtp_soc_g' * (1 - (${USShareFutureSSC} * $
> {USShareGovtFutureSCC}))

. global wtp_prod_`1' = `wtp_producers'

. 
. global WTP_USPres_`1' = `wtp_producers'

. global WTP_USFut_`1'  = `wtp_soc_g'* (${USShareFutureSSC} - (${USSh
> areFutureSSC} * ${USShareGovtFutureSCC}))

. global WTP_RoW_`1'    = (1 - ${USShareFutureSSC})*`wtp_soc_g'

. 
. assert round((${WTP_USPres_`1'} + ${WTP_USFut_`1'} + ${WTP_RoW_`1'}
> )/`total_cost', 0.01) == round(`MVPF', 0.01)

. 
. 
. * Waterfall Components: 
. global wtp_comps_`1' wtp_prod wtp_soc_g wtp_soc_l WTP 

. global wtp_comps_`1'_commas "wtp_prod", "wtp_soc_g", "wtp_soc_l", "
> WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Transfer Cost"' 2 `"Global Damages"' 3 `"Local 
> Damages"' 4 `"Baseline WTP"' 6 `"Tax Benefit"' 7 `""Fiscal" "Extern
> ality," "Taxes""' 8 `""Fiscal" "Externality," "Subsidies""' 9 `""Fi
> scal" " Externality," "Long-run" "Revenue""' 10 `""Total" "Cost""'

. 
. global color_group1_`1' = 2

. global color_group2_`1' = 2

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000t.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000u.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000v.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bmm_crude_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bmm_crude_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bmm_crude_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bmm_crude_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for bmm_crude under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 11 of 100 (bolk_France)
Number of observations (_N) was 0, now 0.
bolk_France

. **************************************************
. /*       0. Program: FIT France              */
. **************************************************
. 
. /*
> An Econometric Analysis of Support Scheme Effects on Renewable Ener
> gy Investments in Europe
> Torjus Folsland Bolkesjø, Petter Thørring Eltviga, Erik Nygaarda
> https://www.sciencedirect.com/science/article/pii/S1876610214017688
> ?ref=pdf_download&fr=RR-2&rr=8954f25fdf5e8feb
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
.         *if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                                 
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
.         *}
. 
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. 
. if "`bootstrap'" == "no" {
.         preserve
.                 
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow          
. 
.                 levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"'
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -1.439348           .  -1.439348  -1.4393
> 48

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.         
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. *Getting the elasticity
. local epsilon = `e_demand'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0280 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("bolk_France") marg_sales(`marg_sales') cum_sales(`
> cum_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta(
> `farmer_theta') subsidy_max(`subsidy_max') current_ptc(`current_ptc
> ')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Bolk (France)"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000w.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000x.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000010.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_France_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_France_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_France_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_France_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for bolk_France under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 12 of 100 (bolk_Germany)
Number of observations (_N) was 0, now 0.
bolk_Germany

. **************************************************
. /*       0. Program: FIT Germany              */
. **************************************************
. 
. /*
> An Econometric Analysis of Support Scheme Effects on Renewable Ener
> gy Investments in Europe
> Torjus Folsland Bolkesjø, Petter Thørring Eltviga, Erik Nygaarda
> https://www.sciencedirect.com/science/article/pii/S1876610214017688
> ?ref=pdf_download&fr=RR-2&rr=8954f25fdf5e8feb
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -1.972847           .  -1.972847  -1.9728
> 47

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.                 local dollar_year = ${policy_year}
.         }

. if "`4'" == "current"{
.                 local dollar_year = ${current_year}
.         }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.                 
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. *Getting the elasticity
. local epsilon = `e_demand'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0280 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("bolk_Germany") marg_sales(`marg_sales') cum_sales(
> `cum_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta
> (`farmer_theta') subsidy_max(`subsidy_max') current_ptc(`current_pt
> c')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Bolk (Germany)"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000011.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000012.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000013.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Germany_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Germany_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Germany_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Germany_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for bolk_Germany under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 13 of 100 (bolk_Spain)
Number of observations (_N) was 0, now 0.
bolk_Spain

. **************************************************
. /*       0. Program: FIT Spain              */
. **************************************************
. 
. /*
> An Econometric Analysis of Support Scheme Effects on Renewable Ener
> gy Investments in Europe
> Torjus Folsland Bolkesjø, Petter Thørring Eltviga, Erik Nygaarda
> https://www.sciencedirect.com/science/article/pii/S1876610214017688
> ?ref=pdf_download&fr=RR-2&rr=8954f25fdf5e8feb
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -1.745576           .  -1.745576  -1.7455
> 76

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.         
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. *Getting the elasticity
. local epsilon = `e_demand'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0280 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("bolk_Spain") marg_sales(`marg_sales') cum_sales(`c
> um_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta(`
> farmer_theta') subsidy_max(`subsidy_max') current_ptc(`current_ptc'
> )
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Bolk (Spain)"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000014.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000015.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000016.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Spain_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Spain_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Spain_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_Spain_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for bolk_Spain under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 14 of 100 (bolk_UK)
Number of observations (_N) was 0, now 0.
bolk_UK

. **************************************************
. /*       0. Program: FIT UK              */
. **************************************************
. 
. /*
> An Econometric Analysis of Support Scheme Effects on Renewable Ener
> gy Investments in Europe
> Torjus Folsland Bolkesjø, Petter Thørring Eltviga, Erik Nygaarda
> https://www.sciencedirect.com/science/article/pii/S1876610214017688
> ?ref=pdf_download&fr=RR-2&rr=8954f25fdf5e8feb
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -.5970766           .  -.5970766  -.59707
> 66

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

. 
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022})

.                 local capacity_factor_context = 0.29

.         restore

.         
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742689 2020 or 93924 2
> 007, world numbers

. local marg_sales = 92490 / `average_size' // 92490 for 2020 or 2007
>  is 19967, world numbers

. 
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * `capacity_factor' * (1 - `capacity_reduction') * 1
> 000 * (`lifetime' - `credit_life'))

. 
. *Getting the elasticity
. local epsilon = `e_demand'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0280

. local ptc_discount_rate = 0.0280

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. 
. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. 
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("bolk_UK") marg_sales(`marg_sales') cum_sales(`cum_
> sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta(`far
> mer_theta') subsidy_max(`subsidy_max') current_ptc(`current_ptc')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Bolk (UK)"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000017.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000018.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000019.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_UK_current_estimates_0_replicat
    > ions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_UK_current_estimates_0_replicat
    > ions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_UK_current_unbounded_estimates_
    > 0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bolk_UK_current_unbounded_estimates_
    > 0_replications.dta saved
Finished running for bolk_UK under current
(3 vars, 5 obs)
spec_type    policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  description
1
Specification 1 of 1, program 15 of 100 (bunker_fuel)
Number of observations (_N) was 0, now 0.
bunker_fuel

. *************************************************************
. /* 1. Program: Bunker fuel taxes                                   
>                                       */
. *************************************************************
. /*
> Mundaca, Gabriela, Jon Strand, and Ian R. Young.
> "Carbon pricing of international transport fuels: Impacts on carbon
>  emissions and trade activity."
> Journal of Environmental Economics and Management 110 (October 2021
> ).
> */
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_bunker_fuel_high"' `"e_demand_bunker_fuel_low"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    -.416961           .   -.416961   -.4169
> 61

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    -.032229           .   -.032229   -.0322
> 29
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. local low_high_toggle                   low // Choose whether to us
> e low or high elasticity estimate.

. local value_local_bunker_fuel   no // Choose whether to value local
>  pollutants.

. 
. 
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         
.         local dollar_year = ${policy_year}
.         
. }

. if "`4'" == "current"{
.         
.         local dollar_year = ${today_year}
.         
. }

.         
.         
. * Social Costs. 
. local ghg CO2 CH4 N2O

. foreach g of local ghg {
  2.         
.         local social_cost_`g' = ${sc_`g'_`dollar_year'} * (${cpi_`d
> ollar_year'} / ${cpi_${sc_dollar_year}})
  3.                 
. }       

. 
. local md_u SO2 PM25 NOx VOC NH3 CO

. foreach p of local md_u  {
  2.         
.         local social_cost_`p'_uw = ${md_`p'_`dollar_year'_unweighte
> d} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year}})
  3.         
. }

. 
. *********************************
. /* 3. Calculate Emission Rates */
. *********************************
. preserve

. 
.         * Save upstream emissions and markup for later.
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.         qui sum pct_markup if year == `dollar_year'

.                 local pct_markup = r(mean)

.                 
.          
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Externalities/gasoline_vehicle_externalities_no_ethanol_${scc_i
> nd_name}_${dr_ind_name}.dta", clear               

.         keep if year == `dollar_year'   
(32 observations deleted)

. 
.         ds *upstream*
wtp_upst~CO2  wtp_upstr~CO  wtp_upstr~25  global_VOC~m  local_CO_u~m
wtp_upstre~4  wtp_upstre~3  wtp_upst~SO2  local_VOC_~m
wtp_upstr~2O  wtp_upstre~x  wtp_upstre~C  global_CO_~m

.         foreach var in `r(varlist)' {
  2.                 
.                 local name_ind = substr("`var'", 1, 3)
  3.                 if "`name_ind'" == "wtp" {
  4.                         
.                         local `var' = `var'
  5.                         
.                 }
  6.                 
.                 else {
  7.                         
.                         local name_ind = substr("`var'", 1, strlen(
> "`var'") - strlen("_upstream"))
  8.                                 local name_ind = substr("`name_i
> nd'", strpos("`name_ind'", "_") + 1, .) + "_" + substr("`name_ind'"
> , 1, strpos("`name_ind'", "_") - 1)
  9.                         
.                         local wtp_upstream_`name_ind' = `var'
 10.                                                 
.                 }
 11. 
.         }

. 
.         * Calculate Per-Gallon Emission Rates; All g/KWh to Start.
.         import excel "${policy_assumptions}", first clear sheet("ma
> rine_emissions")
(10 vars, 4 obs)

.                 gen kwh_per_gal = g_per_gal_heavy_fuel / g_per_kwh

. 
.                 ds *_KWh
NOx_KWh   PM25_KWh  CO_KWh    CO2_KWh   SO2_KWh   VOC_KWh

.                 foreach var in `r(varlist)' {
  2.                         
.                         replace `var' = (`var'/1000000) * kwh_per_g
> al
  3.                                 local p_name = substr("`var'", 1
> , strpos("`var'", "_") - 1)
  4. 
.                         if inlist("`p_name'", "NOx", "PM25", "SO2")
>  {
  5.                                 
.                                 gen wtp_`p_name' = `var' * `social_
> cost_`p_name'_uw'
  6.                                 
.                         } 
  7.                         
.                         if "`p_name'" == "CO2" {
  8.                                 
.                                 gen wtp_`p_name' = `var' * `social_
> cost_`p_name''
  9.                                 
.                         }
 10.                         
.                         if inlist("`p_name'", "VOC", "CO") {
 11.                                 
.                                 gen wtp_`p_name'_local = `var'*`soc
> ial_cost_`p_name'_uw'
 12.                                 gen wtp_`p_name'_global = `var'*
> (${`p_name'_gwp}*`social_cost_CO2')
 13.                                 
.                         }
 14.                         
.                 }
(4 real changes made)
(4 real changes made)
(4 real changes made)
(4 real changes made)
(4 real changes made)
(4 real changes made)

.         collapse (mean) wtp_* g_per_gal_heavy_fuel [aw = vessel_cou
> nt]

.                 order wtp_*

.                         
.         * Add Upstream Emissions.
.         ds wtp_*
wtp_NOx       wtp_CO_local  wtp_CO2       wtp_VOC_lo~l
wtp_PM25      wtp_CO_glo~l  wtp_SO2       wtp_VOC_gl~l

.         foreach var in `r(varlist)' {
  2.                 
.                 local p_name = substr("`var'", 5, .)
  3.                 replace `var' = `var' + `wtp_upstream_`p_name''
  4.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.         gen wtp_N2O = `wtp_upstream_N2O'

.         gen wtp_CH4 = `wtp_upstream_CH4'

.         gen wtp_NH3 = `wtp_upstream_NH3'

.         
.         di in red `wtp_upstream_CO2' + `wtp_upstream_CH4' + `wtp_up
> stream_N2O' + `wtp_upstream_NH3' + `wtp_upstream_NOx' + `wtp_upstre
> am_SO2' + `wtp_upstream_PM25' + `wtp_upstream_CO' + `wtp_upstream_V
> OC'
.2311338

.         
. 
.         if "`value_local_bunker_fuel'" == "no" {
. 
.                 replace wtp_CO_local = `wtp_upstream_CO_local'
(1 real change made)
.          
.                 replace wtp_NOx = `wtp_upstream_NOx'
(1 real change made)
.                 replace wtp_PM25 = `wtp_upstream_PM25'
(1 real change made)
.                 replace wtp_VOC_local = `wtp_upstream_VOC_local'
(1 real change made)
.                 
.                 replace wtp_SO2 = `wtp_upstream_SO2'
(1 real change made)
. 
.         }

. 
.         local soc_l = wtp_CO_local + wtp_VOC_local + wtp_NOx + wtp_
> PM25 + wtp_SO2 + wtp_NH3

.         local soc_g = wtp_CO_global + wtp_VOC_global + wtp_CO2 + wt
> p_CH4 + wtp_N2O

.                         
.         ds wtp*
wtp_NOx       wtp_CO_glo~l  wtp_VOC_lo~l  wtp_CH4
wtp_PM25      wtp_CO2       wtp_VOC_gl~l  wtp_NH3
wtp_CO_local  wtp_SO2       wtp_N2O

.         egen sum_check = rowtotal( `r(varlist)' )

.                 assert round(`soc_l' + `soc_g', 0.001) == round(sum
> _check, 0.001)

.                         drop sum_check  

.         order wtp_*             

.                 
. restore

.         
. ****************************************************
. /* 4. Calculate Components */
. ****************************************************
. preserve

.         import excel "${policy_assumptions}", first clear sheet("re
> sidual_fuel_prices")
(2 vars, 43 obs)

.                 keep if year == `dollar_year'
(42 observations deleted)

.                         local consumer_price = residual_fuel_price

. restore

. 
. local tax_rate = 0 // Heavy-fuel oil is not taxed when used by vess
> els that sail deep waters.

. 
. local semi_e_demand_bunker_tax = `e_demand_bunker_fuel_`low_high_to
> ggle''/(`consumer_price')

. 
. local wtp_soc_global = `soc_g' * `semi_e_demand_bunker_tax'

.                                         
. local wtp_soc_local = `soc_l' * `semi_e_demand_bunker_tax' 

. 
.         local wtp_soc = `wtp_soc_local' + `wtp_soc_global'

.                                 
. assert round(`wtp_soc', 0.01) == round(`wtp_soc_local' + `wtp_soc_g
> lobal', 0.01)

. 
.         
. local semi_e_producer_prices_tax = 0 // Assuming = 0.

. local wtp_consumers = 1 + (1 +`tax_rate')*`semi_e_producer_prices_t
> ax'

. 
. * Producers
. local fisc_ext_prod = (`consumer_price'*`pct_markup')*`semi_e_deman
> d_bunker_tax'*(${gasoline_effective_corp_tax})

. local wtp_producers = -(`consumer_price'*`pct_markup')*`semi_e_dema
> nd_bunker_tax'*(1 - ${gasoline_effective_corp_tax})

. 
. di in red `consumer_price'
1.143

. di in red `consumer_price'*`pct_markup'
.30988383

. di in red (`consumer_price'*`pct_markup'*0.21)/`consumer_price'
.05693404

. di in red ((`consumer_price'*`pct_markup'*0.21))*`semi_e_demand_bun
> ker_tax'
-.00183493

. di in red `fisc_ext_prod'
-.00183493

. 
. 
. if "${value_profits}" == "no" {
.         
.         local wtp_producers = 0 // Includes utilities and gas compa
> nies' profits. 
.         local fisc_ext_prod = 0
.         
. }

. 
. local total_WTP = `wtp_consumers' + (`wtp_soc_global'*(1 - (${USSha
> reFutureSSC} * ${USShareGovtFutureSCC}))) + `wtp_soc_local' + `wtp_
> producers'        

. 
. local WTP_USPres = `wtp_consumers' + `wtp_producers' + `wtp_soc_loc
> al' 

. local WTP_USFut = `wtp_soc_global' * (${USShareFutureSSC} - (${USSh
> areFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1-(${USShareFutureSSC})) * `wtp_soc_global' 

. 
. **************************
. /* 5. MVPF Calculations */
. **************************
. local program_cost = 1

.         local fiscal_externality_lr = -`wtp_soc_global' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

.         local fiscal_externality_tax = (`tax_rate' * `semi_e_demand
> _bunker_tax') + `fisc_ext_prod'

.         local fiscal_externality_subsidy = -0.000000000000001

. local p_spend = `program_cost' + `fiscal_externality_tax'

.         
. local total_cost = `program_cost' + `fiscal_externality_tax' + `fis
> cal_externality_subsidy' + `fiscal_externality_lr'

. 
. local MVPF = `total_WTP'/`total_cost'

. di in red "`MVPF'"
.9314424154878547

. 
.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`tota
> l_cost', 0.1) == round(`MVPF', 0.1)

. 
. global q_CO2_`1' = ((`wtp_soc_global')/${sc_CO2_`dollar_year'}) * -
> 1

. global q_CO2_no_`1' = ((`wtp_soc_global')/${sc_CO2_`dollar_year'}) 
> * -1

. global q_CO2_mck_`1' = ((`wtp_soc_global')/${sc_CO2_`dollar_year'})
> /`semi_e_demand_bunker_tax'

. global q_CO2_mck_no_`1' = ((`wtp_soc_global')/${sc_CO2_`dollar_year
> '})/`semi_e_demand_bunker_tax'

.         global resource_cost_`1' = `consumer_price'

. 
. 
. *********************************
. /* 6. Save Results and Waterfalls */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = `wtp_soc_local' + (`wtp_soc_global'*(1 - (${US
> ShareFutureSSC} * ${USShareGovtFutureSCC})))

.         global wtp_soc_l_`1' = `wtp_soc_local'

.         global wtp_soc_g_`1' = (`wtp_soc_global'*(1 - (${USShareFut
> ureSSC} * ${USShareGovtFutureSCC})))

.         
. global wtp_soc_rbd_`1' = -0.00000000000000000001

.         global wtp_soc_rbd_local_`1' = -0

.         global wtp_soc_rbd_global_`1' = -0

.                 
. global cost_wtp_`1' = -0

. global env_cost_wtp_`1' = -0    

. global env_cost_wtp_local_`1' = -0

. global env_cost_wtp_global_`1' = -0

.  
. global wtp_cons_`1' = `wtp_consumers'

. 
. global wtp_prod_`1' = `wtp_producers'

.         global wtp_prod_s_`1' = `wtp_producers'

.         global wtp_prod_u_`1' = 0

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == ///
>                 round(${wtp_cons_`1'} + ${wtp_prod_`1'} + ${wtp_soc
> _`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 0.0001) 

. 
. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fiscal_externality_tax'

. global fisc_ext_s_`1' = `fiscal_externality_subsidy'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l wtp_soc_rbd wtp_p
> rod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l", "
> wtp_soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `""Transfer" "Cost""' 2 `""Enviro." "Damages," "G
> lobal""' 3 `" "Enviro." "Damages," "Local" "' 4 `" "Enviro." "Damag
> es," "Rebound" "' 5 `""Gasoline" "Producers" "' 6 `""Total" "WTP""'
>  8 `""Program" "Cost""' 9 `"Taxes"' 10 `" "Subsidies" "' 11 `" "Cli
> mate" "F.E." "' 12 `""Gov't." "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 2

. global color_group3_`1' = 5

. global cost_color_start_`1' = 8

. global color_group4_`1' = 11

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001a.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001b.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001c.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bunker_fuel_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bunker_fuel_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bunker_fuel_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/bunker_fuel_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for bunker_fuel under current
(7 vars, 5 obs)
spec_type     emissions_~r  State         description
region        policy_year   ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  State         description
region        policy_year   ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  State         description
region        policy_year   ef_region
1
Specification 1 of 1, program 16 of 100 (c4a_cw)
Number of observations (_N) was 0, now 0.
c4a_cw

. *******************************************************************
> ******************
. /*       0. Program: Energy Efficient Appliance Rebate -- STAR Clot
> hes Washers        */
. *******************************************************************
> ******************
. 
. /*
> Houde, Sébastien, and Joseph E. Aldy. 
> "Consumers' response to state energy efficient appliance rebate pro
> grams." 
> American Economic Journal: Economic Policy 9, no. 4 (2017): 227-55.
> * https://www.aeaweb.org/articles?id=10.1257/pol.20140383
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4a_cw no uncorrected_v
> JK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals 
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow          
. 
.                 levelsof estimate, local(estimates)
`"kwh_reduction"'
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         201           .        201        2
> 01
.                                 
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

.         
. local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yrs - Foot
> note 10

. local marginal_valuation = ${val_given}

.         
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
. local avg_rebate = 107 // Table 2

. local shift_factor = 5

. local prop_inframarginal = 0.905

. local ce_0 = 0.02 // Cost effectiveness estimate assuming 0% infram
> arginals (Table A.10, Online Appendix)

. 
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_rebate = `avg_rebate' * (${cpi_`dollar_year'}/${cpi_2010}
> )

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. /* Back out total lifetime evergy reduction from Cost-effectiveness
>  ratios
> 
> * Authors compute the total amount of energy saved by taking the di
> fference in 
> * electricity consumption of an ES-rated appliance purchased in 201
> 0 and an 
> * appliance purchased 10 years before (in 2001). They sum this diff
> erence over 
> * five years. For the remaining 10 years of the appliance lifetime,
>  the average 
> * savings are simply the difference between a ES and non ES-rated a
> ppliance 
> * purchased in 2010. 
> 
> * Authors report ratio of rebate value and total lifetime reduction
> , but 
> * only report the reduction amount for years 6-10. Need to back out
>  1-5 from 
> * cost effectiveness = rebate amount/total lifetime reduction 
> *                                        = rebate amount/(reduction
>  years 0-5 x 5 + reduction years 6+ x 10)
> */
.  
. local kwh_reduction_yrs6plus = `kwh_reduction' // kwh/year

. local kwh_reduction_yrs0to5 = ((`adj_rebate' / `ce_0') - (`kwh_redu
> ction_yrs6plus' * 10)) / 5

. 
. local first5_loss = (1 - `prop_inframarginal') * `kwh_reduction_yrs
> 0to5'

. local 6plus_loss = (1 - `prop_inframarginal') * `kwh_reduction_yrs6
> plus'

. 
. local prop_marginal = 1 - `prop_inframarginal'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. 
. *Consumers
. local inframarginal = `prop_inframarginal' * `adj_rebate'

. local marginal = `adj_rebate' * `prop_marginal' * `marginal_valuati
> on'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings =  (`first5_loss' * ${kwh_price_`dollar_yea
> r'_${State}}) + ((`first5_loss' * ${kwh_price_`dollar_year'_${State
> }})/`discount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))) + /
> //
>         (`6plus_loss' * ${kwh_price_`dollar_year'_${State}}) + ((`6
> plus_loss' * ${kwh_price_`dollar_year'_${State}})/`discount') * (1 
> - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${kwh_price_`dollar_year'_${State}}) + ((`
> 6plus_loss' * ${kwh_price_`dollar_year'_${State}})/`discount') * (1
>  - (1/(1+`discount')^(`shift_factor' - 1))))
. }

. 
. *Producers
. local corporate_loss = ((`first5_loss' * ${producer_surplus_`dollar
> _year'_${State}}) + ((`first5_loss' * ${producer_surplus_`dollar_ye
> ar'_${State}})/`discount') * (1 - (1/(1+`discount')^(`shift_factor'
>  - 1))) + ///
>         (`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})
>  + ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})/`di
> scount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}}
> ) + ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})/`d
> iscount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))))) * `r'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. * Social Costs
. dynamic_grid `first5_loss', starting_year(`dollar_year') lifetime(`
> shift_factor') discount_rate(`discount') ef("`replacement'") type("
> uniform") geo("${State}") grid_specify("yes") model("${grid_model}"
> )

. local local_pollutants_1 = `r(local_enviro_ext)'

. local global_pollutants_1 = `r(global_enviro_ext)'

. local carbon = `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("unifo
> rm") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants_2 = `r(local_enviro_ext)'

. local global_pollutants_2 = `r(global_enviro_ext)'

. local carbon = `carbon' + `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(`dollar_year') lifetime(`s
> hift_factor') discount_rate(`discount') ef("`replacement'") type("u
> niform") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants_3 = `r(local_enviro_ext)'

. local global_pollutants_3 = `r(global_enviro_ext)'

. local carbon = `carbon' - `r(carbon_content)'

. 
. local local_pollutants = `local_pollutants_1' + (`local_pollutants_
> 2' - `local_pollutants_3')

. local global_pollutants = `global_pollutants_1' + (`global_pollutan
> ts_2' - `global_pollutants_3')

. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 -`r')

. local rebound_global = `global_pollutants' * (1 -`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate'

. 
. local fisc_ext_t = ((`first5_loss' * ${government_revenue_`dollar_y
> ear'_${State}}) + ((`first5_loss' * ${government_revenue_`dollar_ye
> ar'_${State}})/`discount') * (1 - (1/(1+`discount')^(`shift_factor'
>  - 1))) + ///
>         (`6plus_loss' * ${government_revenue_`dollar_year'_${State}
> }) + ((`6plus_loss' * ${government_revenue_`dollar_year'_${State}})
> /`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${government_revenue_`dollar_year'_${State
> }}) + ((`6plus_loss' * ${government_revenue_`dollar_year'_${State}}
> )/`discount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))))) * `
> r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. local first5_loss = `kwh_reduction_yrs0to5'

. local 6plus_loss = `kwh_reduction_yrs6plus'

. 
. local clothes_washer_energy_savings = (((`first5_loss' * `energy_co
> st') + ((`first5_loss' * `energy_cost') / `discount') * (1 - (1 / (
> 1 + `discount')^(`shift_factor' - 1)))) + ///
>                                                                    
> ((`6plus_loss' * `energy_cost') + ((`6plus_loss' * `energy_cost') /
>  `discount') * (1 - (1 / (1 + `discount')^(`lifetime' - 1)))) - ///
>                
>                                                                    
>         ((`6plus_loss' * `energy_cost') + ((`6plus_loss' * `energy_
> cost') / `discount') * (1 - (1 / (1 + `discount')^(`shift_factor' -
>  1)))))

. 
. di in red "energy savings are `clothes_washer_energy_savings'"
energy savings are 432.2529910577547

. 
. local clothes_washer_cost = 448.82

. 
. local resource_cost = `clothes_washer_cost' - `clothes_washer_energ
> y_savings'

. 
. * CO2
. dynamic_grid `first5_loss', starting_year(2020) lifetime(`shift_fac
> tor') discount_rate(`discount') ef("marginal") type("uniform") geo(
> "US") grid_specify("yes") model("midpoint")

. local carbon = `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(2020) lifetime(`lifetime')
>  discount_rate(`discount') ef("marginal") type("uniform") geo("US")
>  grid_specify("yes") model("midpoint")

. local carbon = `carbon' + `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(2020) lifetime(`shift_fact
> or') discount_rate(`discount') ef("marginal") type("uniform") geo("
> US") grid_specify("yes") model("midpoint")

. local carbon = `carbon' - `r(carbon_content)'

. 
. local q_carbon_mck = `carbon'

. di in red "carbon is `q_carbon_mck'"
carbon is 3.903364898243774

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is 4.244289061906367

. 
. local prop_marginal = 1 - `prop_inframarginal'

. local gov_carbon = `prop_marginal' * `q_carbon_mck'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "cost"

. global `1'_name "Clothes Washer Rebates - C4A"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global color_group4_`1' = 7

. global cost_color_start_`1' = 10

. global color_group5_`1' = 13

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.405106

. di `WTP'
180.66969

. di `total_cost'
128.58083

. di `wtp_society'
65.716718

. di `wtp_private'


. di `prop_inframarginal'
.905

. di `inframarginal'
114.93861

. di `marginal'
6.0326895

. 
. di `kwh_reduction_yrs0to5'
868.03989

. di `kwh_reduction_yrs6plus'
201

. di `carbon_reduction'


. di `fiscal_externality'


. di `program_cost'
127.00399

. di `corporate_loss'
4.9216693

. di `global_pollutants' + `local_pollutants'
81.723593

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001d.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001e.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001f.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_cw_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_cw_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_cw_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_cw_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for c4a_cw under current
(7 vars, 5 obs)
spec_type     emissions_~r  State         description
region        policy_year   ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  State         description
region        policy_year   ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  State         description
region        policy_year   ef_region
1
Specification 1 of 1, program 17 of 100 (c4a_dw)
Number of observations (_N) was 0, now 0.
c4a_dw

. *******************************************************************
> ******************
. /*       0. Program: Energy Efficient Appliance Rebate -- STAR Dish
> washers        */
. *******************************************************************
> ******************
. 
. /*
> Houde, Sébastien, and Joseph E. Aldy. 
> "Consumers' response to state energy efficient appliance rebate pro
> grams." 
> American Economic Journal: Economic Policy 9, no. 4 (2017): 227-55.
> * https://www.aeaweb.org/articles?id=10.1257/pol.20140383
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4a_dw no uncorrected_v
> JK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"kwh_reduction"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1          34           .         34         
> 34
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************    
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

. 
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve        

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

.         
. local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yrs - Foot
> note 10

. local marginal_valuation = ${val_given}

. 
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************    
. local avg_rebate = 84 // Table 2

. local shift_factor = 5

. local prop_inframarginal = 0.859

. local ce_0 = 0.07 // Cost effectiveness estimate assuming 0% infram
> arginals (Table A.10, Online Appendix)

.         
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_rebate = `avg_rebate' * (${cpi_`dollar_year'}/${cpi_2010}
> )

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. /* Back out total lifetime evergy reduction from Cost-effectiveness
>  ratios
> 
> * Authors compute the total amount of energy saved by taking the di
> fference in 
> * electricity consumption of an ES-rated appliance purchased in 201
> 0 and an 
> * appliance purchased 10 years before (in 2001). They sum this diff
> erence over 
> * five years. For the remaining 10 years of the appliance lifetime,
>  the average 
> * savings are simply the difference between a ES and non ES-rated a
> ppliance 
> * purchased in 2010. 
> 
> * Authors report ratio of rebate value and total lifetime reduction
> , but 
> * only report the reduction amount for years 6-15. Need to back out
>  1-5 from 
> * cost effectiveness = rebate amount/total lifetime reduction 
> *                                        = rebate amount/(reduction
>  years 0-5 x 5 + reduction years 6+ x 10)
>  */
.  
. local kwh_reduction_yrs6plus = `kwh_reduction' // kwh/year

. local kwh_reduction_yrs0to5 = ((`adj_rebate' / `ce_0') - (`kwh_redu
> ction_yrs6plus' * 10)) / 5

. 
. local first5_loss = (1 - `prop_inframarginal') * `kwh_reduction_yrs
> 0to5'

. local 6plus_loss = (1 - `prop_inframarginal') * `kwh_reduction_yrs6
> plus'

. 
. local prop_marginal = 1 - `prop_inframarginal'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. 
. *Consumers
. local inframarginal = `prop_inframarginal' * `adj_rebate'

. local marginal = `adj_rebate' * `prop_marginal' * `marginal_valuati
> on'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings =  (`first5_loss' * ${kwh_price_`dollar_yea
> r'_${State}}) + ((`first5_loss' * ${kwh_price_`dollar_year'_${State
> }})/`discount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))) + /
> //
>         (`6plus_loss' * ${kwh_price_`dollar_year'_${State}}) + ((`6
> plus_loss' * ${kwh_price_`dollar_year'_${State}})/`discount') * (1 
> - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${kwh_price_`dollar_year'_${State}}) + ((`
> 6plus_loss' * ${kwh_price_`dollar_year'_${State}})/`discount') * (1
>  - (1/(1+`discount')^(`shift_factor' - 1))))
. }

. 
. *Producers
. local corporate_loss = ((`first5_loss' * ${producer_surplus_`dollar
> _year'_${State}}) + ((`first5_loss' * ${producer_surplus_`dollar_ye
> ar'_${State}})/`discount') * (1 - (1/(1+`discount')^(`shift_factor'
>  - 1))) + ///
>         (`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})
>  + ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})/`di
> scount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}}
> ) + ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})/`d
> iscount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))))) * `r'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. * Social Costs
. dynamic_grid `first5_loss', starting_year(`dollar_year') lifetime(`
> shift_factor') discount_rate(`discount') ef("`replacement'") type("
> uniform") geo("${State}") grid_specify("yes") model("${grid_model}"
> )

. local local_pollutants_1 = `r(local_enviro_ext)'

. local global_pollutants_1 = `r(global_enviro_ext)'

. local carbon = `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("unifo
> rm") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants_2 = `r(local_enviro_ext)'

. local global_pollutants_2 = `r(global_enviro_ext)'

. local carbon = `carbon' + `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(`dollar_year') lifetime(`s
> hift_factor') discount_rate(`discount') ef("`replacement'") type("u
> niform") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants_3 = `r(local_enviro_ext)'

. local global_pollutants_3 = `r(global_enviro_ext)'

. local carbon = `carbon' - `r(carbon_content)'

. 
. local local_pollutants = `local_pollutants_1' + (`local_pollutants_
> 2' - `local_pollutants_3')

. local global_pollutants = `global_pollutants_1' + (`global_pollutan
> ts_2' - `global_pollutants_3')

. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 -`r')

. local rebound_global = `global_pollutants' * (1 -`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate'

. 
. local fisc_ext_t = ((`first5_loss' * ${government_revenue_`dollar_y
> ear'_${State}}) + ((`first5_loss' * ${government_revenue_`dollar_ye
> ar'_${State}})/`discount') * (1 - (1/(1+`discount')^(`shift_factor'
>  - 1))) + ///
>         (`6plus_loss' * ${government_revenue_`dollar_year'_${State}
> }) + ((`6plus_loss' * ${government_revenue_`dollar_year'_${State}})
> /`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${government_revenue_`dollar_year'_${State
> }}) + ((`6plus_loss' * ${government_revenue_`dollar_year'_${State}}
> )/`discount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))))) * `
> r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. local first5_loss = `kwh_reduction_yrs0to5'

. local 6plus_loss = `kwh_reduction_yrs6plus'

. 
. local dishwasher_energy_savings = (((`first5_loss' * `energy_cost')
>  + ((`first5_loss' * `energy_cost') / `discount') * (1 - (1 / (1 + 
> `discount')^(`shift_factor' - 1)))) + ///
>                                                                    
> ((`6plus_loss' * `energy_cost') + ((`6plus_loss' * `energy_cost') /
>  `discount') * (1 - (1 / (1 + `discount')^(`lifetime' - 1)))) - ///
>                                                                    
> ((`6plus_loss' * `energy_cost') + ((`6plus_loss' * `energy_cost') /
>  `discount') * (1 - (1 / (1 + `discount')^(`shift_factor' - 1)))))

. 
. di in red "energy savings are `dishwasher_energy_savings'"
energy savings are 98.03411736889612

. 
. local dishwasher_cost = 161.11772

. 
. local resource_cost = `dishwasher_cost' - `dishwasher_energy_saving
> s'

. 
. * CO2
. dynamic_grid `first5_loss', starting_year(2020) lifetime(`shift_fac
> tor') discount_rate(`discount') ef("marginal") type("uniform") geo(
> "US") grid_specify("yes") model("midpoint")

. local carbon = `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(2020) lifetime(`lifetime')
>  discount_rate(`discount') ef("marginal") type("uniform") geo("US")
>  grid_specify("yes") model("midpoint")

. local carbon = `carbon' + `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(2020) lifetime(`shift_fact
> or') discount_rate(`discount') ef("marginal") type("uniform") geo("
> US") grid_specify("yes") model("midpoint")

. local carbon = `carbon' - `r(carbon_content)'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local prop_marginal = 1 - `prop_inframarginal'

. local gov_carbon = `prop_marginal' * `q_carbon_mck'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "cost"

. global `1'_name "Dish Washer Rebates - C4A"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.1323858

. di `WTP'
113.49098

. di `total_cost'
100.22289

. di `wtp_society'
22.853879

. di `wtp_private'


. di `prop_inframarginal'
.859

. di `inframarginal'
85.645793

. di `marginal'
7.0291367

. 
. di `kwh_reduction_yrs0to5'
216.86876

. di `kwh_reduction_yrs6plus'
34

. di `carbon_reduction'


. di `fiscal_externality'


. di `program_cost'
99.704066

. di `corporate_loss'
1.6567126

. di `global_pollutants' + `local_pollutants'
28.420487

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001g.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001h.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001i.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_dw_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_dw_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_dw_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_dw_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for c4a_dw under current
(7 vars, 5 obs)
spec_type     emissions_~r  State         description
region        policy_year   ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  State         description
region        policy_year   ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  State         description
region        policy_year   ef_region
1
Specification 1 of 1, program 18 of 100 (c4a_fridge)
Number of observations (_N) was 0, now 0.
c4a_fridge

. *******************************************************************
> ******************
. /*       0. Program: Energy Efficient Appliance Rebate -- STAR Refr
> igerators        */
. *******************************************************************
> ******************
. 
. /*
> Houde, Sébastien, and Joseph E. Aldy. 
> "Consumers' response to state energy efficient appliance rebate pro
> grams." 
> American Economic Journal: Economic Policy 9, no. 4 (2017): 227-55.
> * https://www.aeaweb.org/articles?id=10.1257/pol.20140383
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4a_fridge no uncorrect
> ed_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals 
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"kwh_reduction"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1          65           .         65         
> 65
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************    
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
. }       

. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.                 
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

.                 
. local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yrs - Foot
> note 10

. local marginal_valuation = ${val_given}

. 
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
. local avg_rebate = 128 // Table 2

. local shift_factor = 5

. local prop_inframarginal = 0.920

. local ce_0 = 0.09 // Cost effectiveness estimate assuming 0% infram
> arginals (Table A.10, Online Appendix)

. 
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_rebate = `avg_rebate' * (${cpi_`dollar_year'}/${cpi_2010}
> )

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. /* Back out total lifetime evergy reduction from Cost-effectiveness
>  ratios
> 
> * Authors compute the total amount of energy saved by taking the di
> fference in 
> * electricity consumption of an ES-rated appliance purchased in 201
> 0 and an 
> * appliance purchased 10 years before (in 2001). They sum this diff
> erence over 
> * five years. For the remaining 10 years of the appliance lifetime,
>  the average 
> * savings are simply the difference between a ES and non ES-rated a
> ppliance 
> * purchased in 2010. 
> 
> * Authors report ratio of rebate value and total lifetime reduction
> , but 
> * only report the reduction amount for years 6-10. Need to back out
>  1-5 from 
> * cost effectiveness = rebate amount/total lifetime reduction 
> *                                        = rebate amount/(reduction
>  years 0-5 x 5 + reduction years 6+ x 10)
> */
. 
. local kwh_reduction_yrs6plus = `kwh_reduction' // kwh/year

. local kwh_reduction_yrs0to5 = ((`adj_rebate' / `ce_0') - (`kwh_redu
> ction_yrs6plus' * 10)) / 5

. 
. local first5_loss = (1 - `prop_inframarginal') * `kwh_reduction_yrs
> 0to5'

. local 6plus_loss = (1 - `prop_inframarginal') * `kwh_reduction_yrs6
> plus'

. 
. local prop_marginal = 1 - `prop_inframarginal'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. 
. *Consumers
. local inframarginal = `prop_inframarginal' * `adj_rebate'

. local marginal = `adj_rebate' * `prop_marginal' * `marginal_valuati
> on'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings =  (`first5_loss' * ${kwh_price_`dollar_yea
> r'_${State}}) + ((`first5_loss' * ${kwh_price_`dollar_year'_${State
> }})/`discount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))) + /
> //
>         (`6plus_loss' * ${kwh_price_`dollar_year'_${State}}) + ((`6
> plus_loss' * ${kwh_price_`dollar_year'_${State}})/`discount') * (1 
> - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${kwh_price_`dollar_year'_${State}}) + ((`
> 6plus_loss' * ${kwh_price_`dollar_year'_${State}})/`discount') * (1
>  - (1/(1+`discount')^(`shift_factor' - 1))))
. }

. 
. *Producers
. local corporate_loss =  ((`first5_loss' * ${producer_surplus_`dolla
> r_year'_${State}}) + ((`first5_loss' * ${producer_surplus_`dollar_y
> ear'_${State}})/`discount') * (1 - (1/(1+`discount')^(`shift_factor
> ' - 1))) + ///
>         (`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})
>  + ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})/`di
> scount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}}
> ) + ((`6plus_loss' * ${producer_surplus_`dollar_year'_${State}})/`d
> iscount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))))) * `r'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. * Social Costs
. dynamic_grid `first5_loss', starting_year(`dollar_year') lifetime(`
> shift_factor') discount_rate(`discount') ef("`replacement'") type("
> uniform") geo("${State}") grid_specify("yes") model("${grid_model}"
> )

. local local_pollutants_1 = `r(local_enviro_ext)'

. local global_pollutants_1 = `r(global_enviro_ext)'

. local carbon = `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("unifo
> rm") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants_2 = `r(local_enviro_ext)'

. local global_pollutants_2 = `r(global_enviro_ext)'

. local carbon = `carbon' + `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(`dollar_year') lifetime(`s
> hift_factor') discount_rate(`discount') ef("`replacement'") type("u
> niform") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants_3 = `r(local_enviro_ext)'

. local global_pollutants_3 = `r(global_enviro_ext)'

. local carbon = `carbon' - `r(carbon_content)'

. 
. local local_pollutants = `local_pollutants_1' + (`local_pollutants_
> 2' - `local_pollutants_3')

. local global_pollutants = `global_pollutants_1' + (`global_pollutan
> ts_2' - `global_pollutants_3')

. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 -`r')

. local rebound_global = `global_pollutants' * (1 -`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate'

. 
. local fisc_ext_t = ((`first5_loss' * ${government_revenue_`dollar_y
> ear'_${State}}) + ((`first5_loss' * ${government_revenue_`dollar_ye
> ar'_${State}})/`discount') * (1 - (1/(1+`discount')^(`shift_factor'
>  - 1))) + ///
>         (`6plus_loss' * ${government_revenue_`dollar_year'_${State}
> }) + ((`6plus_loss' * ${government_revenue_`dollar_year'_${State}})
> /`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) - ///
>         ((`6plus_loss' * ${government_revenue_`dollar_year'_${State
> }}) + ((`6plus_loss' * ${government_revenue_`dollar_year'_${State}}
> )/`discount') * (1 - (1/(1+`discount')^(`shift_factor' - 1))))) * `
> r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. local first5_loss = `kwh_reduction_yrs0to5'

. local 6plus_loss = `kwh_reduction_yrs6plus'

. 
. local fridge_energy_savings = (((`first5_loss' * `energy_cost') + (
> (`first5_loss' * `energy_cost') / `discount') * (1 - (1 / (1 + `dis
> count')^(`shift_factor' - 1)))) + ///
>                                                           ((`6plus_
> loss' * `energy_cost') + ((`6plus_loss' * `energy_cost') / `discoun
> t') * (1 - (1 / (1 + `discount')^(`lifetime' - 1)))) - ///
>                                                           ((`6plus_
> loss' * `energy_cost') + ((`6plus_loss' * `energy_cost') / `discoun
> t') * (1 - (1 / (1 + `discount')^(`shift_factor' - 1)))))

. 
. di in red "energy savings are `fridge_energy_savings'"
energy savings are 113.7811436117712

. 
. local fridge_cost = -184.13454 // difference betwen ES and non-ES f
> ridge prices

. 
. local resource_cost = `fridge_cost' - `fridge_energy_savings'

. 
. * CO2
. dynamic_grid `first5_loss', starting_year(2020) lifetime(`shift_fac
> tor') discount_rate(`discount') ef("marginal") type("uniform") geo(
> "US") grid_specify("yes") model("midpoint")

. local carbon = `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(2020) lifetime(`lifetime')
>  discount_rate(`discount') ef("marginal") type("uniform") geo("US")
>  grid_specify("yes") model("midpoint")

. local carbon = `carbon' + `r(carbon_content)'

. 
. dynamic_grid `6plus_loss', starting_year(2020) lifetime(`shift_fact
> or') discount_rate(`discount') ef("marginal") type("uniform") geo("
> US") grid_specify("yes") model("midpoint")

. local carbon = `carbon' - `r(carbon_content)'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local prop_marginal = 1 - `prop_inframarginal'

. local gov_carbon = `prop_marginal' * `q_carbon_mck'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_lr", "cost"

. global `1'_name "Fridge Rebates - C4A"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Taxes""' 12 `""FE" "Long-Run""' 13 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global color_group4_`1' = 7

. global cost_color_start_`1' = 10

. global color_group5_`1' = 12

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.0418461

. di `WTP'
158.65922

. di `total_cost'
152.28662

. di `wtp_society'
14.133392

. di `wtp_private'


. di `prop_inframarginal'
.92

. di `inframarginal'
139.77561

. di `marginal'
6.0772002

. 
. di `kwh_reduction_yrs0to5'
207.62224

. di `kwh_reduction_yrs6plus'
65

. di `carbon_reduction'


. di `fiscal_externality'


. di `program_cost'
151.93001

. di `corporate_loss'
1.0909657

. di `global_pollutants' + `local_pollutants'
17.575917

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001j.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001k.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001l.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_fridge_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_fridge_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_fridge_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4a_fridge_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for c4a_fridge under current
(4 vars, 5 obs)
spec_type     emissions_~r  policy_year   months_acc~d

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   months_acc~d
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   months_acc~d
1
Specification 1 of 1, program 19 of 100 (c4c_federal)
Number of observations (_N) was 0, now 0.
c4c_federal

. *******************************************************************
> ******************
. /*       0. Program: U.S. Cash-for-Clunkers program - Federal      
>    */
. *******************************************************************
> ******************
. 
. /*
> Li, Shanjun, Joshua Linn, and Elisheba Spiller. 
> Evaluating "Cash-for-Clunkers": Program effects on auto sales and t
> he environment. 
> Journal of Environmental Economics and management, 2013 65(2), 175-
> 193.
> * https://www.sciencedirect.com/science/article/pii/S00950696120006
> 78
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4c_federal no uncorrec
> ted_vJK current

. 
. *********************************
. /* 1. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"mpg_diff"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .21           .        .21        .
> 21
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Run .ado File. */
. *********************************
. local mpg_diff = `mpg_diff' / (678359/6270967)

. run_vehicle_retirement `dollar_year', mpg_improvement(`mpg_diff')
(4 vars, 5 obs)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_ma
> rginal"' `"retirement_age"'
(22 observations deleted)
Asserting Cost of Driving Falls due to the Higher MPG
Asserting VMT Increases with Higher Fuel-Economy Vehicle.
(32 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001q.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001q.tmp saved
    as .dta format
(2 vars, 24 obs)
(23 observations deleted)
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
emissions_~O  emissions_~C  emissions_~x
(2 real changes made)
(2 real changes made)
(3 real changes made)
(63 observations deleted)
(65 observations deleted)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_CH4
wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m  wtp_N2O
wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_CO2
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(2 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001r.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001r.tmp saved
    as .dta format
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
gallons_u~bd  local_rbd     gallons_rbd   savings_rbd
total_rbd     CO2_rbd       local_driv~d  rebound_vmt
global_rbd    profits_rbd   taxes_rbd
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 observation deleted)
(1 real change made)
wtp_SO2       global_VOC    wtp_N2O       wtp_upstre~x  global_CO_~m
wtp_CO2       wtp_PM25_e~t  wtp_upst~CO2  wtp_upstr~25  local_CO_u~m
local_CO      wtp_PM25_TBW  wtp_upstre~4  wtp_upst~SO2  wtp_accide~s
global_CO     wtp_NOx       wtp_upstr~2O  global_VOC~m  wtp_conges~n
local_VOC     wtp_CH4       wtp_upstre~3  local_VOC_~m
(1 real change made)
(null assertion)
(19 real changes made)
2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034
>  2035 2036 2037 2038 2039
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(18 observations deleted)
total_total   total_global  total_local   total_loca~g
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
total_total   total_local   total_prof~s  total_loca~g  total_savi~s
total_global  total_CO2     total_gall~s  total_taxes

. 
. ****************************************
. /* 4. Cost-Effectiveness Calculations */
. ****************************************
. local resource_cost = `r(resource_cost)'

. local q_carbon_mck = `r(q_carbon_mck)'

. local resource_ce = `resource_cost' / `q_carbon_mck'

. local gov_carbon = `q_carbon_mck'

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global total_cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. 
. global wtp_marg_`1' = `r(wtp_marg)' // Already scaled by prop. marg
> inal. 

. global wtp_inf_`1' = `r(wtp_inf)' // Already scaled by prop. margin
> al. 

. 
. global wtp_soc_`1' = `r(wtp_soc)'

. global wtp_glob_`1' = `r(wtp_soc_global)'

. global wtp_loc_`1' = `r(wtp_soc_local)'

. 
. global c_savings_`1' = `r(c_savings)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_lr_`1' =  `r(fisc_ext_lr)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. global q_CO2_`1' = `r(q_CO2)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod)'

. 
. global wtp_soc_rbd_`1' = `r(wtp_soc_rbd)'

.         global wtp_r_glob_`1' = `r(wtp_r_glob)'

.         global wtp_r_loc_`1' = `r(wtp_r_loc)'

.         
. assert round(${wtp_glob_`1'} + ${wtp_loc_`1'} + ${wtp_r_loc_`1'} + 
> ${wtp_r_glob_`1'}, 0.01) == round(${wtp_soc_`1'} + ${wtp_soc_rbd_`1
> '} , 0.01)

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_soc_g wtp_soc_l wtp_soc_r
> bd wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_soc_g", "wt
> p_soc_l", "wtp_soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_name "Cash for Clunkers (Federal)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marg."' 2 `"Infr."' 3 `""Env" "Global""' 4 `""E
> nv" "Local""' 5 `"Rebound"'  6 `""Gasoline" "Producers""'  7 `""Tot
> al" "WTP""' ///
>                 9 `""Program" "Cost""' 10 "Taxes" 11 "Subsidies" 12
>  `" "Climate" "FE" "' 13 `""Govt" "Cost""'

. 
. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001m.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001n.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001o.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_federal_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_federal_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_federal_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_federal_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for c4c_federal under current
(4 vars, 5 obs)
spec_type     emissions_~r  policy_year   months_acc~d

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   months_acc~d
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   months_acc~d
1
Specification 1 of 1, program 20 of 100 (c4c_texas)
Number of observations (_N) was 0, now 0.
c4c_texas

. *******************************************************************
> ******************
. /*       0. Program: U.S. Cash-for-Clunkers program - Texas        
>  */
. *******************************************************************
> ******************
. 
. /*
> Hoekstra, Mark, Steven L. Puller, and Jeremy West. 
> "Cash for Corollas: When stimulus reduces spending." 
> American Economic Journal: Applied Economics 9, no. 3 (2017): 1-35.
> * https://www.aeaweb.org/articles?id=10.1257/app.20150172
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4c_texas no uncorrecte
> d_vJK current

. 
. *********************************
. /* 1. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"mpg_diff"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .6578           .      .6578      .65
> 78
.         restore 
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. 
. *********************************
. /* 3. Run .ado File. */
. *********************************
. local mpg_diff = (`mpg_diff' / 0.2107)

. run_vehicle_retirement `dollar_year', mpg_improvement(`mpg_diff')
(4 vars, 5 obs)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_ma
> rginal"' `"retirement_age"'
(22 observations deleted)
Asserting Cost of Driving Falls due to the Higher MPG
Asserting VMT Increases with Higher Fuel-Economy Vehicle.
(32 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001t.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001t.tmp saved
    as .dta format
(2 vars, 24 obs)
(23 observations deleted)
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
emissions_~O  emissions_~C  emissions_~x
(2 real changes made)
(2 real changes made)
(3 real changes made)
(63 observations deleted)
(65 observations deleted)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_CH4
wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m  wtp_N2O
wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_CO2
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(2 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001u.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001u.tmp saved
    as .dta format
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
gallons_u~bd  local_rbd     gallons_rbd   savings_rbd
total_rbd     CO2_rbd       local_driv~d  rebound_vmt
global_rbd    profits_rbd   taxes_rbd
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 observation deleted)
(1 real change made)
wtp_SO2       global_VOC    wtp_N2O       wtp_upstre~x  global_CO_~m
wtp_CO2       wtp_PM25_e~t  wtp_upst~CO2  wtp_upstr~25  local_CO_u~m
local_CO      wtp_PM25_TBW  wtp_upstre~4  wtp_upst~SO2  wtp_accide~s
global_CO     wtp_NOx       wtp_upstr~2O  global_VOC~m  wtp_conges~n
local_VOC     wtp_CH4       wtp_upstre~3  local_VOC_~m
(1 real change made)
(null assertion)
(19 real changes made)
2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034
>  2035 2036 2037 2038 2039
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(18 observations deleted)
total_total   total_global  total_local   total_loca~g
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
total_total   total_local   total_prof~s  total_loca~g  total_savi~s
total_global  total_CO2     total_gall~s  total_taxes

. 
. ****************************************
. /* 4. Cost-Effectiveness Calculations */
. ****************************************
. local resource_cost = `r(resource_cost)'

. local q_carbon_mck = `r(q_carbon_mck)'

. local resource_ce = `resource_cost' / `q_carbon_mck'

. local gov_carbon = `q_carbon_mck'

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global total_cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. 
. global wtp_marg_`1' = `r(wtp_marg)' // Already scaled by prop. marg
> inal. 

. global wtp_inf_`1' = `r(wtp_inf)' // Already scaled by prop. margin
> al. 

. 
. global wtp_soc_`1' = `r(wtp_soc)'

. global wtp_glob_`1' = `r(wtp_soc_global)'

. global wtp_loc_`1' = `r(wtp_soc_local)'

. 
. global c_savings_`1' = `r(c_savings)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_lr_`1' =  `r(fisc_ext_lr)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. global q_CO2_`1' = `r(q_CO2)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod)'

. 
. global wtp_soc_rbd_`1' = `r(wtp_soc_rbd)'

.         global wtp_r_glob_`1' = `r(wtp_r_glob)'

.         global wtp_r_loc_`1' = `r(wtp_r_loc)'

. 
.         
. assert round(${wtp_glob_`1'} + ${wtp_loc_`1'} + ${wtp_r_loc_`1'} + 
> ${wtp_r_glob_`1'}, 0.01) == round(${wtp_soc_`1'} + ${wtp_soc_rbd_`1
> '} , 0.01)

.         
.         
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_soc_g wtp_soc_l wtp_soc_r
> bd wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_soc_g", "wt
> p_soc_l", "wtp_soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_name "Cash for Clunkers (Federal)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marg."' 2 `"Infr."' 3 `""Env" "Global""' 4 `""E
> nv" "Local""' 5 `"Rebound"'  6 `""Gasoline" "Producers""'  7 `""Tot
> al" "WTP""' ///
>                 9 `""Program" "Cost""' 10 "Taxes" 11 "Subsidies" 12
>  `" "Climate" "FE" "' 13 `""Govt" "Cost""'

. 
. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001p.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001q.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001r.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_texas_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_texas_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_texas_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/c4c_texas_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for c4c_texas under current
(3 vars, 5 obs)
spec_type    policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  description
1
Specification 1 of 1, program 21 of 100 (ca_cnt)
Number of observations (_N) was 0, now 0.
ca_cnt

. *************************************************************
. /* 0. Program: California Cap-and-Trade (Marginal Auction) */
. *************************************************************
. 
. /* Hernandez-Cortes and Meng (2023 JPubE):
> Do environmental markets cause environmental injustice?
> Evidence from California's carbon market */
. * DOI: 10.1016/j.jpubeco.2022.104786
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow
.                 levelsof estimate, local(estimates)
`"delta_CO2_q"' `"delta_NOx_q"' `"delta_PM25_q"' `"delta_SO2_q"'
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    -3200000           .   -3200000   -32000
> 00

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1     -519.94           .    -519.94    -519.
> 94

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      -97.89           .     -97.89     -97.
> 89

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -62.1           .      -62.1      -62
> .1
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 levelsof estimate, local(estimates)
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. local share_leaked = 0

. 
. if "${toggle_firm_assumption}" == "" {
.         
.         global other_firm_assumption    no_abate // Either "abate" 
> or "no_abate"
.         
. }

. if "${toggle_firm_assumption}" == "yes" {
.         
.         global other_firm_assumption    abate // Either "abate" or 
> "no_abate"
.         
. }

. 
. ****************************************************
. /* 1. Calculate Quantity Changes */
. ****************************************************
. local pollutants_abated_ca_ct                   CO2 SO2 NOx PM25 //
>  Ignoring PM10 b/c no MD estimate from AP3. 

. foreach p of local pollutants_abated_ca_ct {
  2.         
.         if "`p'" != "CO2" {
  3.                 
.                 local delta_`p'_q_dCO2 = (`delta_`p'_q'/`delta_CO2_
> q') 
  4.                 // Carbon is priced; SO2, NOx, and PM25 are unpr
> iced co-benefits.
. 
.         }
  5. 
. }

. 
. ****************************************************
. /* 2. Calculate Price Changes */
. ****************************************************
. preserve

. 
.         import excel "${policy_assumptions}", first clear sheet("CA
> _C&T_data")
(4 vars, 45 obs)

.         gen year = substr(quarter_year, -4, .)

.         destring year, replace
year: all characters numeric; replaced as int

.                 
.         levelsof(year), local(year_loop)
2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 qui sum annual_allowances_CA if year == `y'
  3.                         replace annual_allowances_CA = r(mean) i
> f year == `y'
  4.                 
.         }
(0 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)
(3 real changes made)

.                 
.         collapse (mean) settlement_p annual_allowances_CA [aw = all
> owances_sold], by(year)      

.                 
.         * Generate Locals Needed in Calculations.
.         egen q = total(annual_allowances_CA) if inrange(year, 2012,
>  ${policy_year})
(6 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                 
.         gen real_clearing_price = .
(12 missing values generated)

.         levelsof(year), local(year_loop)
2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_clearing_price = settlement_p * (${cpi
> _`dollar_year'}/${cpi_`y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.         qui sum real_clearing_price [aw = annual_allowances_CA] if 
> inrange(year, 2012, ${policy_year}) 

.                 local baseline_price = r(mean)

. 
.                                 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_clearing_price if year == `dollar_year
> ' 
.                         local permit_price = r(mean)
.                 
.         }       

.         
.         
.         if "${other_firm_assumption}" == "no_abate" { // Default as
> sumption.
.                 local semie = (`baseline_price' / `delta_CO2_q') * 
> `permit_q'
.         }

.         
.         if "${other_firm_assumption}" == "abate" {
.                 local semie = (`baseline_price' / (`delta_CO2_q'*20
> )) * `permit_q' // Only have ~5% of emissions; only for robustness!
.         } 

. 
. 
. ****************************************************
. /* 3. Cost Calculations */
. ****************************************************
. // GOING TO SHORT TONS TO BE CONSISTENT WITH PAPER AND PERMIT QUANT
> ITY
. gen sc_NOx = (${md_NOx_`dollar_year'_unweighted} * (${cpi_`dollar_y
> ear'} / ${cpi_${md_dollar_year}}))

.         local social_cost_NOx_uw = sc_NOx

. gen sc_SO2 = (${md_SO2_`dollar_year'_unweighted} * (${cpi_`dollar_y
> ear'} / ${cpi_${md_dollar_year}}))

.         local social_cost_SO2_uw = sc_SO2

. gen sc_PM25 = (${md_SO2_`dollar_year'_unweighted} * (${cpi_`dollar_
> year'} / ${cpi_${md_dollar_year}}))

.         local social_cost_PM25_uw = sc_SO2      

.         
. gen sc_CO2 = .
(12 missing values generated)

. foreach y of local year_loop {
  2.         
.         replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / $
> {cpi_${sc_dollar_year}})) if year == `y'
  3.         // Constant dollars, varying social cost of carbon.
.         
. }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
. if "${spec_type}" == "baseline" {
.         
.         qui sum sc_CO2 [aw = annual_allowances_CA] if inrange(year,
>  2012, ${policy_year}) 
.                 local social_cost_CO2 = r(mean)
.         
. }

. 
. if "${spec_type}" == "current" {
.         
.         qui sum sc_CO2 [aw = annual_allowances_CA] if year == `doll
> ar_year'
.                 local social_cost_CO2 = r(mean)
.         
. }

. 
. restore

. 
. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality_permit = -`permit_price'
.         
. }

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_auctioned = -`semie'
.         local wtp_permits = `wtp_permits_auctioned'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_abated_ca_ct {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 else {
  6.                         local wtp_`p' = -`social_cost_`p'_uw' * 
> `delta_`p'_q_dCO2'
  7.                 }
  8. 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  9.         
.         }
.         
.         local wtp_soc_l = `wtp_PM25' + `wtp_SO2' + `wtp_NOx'
.         local wtp_soc_g = `wtp_CO2'
. 
.         local total_WTP = `wtp_producers' + ///
>                                           ((`wtp_soc_g' * (1 - (${U
> SShareFutureSSC} * ${USShareGovtFutureSCC}))) + `wtp_soc_l')*(1 - `
> share_leaked')
. 
. }

. 
. local WTP_USPres = `wtp_producers' + (`wtp_soc_l'*(1 - `share_leake
> d'))

. local WTP_USFut = (`wtp_soc_g') * (${USShareFutureSSC} - (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})) * (1- `share_leaked')

. local WTP_RoW = (`wtp_soc_g') * (1 - ${USShareFutureSSC}) * (1- `sh
> are_leaked') 

. 
. ****************************************************
. /* 7. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}) * -1

. // assert `fiscal_externality_lr' >= 0 
. 
. local total_cost = `permit_revenue' + `fiscal_externality_permit' +
>  `fiscal_externality_lr'

.         
. local MVPF = `total_WTP'/`total_cost' // finite MVPF

. 
. ****************************************************
. /* 8. Save Results and Waterfall Components */
. ****************************************************
. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `total_WTP'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global program_cost_`1' = `permit_revenue'

.         
. global wtp_soc_`1' = ((`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${
> USShareGovtFutureSCC}))) + `wtp_soc_l')*(1-`share_leaked')

. global wtp_soc_l_`1' = `wtp_soc_l' * (1-`share_leaked')

. global wtp_soc_g_`1'  = `wtp_soc_g' * (1 - (${USShareFutureSSC} * $
> {USShareGovtFutureSCC})) * (1 -`share_leaked')

.         
.                 
. global wtp_no_leak_`1' = ${wtp_soc_`1'}/(1 - `share_leaked')

.         
. global wtp_leak_`1' = ${wtp_soc_`1'} - (${wtp_soc_`1'}/(1 - `share_
> leaked'))

. 
. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality_permit'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global permit_price_`1' = `permit_price'

. 
. if "${toggle_firm_assumption}" == "yes" {
.         
.         macro drop toggle_firm_assumption
.         
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
(1 real change made)
wtp_abatement
(1 real change made)
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
(1 real change made)
wtp_leak
(1 real change made)
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001s.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001t.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001u.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_cnt_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_cnt_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_cnt_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_cnt_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for ca_cnt under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   ef_region     State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   ef_region     State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   ef_region     State
1
Specification 1 of 1, program 22 of 100 (ca_electric)
Number of observations (_N) was 0, now 0.
ca_electric

. *******************************************************************
> ******************
. /*       0. Program:  California's electricity rebate program      
>       */
. *******************************************************************
> ******************
. 
. /*
> Ito, Koichiro. 
> "Asymmetric incentives in subsidies: Evidence from a large-scale el
> ectricity rebate program." 
> American Economic Journal: Economic Policy 7, no. 3 (2015): 209-37.
> * https://www.aeaweb.org/articles?id=10.1257/pol.20130397
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ca_electric no uncorrec
> ted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"LATE_coastal"' `"LATE_inland"' `"LATE_inland_06"' `"LATE_inland_07"
> ' `"LATE_inland_08"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      -.0012           .     -.0012     -.00
> 12

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.042           .      -.042      -.0
> 42

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.04           .       -.04       -.
> 04

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.048           .      -.048      -.0
> 48

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.043           .      -.043      -.0
> 43
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }       

. restore

. 
.         local marginal_valuation = ${val_given}

.         
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
. ** Cost assumptions
. local rebate_cost_coastal = 9358919 // (Table 8 row 3)

. local rebate_cost_inland = 1250621 // (Table 8 row 3)

. local rebate_cost = `rebate_cost_coastal' + `rebate_cost_inland'

. local indirect_cost = 4000000 // SCE spent ~$4M to administer and a
> dvertise program (Wirtshafter Associates 2006)

. * energy consumption 2005 (Kwh)
. 
. local consump_coastal_base      = 8247457920 * (1 + (1 - exp(`LATE_
> coastal')))

. local consump_inland_base       = 1154292248 * (1 + (1 - exp(`LATE_
> inland')))

. 
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_indirect = `indirect_cost' * (${cpi_`dollar_year'}/${cpi_
> ${policy_year}})

. local adj_rebate = `rebate_cost' * (${cpi_`dollar_year'}/${cpi_${po
> licy_year}})

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. ** Energy reductions (Kwh)
. local energy_reduction_coastal = `consump_coastal_base'* (1 - exp(`
> LATE_coastal'))

. local energy_reduction_inland = `consump_inland_base'* (1 - exp(`LA
> TE_inland'))

. 
. local kwh_reduction_today = `energy_reduction_coastal' + `energy_re
> duction_inland'

. local kwh_reduction_06 = `consump_inland_base'* (1 - exp(`LATE_inla
> nd_06'))

. local kwh_reduction_07 = `consump_inland_base'* (1 - exp(`LATE_inla
> nd_07'))

. local kwh_reduction_08 = `consump_inland_base'* (1 - exp(`LATE_inla
> nd_08'))

. 
. local prop_inframarginal = 9358919 / (9358919 + 1250621) // We need
>  the marginal inframarginal split to value the rebate. This number 
> is difficult to estimate w/ the information provided in the paper. 
> Since the coastal group saw no decline in consumption, we assume ev
> eryone is inframarginal and we assume everyone in the inland group 
> is marginal. We take the ratio of costs in Table 8 to estimate the 
> inframarginal share 

. 
. local prop_marginal = 1 - `prop_inframarginal'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = `prop_inframarginal' * `adj_rebate'

. local marginal = 0 // Marginal people do not value the rebate at th
> e margin since they already get energy savings

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings = ((${kwh_price_`dollar_year'_${State}} * `
> kwh_reduction_today') + /// 
>                                           ((${kwh_price_`dollar_yea
> r'_${State}} * `kwh_reduction_06')/(1+`discount')) + ///
>                                           ((${kwh_price_`dollar_yea
> r'_${State}} * `kwh_reduction_07')/(1+`discount')^2) + ///
>                                           ((${kwh_price_`dollar_yea
> r'_${State}} * `kwh_reduction_08')/(1+`discount')^3))
. }

. 
. *Producers
. local corporate_loss = ((${producer_surplus_`dollar_year'_${State}}
>  * `kwh_reduction_today') + ((${producer_surplus_`dollar_year'_${St
> ate}} * `kwh_reduction_06')/(1+`discount')) + ((${producer_surplus_
> `dollar_year'_${State}} * `kwh_reduction_07')/(1+`discount')^2) + (
> (${producer_surplus_`dollar_year'_${State}} * `kwh_reduction_08')/(
> 1+`discount')^3)) * `r'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. local c_savings = 0

. if "${value_savings}" == "yes" {
.         local c_savings = ((${kwh_price_`dollar_year'_${State}} * `
> kwh_reduction_today') + ((${kwh_price_`dollar_year'_${State}} * `kw
> h_reduction_06')/(1+`discount')) + ((${kwh_price_`dollar_year'_${St
> ate}} * `kwh_reduction_07')/(1+`discount')^2) + ((${kwh_price_`doll
> ar_year'_${State}} * `kwh_reduction_08')/(1+`discount')^3))
. }

. 
. * Social Costs
. local end_year = `dollar_year' + 3

. local kwh_reduction = `kwh_reduction_today'

. local i = 1

. local local_pollutants = 0

. local global_pollutants = 0

. local carbon = 0

. forvalues y = `dollar_year'(1)`end_year'{
  2.         
.         dynamic_split_grid `kwh_reduction', starting_year(`dollar_y
> ear') ext_year(`y') discount_rate(`discount') ef("`replacement'") t
> ype("uniform") geo("${State}") grid_specify("yes") model("${grid_mo
> del}")
  3.         local local_pollutants = `local_pollutants' + `r(local_e
> nviro_ext)'
  4.         local global_pollutants = `global_pollutants' + `r(globa
> l_enviro_ext)'
  5.         local carbon = `carbon' + `r(carbon_content)'
  6.         local i = `i' + 1
  7.         
.         if `i' == 2 {
  8.                 local kwh_reduction = `kwh_reduction_06'
  9.         }
 10.         
.         if `i' == 3 {
 11.                 local kwh_reduction = `kwh_reduction_07'
 12.         }
 13.         
.         if `i' == 4 {
 14.                 local kwh_reduction = `kwh_reduction_08'
 15.         }
 16. }

. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 -`r')

. local rebound_global = `global_pollutants' * (1 -`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate' + `adj_indirect'

. 
. local program_cost_no_ind = `adj_rebate'

. 
. local fisc_ext_t = ((${government_revenue_`dollar_year'_${State}} *
>  `kwh_reduction_today') + ((${government_revenue_`dollar_year'_${St
> ate}} * `kwh_reduction_06')/(1+`discount')) + ((${government_revenu
> e_`dollar_year'_${State}} * `kwh_reduction_07')/(1+`discount')^2) +
>  ((${government_revenue_`dollar_year'_${State}} * `kwh_reduction_08
> ')/(1+`discount')^3)) * `r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. local total_cost_no_ind = `program_cost_no_ind' + `fisc_ext_s' + `f
> isc_ext_t' + `fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. local MVPF_no_ind = `WTP' / `total_cost_no_ind'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. local ca_electric_savings = ((`energy_cost' * `kwh_reduction_today'
> ) + ///
>                                                         ((`energy_c
> ost' * `kwh_reduction_06') / (1 + `discount')) + ///
>                                                         ((`energy_c
> ost' * `kwh_reduction_07') / (1 + `discount')^2) + ///
>                                                         ((`energy_c
> ost' * `kwh_reduction_08') / (1+`discount')^3))

. 
. local ca_electric_savings = -abs(`ca_electric_savings')

. 
. local resource_cost = `ca_electric_savings'

. di in red "electricity savings are `ca_electric_savings'"
electricity savings are -15342194.95448595

. local q_carbon_mck = `q_carbon' / `r'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF_no_ind'

. global cost_`1' = `total_cost_no_ind'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost_no_ind'

. global wtp_soc_`1' = `wtp_society'

. global prop_infra_`1' = `prop_inframarginal'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global c_savings_`1' = `c_savings' 

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global total_cost_`1' = `total_cost_no_ind'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global admin_cost_`1' = `adj_indirect'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "CA Electricity Rebates"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.887178

. di `WTP'
37561864

. di `total_cost'
19903720

. di `wtp_society'
27456048

. di `inframarginal'
12406186

. di `marginal'
0

. 
. di `CE'


. 
. di `carbon_cost'


. di `pollutant_cost'


. di `fiscal_externality'


. di `program_cost'
19366411

. di `corporate_loss'
1838816.2

. di `global_pollutants' + `local_pollutants'
34143623

. di in red (`inframarginal' + `marginal')/`program_cost_no_ind'
.88212298

. di in red `dollar_year'
2020

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001v.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001w.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00001x.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_electric_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_electric_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_electric_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ca_electric_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for ca_electric under current
(3 vars, 5 obs)
spec_type    policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  description
1
Specification 1 of 1, program 23 of 100 (cafe_as)
Number of observations (_N) was 0, now 0.
cafe_as

. *************************************************************
. /* 0. Program: CAFE                        */
. *************************************************************
. /*
> Anderson, Soren T. and James M. Sallee
> "Using Loopholes to Reveal the Marginal Cost of Regulation: The Cas
> e of Fuel-Economy Standards."
> American Economic Review 101 (June 2011): 1375--1409.
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"producers"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          0
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local dollar_year = ${today_year}

. global policy_year = ${today_year}

. local mpg_diff = 1 // A 1 MPG tightening of CAFE standards.

. 
. local compliance_cost                   ((13.25*0.439463) + (17.125
> *0.560537)) * (${cpi_2020}/${cpi_2011})

. // Weighting average car and truck compliance cost by 2020 producti
> on shares.
. 
. // For running vehicle retirement .ado file.
. global months_accelerated               0

. global retirement_cf                    new_avg

. global normalize_env                yes

. 
. *****************************
. /* 2. Intermediate Calculations */
. *****************************
. run_vehicle_retirement `dollar_year', mpg_improvement(`mpg_diff')
(4 vars, 5 obs)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_ma
> rginal"' `"retirement_age"'
(22 observations deleted)
Asserting Cost of Driving Falls due to the Higher MPG
Asserting VMT Increases with Higher Fuel-Economy Vehicle.
(32 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000024.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000024.tmp saved
    as .dta format
(2 vars, 24 obs)
(23 observations deleted)
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
emissions_~O  emissions_~C  emissions_~x
(2 real changes made)
(2 real changes made)
(3 real changes made)
(63 observations deleted)
(65 observations deleted)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_CH4
wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m  wtp_N2O
wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_CO2
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000025.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000025.tmp saved
    as .dta format
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
gallons_u~bd  local_rbd     gallons_rbd   savings_rbd
total_rbd     CO2_rbd       local_driv~d  rebound_vmt
global_rbd    profits_rbd   taxes_rbd
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 observation deleted)
(1 real change made)
wtp_SO2       global_VOC    wtp_N2O       wtp_upstre~x  global_CO_~m
wtp_CO2       wtp_PM25_e~t  wtp_upst~CO2  wtp_upstr~25  local_CO_u~m
local_CO      wtp_PM25_TBW  wtp_upstre~4  wtp_upst~SO2  wtp_accide~s
global_CO     wtp_NOx       wtp_upstr~2O  global_VOC~m  wtp_conges~n
local_VOC     wtp_CH4       wtp_upstre~3  local_VOC_~m
(null assertion)
2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033
>  2034 2035 2036 2037 2038
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(18 observations deleted)
total_total   total_global  total_local   total_loca~g
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
total_total   total_local   total_prof~s  total_loca~g  total_savi~s
total_global  total_CO2     total_gall~s  total_taxes

. 
. 
. 
. 
. *****************************
. /* 3. WTP Saves*/
. *****************************
. local producer_surplus = (`r(wtp_prod)') // Assuming all compliance
>  costs passed onto consumers; gasoline profits not passed on, howev
> er. Rebound included.

. 
. local consumer_surplus = (-`compliance_cost') 

.         assert `consumer_surplus' <= 0 

.         
. local soc_local = `r(wtp_soc_local)' + `r(wtp_r_loc)' 

. local soc_global = `r(wtp_soc_global)' + `r(wtp_r_glob)'

. 
. 
. if "${normalize_env}" == "yes" {
.         local normalize = `soc_local' + `soc_global'
. }

. if "${normalize_env}" != "yes" {
.         local normalize = 1
. }

.         
. local wtp_total = `producer_surplus' + `consumer_surplus' + `soc_lo
> cal' + `soc_global'

. 
. *****************************
. /* 3. Waterfalls */
. *****************************
. /* Since looking at a regulation, we do not have costs --> Skip MVP
> F calculation and simply show the 
>    breakdown b/w producers WTP to abate pollutant, p, and society's
>  WTP for this ton of pollution. */
.    
. global wtp_prod_`1' = (`producer_surplus')/abs(`normalize')

. global wtp_cons_`1' = (`consumer_surplus')/abs(`normalize')

. 
. 
. global wtp_soc_l_`1' = `soc_local'/abs(`normalize')

. global wtp_soc_g_`1' = `soc_global'/abs(`normalize')

. global wtp_soc_`1' = ${wtp_soc_g_`1'} + ${wtp_soc_l_`1'}

. 
. global WTP_`1' = ${wtp_prod_`1'} + ${wtp_soc_`1'} + ${wtp_cons_`1'}

.    
. global program_cost_`1' = 0

. global fisc_ext_t_`1' =  `r(fisc_ext_t)' /abs(`normalize')

. global fisc_ext_s_`1' = 0

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'/abs(`normalize')

. global cost_`1' = ${program_cost_`1'} + ${fisc_ext_t_`1'} + ${fisc_
> ext_s_`1'} + ${fisc_ext_lr_`1'}

. 
. 
. 
. local phi = 0.5

. 
. 
. global CAFE_sc_`1' = ( ${fisc_ext_t_`1'} + ${fisc_ext_lr_`1'} - ${w
> tp_prod_`1'} - ${wtp_cons_`1'} + (`phi'*(${fisc_ext_t_`1'} + ${fisc
> _ext_lr_`1'}))) / ///
>                                                  ((${wtp_soc_g_`1'}
> ) / (193 * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. 
. di in red ${CAFE_sc_`1'}
124.84416

. 
. 
. 
.                                 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
WTP_USFut
(1 real change made)
WTP_RoW
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(0 real changes made)
(0 real changes made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000020.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000021.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000022.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_as_current_estimates_0_replicat
    > ions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_as_current_estimates_0_replicat
    > ions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_as_current_unbounded_estimates_
    > 0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_as_current_unbounded_estimates_
    > 0_replications.dta saved
Finished running for cafe_as under current
(3 vars, 5 obs)
spec_type    policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  description
1
Specification 1 of 1, program 24 of 100 (cafe_dk)
Number of observations (_N) was 0, now 0.
cafe_dk

. *************************************************************
. /* 0. Program: CAFE                        */
. *************************************************************
. /*
> 
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"elasticity"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          0
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local dollar_year = ${today_year}

. global policy_year = ${today_year}

. local mpg_diff = 1 // A 1 MPG tightening of CAFE standards.

. 
. local permit_price                              89.66666666666667 /
> / 2014 dollars

. 
. // For running vehicle retirement .ado file.
. global months_accelerated               0

. global retirement_cf                    new_avg

. global normalize_env                yes

. 
. *****************************
. /* 2. Intermediate Calculations */
. *****************************
. preserve

. 
.         use "${user_specific_assumptions}/files_v${user_name}/Vehic
> le Lifetime Damages/vmt_dist_avg.dta", clear

.         drop if age > 17
(16 observations deleted)

.                 egen total_vmt_harmonized = total(fleet_avg_vmt)

.                         local harmonized_vmt = total_vmt_harmonized

.                         
. restore

. 
. run_vehicle_retirement `dollar_year', mpg_improvement(`mpg_diff')
(4 vars, 5 obs)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_ma
> rginal"' `"retirement_age"'
(22 observations deleted)
Asserting Cost of Driving Falls due to the Higher MPG
Asserting VMT Increases with Higher Fuel-Economy Vehicle.
(32 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000028.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000028.tmp saved
    as .dta format
(2 vars, 24 obs)
(23 observations deleted)
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
emissions_~O  emissions_~C  emissions_~x
(2 real changes made)
(2 real changes made)
(3 real changes made)
(63 observations deleted)
(65 observations deleted)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_CH4
wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m  wtp_N2O
wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_CO2
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000029.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000029.tmp saved
    as .dta format
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
gallons_u~bd  local_rbd     gallons_rbd   savings_rbd
total_rbd     CO2_rbd       local_driv~d  rebound_vmt
global_rbd    profits_rbd   taxes_rbd
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 observation deleted)
(1 real change made)
wtp_SO2       global_VOC    wtp_N2O       wtp_upstre~x  global_CO_~m
wtp_CO2       wtp_PM25_e~t  wtp_upst~CO2  wtp_upstr~25  local_CO_u~m
local_CO      wtp_PM25_TBW  wtp_upstre~4  wtp_upst~SO2  wtp_accide~s
global_CO     wtp_NOx       wtp_upstr~2O  global_VOC~m  wtp_conges~n
local_VOC     wtp_CH4       wtp_upstre~3  local_VOC_~m
(null assertion)
2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033
>  2034 2035 2036 2037 2038
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(18 observations deleted)
total_total   total_global  total_local   total_loca~g
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
total_total   total_local   total_prof~s  total_loca~g  total_savi~s
total_global  total_CO2     total_gall~s  total_taxes

. 
. *****************************
. /* 3. WTP Saves*/
. *****************************
. local producer_surplus = (`r(wtp_prod)') // Assuming all compliance
>  costs passed onto consumers; gasoline profits not passed on, howev
> er. Rebound included.

. 
. local consumer_surplus = (-`permit_price' * (${cpi_2020}/${cpi_2014
> })) * (`harmonized_vmt'/195264)

.         assert `consumer_surplus' <= 0 // Our data implies a larger
>  total lifetime VMT. Harmonizing with estimates on producers' cost 
> of compliance. No rebound.

. 
. local soc_local = `r(wtp_soc_local)' + `r(wtp_r_loc)' 

. local soc_global = `r(wtp_soc_global)' + `r(wtp_r_glob)'

. 
. if "${normalize_env}" == "yes" {
.         local normalize = `soc_local' + `soc_global'
. }

. if "${normalize_env}" != "yes" {
.         local normalize = 1
. }

.         
. local wtp_total = `producer_surplus' + `consumer_surplus' + `soc_lo
> cal' + `soc_global'

. 
. *****************************
. /* 3. Waterfalls */
. *****************************
. /* Since looking at a regulation, we do not have costs --> Skip MVP
> F calculation and simply show the 
>    breakdown b/w producers WTP to abate pollutant, p, and society's
>  WTP for this ton of pollution. */
.    
. global wtp_prod_`1' = (`producer_surplus')/abs(`normalize')

. global wtp_cons_`1' = (`consumer_surplus')/abs(`normalize')

. 
. 
. global wtp_soc_l_`1' = `soc_local'/abs(`normalize')

. global wtp_soc_g_`1' = `soc_global'/abs(`normalize')

.         global wtp_soc_`1' = ${wtp_soc_g_`1'} + ${wtp_soc_l_`1'}

. 
. global WTP_`1' = ${wtp_prod_`1'} + ${wtp_soc_`1'} + ${wtp_cons_`1'}

.    
. global program_cost_`1' = 0

. global fisc_ext_t_`1' =  `r(fisc_ext_t)' /abs(`normalize')

. global fisc_ext_s_`1' = 0

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'/abs(`normalize')

. global cost_`1' = ${program_cost_`1'} + ${fisc_ext_t_`1'} + ${fisc_
> ext_s_`1'} + ${fisc_ext_lr_`1'}

. 
. 
. local phi = 0.5

. 
. 
. global CAFE_sc_`1' = (  ${fisc_ext_t_`1'} + ${fisc_ext_lr_`1'} - ${
> wtp_prod_`1'} - ${wtp_cons_`1'}  + (`phi'*(${fisc_ext_t_`1'} + ${fi
> sc_ext_lr_`1'}))) / ///
>                                                  ((${wtp_soc_g_`1'}
> ) / (193 * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. 
. di in red ${CAFE_sc_`1'}
158.54552

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
WTP_USFut
(1 real change made)
WTP_RoW
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(0 real changes made)
(0 real changes made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000023.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000024.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000025.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_dk_current_estimates_0_replicat
    > ions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_dk_current_estimates_0_replicat
    > ions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_dk_current_unbounded_estimates_
    > 0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_dk_current_unbounded_estimates_
    > 0_replications.dta saved
Finished running for cafe_dk under current
(6 vars, 5 obs)
spec_type     baseline_g~n  households~e
policy_year   baseline_m~e  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     baseline_g~n  households~e
policy_year   baseline_m~e  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     baseline_g~n  households~e
policy_year   baseline_m~e  description
1
Specification 1 of 1, program 25 of 100 (cafe_j)
Number of observations (_N) was 0, now 0.
cafe_j

. *************************************************************
. /* 0. Program: CAFE                        */
. *************************************************************
. /*
> Jacobsen, Mark R. 
> "Evaluating US Fuel Economy Standards in a Model with Producer and 
> Household Heterogeneity."
> American Economic Journal: Economic Policy, 5(2): 148--87.
> https://www.aeaweb.org/articles?id=10.1257/pol.5.2.148
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"change_consumer_surplus"' `"change_producer_surplus"' `"gallons_cha
> nge"' `"vmt_change"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -24.1           .      -24.1      -24
> .1

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -5.52           .      -5.52      -5.
> 52

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0337           .      .0337      .03
> 37

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0211           .      .0211      .02
> 11
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. *****************************
. /* 2. Intermediate Calculations */
. *****************************
. // 2001 dollars. 
. global additional_accidents             no

. global normalize_env                            yes

. 
. 
. local change_carbon_tons = (0.008887 * 222 * ${cpi_2020})/${cpi_200
> 1}

. 
. local consumer_surplus = (${baseline_gas_consumption} * (`gallons_c
> hange')) * ${households_in_sample} * `change_carbon_tons' * ((`chan
> ge_consumer_surplus')/(`change_consumer_surplus' + `change_producer
> _surplus')) * -1

. 
. local producer_surplus = (${baseline_gas_consumption} * (`gallons_c
> hange')) * ${households_in_sample} * `change_carbon_tons' * (`chang
> e_producer_surplus'/(`change_consumer_surplus' + `change_producer_s
> urplus')) * -1

. 
. 
. local per_mile_ext = ((${gas_ldv_ext_local_2020} - ${gas_ldv_ext_lo
> cal_no_vmt_2020}) / ${gas_ldv_avg_mpg_2020}) * (1/0.52)

. 
. local soc_local_p = (${baseline_gas_consumption} * (`gallons_change
> ')) * ${households_in_sample} * ${gas_ldv_ext_local_no_vmt_2020}

. local soc_local_d = (${baseline_mileage} * (`vmt_change')) * ${hous
> eholds_in_sample} * `per_mile_ext'

. 
. 
. 
. local soc_local = `soc_local_p' + `soc_local_d'

. local soc_global = (${baseline_gas_consumption} * (`gallons_change'
> )) * ${households_in_sample} * ///
>                                 ((${gas_ldv_ext_global_2020})*(1 - 
> (${USShareFutureSSC} * ${USShareGovtFutureSCC}))) 

. 
. 
. if "${normalize_env}" == "yes" {
.         local normalize = `soc_local' + `soc_global'
. }

. if "${normalize_env}" != "yes" {
.         local normalize = 1
. }

. 
. 
. local gas_tax_rev_lost = (${baseline_gas_consumption} * (`gallons_c
> hange')) * ${households_in_sample} * (${nominal_gas_tax_2020})

. 
. local corp_tax_lost = (${baseline_gas_consumption} * (`gallons_chan
> ge')) * ${households_in_sample} * (${nominal_gas_markup_2020})*(${g
> asoline_effective_corp_tax})

. 
. local gas_profit_lost = (${baseline_gas_consumption} * (`gallons_ch
> ange')) * ${households_in_sample} * (${nominal_gas_markup_2020})*(1
>  - ${gasoline_effective_corp_tax}) * -1

. 
. *****************************
. /* 3. Saving components */
. *****************************
. global regulation_`1' = 1

. 
. /* Since looking at a regulation, we do not have costs --> Skip MVP
> F calculation and simply show the 
>    breakdown b/w producers WTP to abate pollutant, p, and society's
>  WTP for this ton of pollution. */
.    
. global wtp_prod_`1' = (`producer_surplus' + `gas_profit_lost')/abs(
> `normalize')

. global wtp_cons_`1' = (`consumer_surplus')/abs(`normalize')

. 
. global wtp_soc_l_`1' = (`soc_local')/abs(`normalize')

. global wtp_soc_g_`1' = `soc_global'/abs(`normalize')

. global wtp_soc_`1' = ${wtp_soc_g_`1'} + ${wtp_soc_l_`1'}

. 
. global WTP_`1' = ${wtp_prod_`1'} + ${wtp_soc_`1'} + ${wtp_cons_`1'}

.    
. di in red ${WTP_`1'}
.15316268

.    
.    
. global normalize_`1' =  `normalize'

. global soc_global_`1' =  `soc_global'

.    
. global program_cost_`1' = 0

. global fisc_ext_t_`1' = (`gas_tax_rev_lost' + `corp_tax_lost')/abs(
> `normalize')

. global fisc_ext_s_`1' = 0

. global fisc_ext_lr_`1' = (`soc_global' * (${USShareFutureSSC} * ${U
> SShareGovtFutureSCC}))/(abs(`normalize')) * -1

. global cost_`1' = ${program_cost_`1'} + ${fisc_ext_t_`1'} + ${fisc_
> ext_s_`1'} + ${fisc_ext_lr_`1'}

. 
. 
. local phi = 0

. global CAFE_sc_`1' = (  ${fisc_ext_t_`1'} + ${fisc_ext_lr_`1'} - ${
> wtp_prod_`1'} - ${wtp_cons_`1'} + (`phi'*(${fisc_ext_t_`1'} + ${fis
> c_ext_lr_`1'}))) / ///
>                                          ((${wtp_soc_g_`1'}) / (193
>  * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

.                                 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
WTP_USFut
(1 real change made)
WTP_RoW
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(0 real changes made)
(0 real changes made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000026.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000027.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000028.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_j_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_j_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_j_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cafe_j_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for cafe_j under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   State         ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State         ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State         ef_region
1
Specification 1 of 1, program 26 of 100 (care)
Number of observations (_N) was 0, now 0.
care

. *************************************************************
. /* 0. Program: California Alternate Rates for Energy (CARE) */
. *************************************************************
. 
. /*Hahn, Robert W., and Robert D. Metcalfe. 
> "Efficiency and Equity Impacts of Energy Subsidies." 
> American Economic Review 111, no. 5 (2021): 1658-88. */
. *https://www.aeaweb.org/articles?id=10.1257/aer.20180441
. */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"consumption_change"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       1.909           .      1.909      1.9
> 09
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "`4'" == "baseline"{
.                 local dollar_year = ${policy_year}
. }

.                 
. if "`4'" == "current"{
.                 local dollar_year = ${current_year}
. }

.         
.         
. ****************************************************
. /* 3b. Policy Specific Assumptions */
. ****************************************************
. local subsidy_percent = 0.2/0.9 // The actual subsidy percent is 20
> % of the marginal price. We don't observe the marginal price, but w
> e know in context that the price is 0.90 for non-care and care reci
> pients pay 0.7, so we infer a 22% subsidy on the market price

.         
. if "`4'" == "baseline" | "`4'" == "baseline_gen" {
.                 
.         local ng_price = 0.9
.         local subsidy_size = 0.2 // Table in Appendix B.1
. }

. 
. if "`4'" == "current"{
.                 
.         local ng_price = 10.78 / 10 // From policy_category spreads
> heet (Need to change if we change year from 2020)
.         local subsidy_size = `ng_price' * `subsidy_percent' // It i
> s a 20% subsidy
. }

. 
. local admin_cost = (7/109 * `subsidy_size') / (1 - (7/109))

.  // Seven million dollars of admin cost out of 109 million of total
>  spending. I scale the subsidy size by the percentage of subsidy si
> ze that is admin cost
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. local elasticity = -1 * `consumption_change' / ((21 + 21 + `consump
> tion_change') / 2) / ((`subsidy_size') / ((`ng_price' + (`ng_price'
>  - `subsidy_size')) / 2)) // Formula from the bottom of page 1673

.         
. local semie = `subsidy_percent' *  `elasticity'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r_ng)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local wtp_cons = `subsidy_size'

. 
. *Environment
. local local_pollutants = 0

. 
. local global_pollutants = ${global_mmbtu_`dollar_year'} / 10 

. 
. local carbon_only_benefit = ${carbon_mmbtu_`dollar_year'} / 10

. 
. local carbon_reduction = ${lbs_carbon_mmbtu_`dollar_year'} / 10

. 
. *Producers
. local wtp_prod = (${psurplus_mmbtu_`dollar_year'_${State}} / 10) * 
> - `semie' * `r' 

. 
. if "${value_profits}" == "no" {
.         local wtp_prod = 0
. }

. 
. local epsilon = `elasticity'

. local val_local_pollutants = `local_pollutants' * `semie' // These 
> components are negative since they are increasing consumption

. local val_global_pollutants = `global_pollutants' * `semie' // Thes
> e components are negative since they are increasing consumption

. di `val_global_pollutants'
-.07920382

. 
. local rebound_global = -1 * `val_global_pollutants' * (1 - `r') // 
> This is positive

. 
. local q_carbon = `val_global_pollutants' / ${sc_CO2_`dollar_year'}

. 
. local wtp_soc = `val_local_pollutants' + `val_global_pollutants' + 
> `rebound_global'

. local wtp_private = `wtp_cons' + `wtp_prod'

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' - ((`val_global_pollutants' +
>  `rebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})
>  // not including learning-by-doing

. 
. // Quick decomposition
. local WTP_USPres = `wtp_private' + `val_local_pollutants'

. local WTP_USFut =     ${USShareFutureSSC}  * ((`val_global_pollutan
> ts'+`rebound_global') - ((`val_global_pollutants' + `rebound_global
> ') * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`val_global_pollutants
> '+`rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `subsidy_size' + `admin_cost'

. 
. local fisc_ext_t = -`semie' * (${govrev_mmbtu_`dollar_year'_${State
> }} / 10) // Divide by 10 to convert from mmbtu to therms

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = `subsidy_size' * -`semie' * `r' 

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants') * ${USShareFutur
> eSSC} * ${USShareGovtFutureSCC} 

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr' 

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. 
. local resource_cost = -`ng_cost'

. di in red "resource cost is `resource_cost'"
resource cost is -3.56034

. 
. local ng_price = `ng_cost'

. 
. 
. local q_carbon_mck = ${global_mmbtu_2020} / ${sc_CO2_2020}

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is -67.05520605517178

. 
. local gov_carbon = `wtp_soc' / ${sc_CO2_`dollar_year'}

. 
. 
. ****************
. /* 8. Output */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `WTP'

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_loc_`1' = `val_local_pollutants'

. global wtp_glob_`1' = `val_global_pollutants' * (1 - (${USShareFutu
> reSSC} * ${USShareGovtFutureSCC}))

. 
. global cost_`1' = `total_cost'

. 
. 
. global program_cost_`1' = `program_cost'

. 
. 
. global wtp_private_`1' = `wtp_private'

. global wtp_cons_`1' = `wtp_cons'

. 
. 
. global wtp_r_glob_`1' = `rebound_global' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = `wtp_prod'

. global admin_cost_`1' = `admin_cost'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. 
. global q_CO2_`1' = (`wtp_soc' / ${sc_CO2_`dollar_year'}) * -1

. global q_CO2_no_`1' = (`wtp_soc' / ${sc_CO2_`dollar_year'}) * -1

. global q_CO2_mck_`1' = (`wtp_soc' / ${sc_CO2_`dollar_year'}) / `sem
> ie'

. global q_CO2_mck_no_`1' = `q_carbon' / `semie'

. global resource_cost_`1' = ${ng_price_`dollar_year'_${State}}/10

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob", "wtp_r_glob", "
> wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "CARE"

. global `1'_ep = round(`epsilon', 0.001)

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Reboun
> d" "Global""' 4 `"Producers"' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 3

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global normalize_`1' = 0

. 
. di "`1'"
care

. di `wtp_private'
.26953761

. di `CE'


. di `epsilon'
-.34781024

. 
. di `wtp_cons'
.23955556

. di `wtp_prod'
.02998205

. di `wtp_soc'
-.06988572

. 
. di `val_local_pollutants'
0

. di `val_global_pollutants'
-.07920382

. 
. di `semie'
-.07729117

. 
. di `WTP'
.20099054

. di `program_cost'
.25599564

. di `fisc_ext'


. di `total_cost'
.27961265

. di `MVPF'
.71881776

. di ${admin_cost_`1'}
.01644009

. 
. di `WTP'/`total_cost'
.71881776

. di ${policy_year}
2014

. di `q_carbon'
-.00041038

. 
. di `val_global_pollutants'
-.07920382

. di `rebound_global'
.0093181

. di `wtp_prod'
.02998205

.         
.         
.         
.         
.         
.         
.         
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000029.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002a.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002b.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/care_current_estimates_0_replication
    > s.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/care_current_estimates_0_replication
    > s.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/care_current_unbounded_estimates_0_r
    > eplications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/care_current_unbounded_estimates_0_r
    > eplications.dta saved
Finished running for care under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 27 of 100 (cog_gas)
Number of observations (_N) was 0, now 0.
cog_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Coglianese, John, Lucas W. Davis, Lutz Kilian, and James H. Stock
> . 
> "Anticipation, tax avoidance, and the price elasticity of gasoline 
> demand." 
> Journal of Applied Econometrics 32, no. 1 (2017): 1-15. */
. *https://onlinelibrary.wiley.com/doi/pdf/10.1002/jae.2500?casa_toke
> n=tua1MHBeVaAAAAAA:XorqSygTiIj2O0WtjfJ-ohSVC1WPgUv3ZtaYs7DOYDKBov2y
> qJLP6uEHkKakDOc0Dw8kFn1PId1kyM137g
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: cog_gas no uncorrected_
> vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.368           .      -.368      -.3
> 68

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_lbd_`1' = `r(lbd_wtp)'

. global cost_lbd_`1' = `r(lbd_cost)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
. global `1'_ep = "N"

. global `1'_name "Gasoline Tax (Price Elasticity from Coglianese et 
> al. 2017)"

. 
. if "${gas_tax_cc_toggle}" == "yes" {
.                 
.         local cc_note_gas_taxes = "Cost curve enabled."
.                 
. }

. else {
.                 
.         local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Coglianese et al. 2017" "Global As
> sumptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline 
> Price of $`r(consumer_price_return)' (${today_year} dollars). `cc_n
> ote_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002c.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002d.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002e.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cog_gas_current_estimates_0_replicat
    > ions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cog_gas_current_estimates_0_replicat
    > ions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cog_gas_current_unbounded_estimates_
    > 0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cog_gas_current_unbounded_estimates_
    > 0_replications.dta saved
Finished running for cog_gas under current
(4 vars, 5 obs)
spec_type     policy_year   cookstove_~y  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   cookstove_~y  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   cookstove_~y  description
1
Specification 1 of 1, program 28 of 100 (cookstoves)
Number of observations (_N) was 0, now 0.
cookstoves

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002f.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002g.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002h.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cookstoves_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cookstoves_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cookstoves_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cookstoves_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for cookstoves under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 29 of 100 (ct_solar)
Number of observations (_N) was 0, now 0.
ct_solar

. *******************************************************************
> ******************
. /*       0. Program: Connecticut Residential Solar Investment Progr
> am          */
. *******************************************************************
> ******************
. 
. /*
> Gillingham, Kenneth, and Tsvetan Tsvetanov. 
> "Hurdles and steps: Estimating demand for solar photovoltaics." 
> Quantitative Economics 10, no. 1 (2019): 275-310.
> *https://onlinelibrary.wiley.com/doi/pdfdirect/10.3982/QE919
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ct_solar no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"elas"' `"farmer_theta"' `"markup"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.651           .      -.651      -.6
> 51

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .46           .        .46        .
> 46
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

. 
. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local system_capacity = ${system_capacity} // kW

.                 local annual_output = ${output} / (`system_capacity
> ' * 1000) // kWh per year per Watt (kW * 1000)

.                 local lifetime = ${lifetime} 

.                 local marginal_val = ${marginal_val}

.                 local federal_subsidy = 0.26 // percent of cost sub
> sidized

.                 local cost_per_watt_baseline = ${cost_per_watt} * (
> ${cpi_`dollar_year'} / ${cpi_2022}) // expressed in 2022 dollars in
> itially

.         restore

.         
.         if "${subsidy_loop}" == "yes" {
.                 local federal_subsidy = ${fed_sub_loop}
.         }

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************    
.         
.         ** Own-price elasticity of demand 
.         local e_demand = `elas' // Hurdle model - sum of cols (3) a
> nd (4), Table 6 

. 
.         ** Cost assumptions
.         local pre_cost_per_watt = ${cost_per_watt} * (${cpi_`dollar
> _year'} / ${cpi_2022})

.         local cost_per_watt = `pre_cost_per_watt' * (1 - `federal_s
> ubsidy')

.         local avg_state_rebate = 0 // Assuming no average state reb
> ate.

.         local avg_fed_rebate = `pre_cost_per_watt' * `federal_subsi
> dy'

.         
.         if "${spec_type}" == "baseline" {
.                 local federal_subsidy = 0.3 // Subsidy was 30% in b
> aseline year. https://www.irs.gov/pub/irs-prior/i5695--2014.pdf
.                 local system_capacity =  6.972 // kW, Average syste
> m capacity (Table 3)
.                 local annual_output =  32.26 / 25 // kWh/Watt, outp
> ut per unit of installed capacity over 25-year lifespan (pg 302)
.                 
.                 local pre_cost_per_watt = 3.8945 * (${cpi_${policy_
> year}}/${cpi_2014}) // Table 4 in 2014$
.                 local avg_state_rebate = 3.0427 * (${cpi_${policy_y
> ear}}/${cpi_2014}) // Table 4, $/W in 2014$, doesn't include federa
> l subsidy
.                 
.                 local avg_fed_rebate = (`pre_cost_per_watt' + `avg_
> state_rebate') * `federal_subsidy' // Assume federal subsidy applie
> s to pre-state-incentive price. 
.                 
.                 local cost_per_watt = `pre_cost_per_watt' - `avg_fe
> d_rebate'
.         }

.         
. //      if "${spec_type}" == "baseline_gen" {
. //              local federal_subsidy = 0.3
. //              local system_capacity = ${system_capacity}
. //              local annual_output = ${output} / (`system_capacity
> ' * 1000)
. //              local pre_cost_per_watt = 5.40 // https://www.nrel.
> gov/solar/market-research-analysis/solar-installed-system-cost.html
. //              local avg_state_rebate = 0 // US-wide specification
. //              
. //              local cost_per_watt = `pre_cost_per_watt' * (1-`fed
> eral_subsidy')
. //              local avg_fed_rebate = `pre_cost_per_watt' * `feder
> al_subsidy'
. //      }
.         
.         local semie = `e_demand'/`cost_per_watt'

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. * learning by doing
. local cum_sales = (713918 * 1000)/`system_capacity' // 71391800 MW,
>  as of 2020; 176,113.39 MW, as of 2014

. local marg_sales = (128050.40 * 1000)/`system_capacity' // 128050.4
> 0 MW, in 2020; 39,541.25 MW, in 2014

. 
. if `dollar_year' == ${policy_year} {
.         local cum_sales = (176113.39 * 1000)/`system_capacity'
.         local marg_sales = (39541.25 * 1000)/`system_capacity'
. }

. 
. solar, policy_year(${policy_year}) spec(${spec_type}) semie(`semie'
> ) replacement(`replacement') p_name("ct_solar") marg_sales(`marg_sa
> les') cum_sales(`cum_sales') annual_output(`annual_output') system_
> capacity(`system_capacity') pre_cost_per_watt(`pre_cost_per_watt') 
> avg_state_rebate(`avg_state_rebate') e_demand(`e_demand') pass_thro
> ugh(${solar_passthrough}) farmer_theta(`farmer_theta') federal_subs
> idy(`federal_subsidy')
(4 vars, 8 obs)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'
(12 vars, 162 obs)
Global Benefits: .5330543884739463
Local Benefits: .0781905416688685
Global Rebound: .1153666253267306
Local Rebound: .0153148707526175
Dynamic Price: 0
Dynamic Enviro: 0
Producer Loss: .066338870273728
WTP_cc: 10111.70563109663
1.1655261

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002i.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002j.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002k.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ct_solar_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ct_solar_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ct_solar_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ct_solar_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for ct_solar under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   State         ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State         ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State         ef_region
1
Specification 1 of 1, program 30 of 100 (cw_datta)
Number of observations (_N) was 0, now 0.
cw_datta

. *******************************************************************
> ******************
. /*       0. Program: Energy Efficient Appliance Rebate -- Clothes W
> ashers        */
. *******************************************************************
> ******************
. 
. /*
> Souvik Datta and Sumeet Gulati
> "Utility rebates for ENERGY STAR appliances: Are they effective?" 
> Journal of Environmental Economics and Management
> * https://www.sciencedirect.com/science/article/pii/S00950696140007
> 22#s0070
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: cw_datta no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals 
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .395           .       .395       .3
> 95
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. preserve

.         
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

. restore

. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

.         
. local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yrs - Foot
> note 10

. local marginal_valuation = ${val_given}

.         
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. local appliance_cost = 966 * (${cpi_`dollar_year'} / ${cpi_2004}) /
> / Footnote on page 1

. local avg_rebate = 68.65 * (${cpi_`dollar_year'} / ${cpi_2004}) // 
> Table 3

. // local annual_kwh = ((854+829+829+615+529+531)/6) - ((290+297+297
> +254+243+234)/6) // kwh per year
. local annual_kwh = 201 // Houde & Aldy (2017)

. 
. *Datta assumes that people replace their appliances at the end of t
> he appliance lifetime and do not consider accelerated replacement a
> s does Houde and Aldy
. 
. if "${spec_type}" == "baseline"{
.         local annual_kwh = 531-234 // Table 5
. }

. 
. *********************************
. /* 5. Intermediate Calculations */
. *********************************
. local semie = `semie' / 100

. local epsilon = `semie' * ((966 - 68.65) * (${cpi_${policy_year}} /
>  ${cpi_2004}))

. local semie = `epsilon' / (`appliance_cost' - `avg_rebate')

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. *************************
. /* 6. WTP Calculations */
. *************************
. * Consumers
. local wtp_cons = 1

. 
. * Producers
. local annual_prod = `semie' * `annual_kwh' * ${producer_surplus_`do
> llar_year'_${State}}

. 
. local wtp_prod = (`annual_prod' + (`annual_prod'/`discount') * (1 -
>  (1/(1+`discount')^(`lifetime' - 1)))) * `r'

. 
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local annual_savings = `semie' * `annual_kwh' * ${kwh_price
> _`dollar_year'_${State}}
.         
.         local c_savings = `annual_savings' + (`annual_savings'/`dis
> count') * (1 - (1/(1+`discount')^(`lifetime' - 1)))
. }

. 
. if "${value_profits}" == "no" {
.         local wtp_prod = 0
. }

. 
. * Social Costs
. dynamic_grid `annual_kwh', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("unifo
> rm") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants = `r(local_enviro_ext)'

. local global_pollutants = `r(global_enviro_ext)'

. 
. local rebound_local = `local_pollutants' * (1 - `r') * `semie'

. local rebound_global = `global_pollutants' * (1 - `r') * `semie'

. 
. local val_local_pollutants = `local_pollutants' * `semie'

. local val_global_pollutants = `global_pollutants' * `semie'

. 
. local carbon = `r(carbon_content)'

. local q_carbon = `carbon' * `r' * `semie'

. 
. * Society
. local wtp_soc_raw = `val_local_pollutants' + `val_global_pollutants
> '

. 
. local wtp_society = `wtp_soc_raw' - `rebound_local' - `rebound_glob
> al'

. 
. local wtp_private = `wtp_cons' - `wtp_prod'

. 
. local WTP = `wtp_cons' + `wtp_society' - `wtp_prod' + `c_savings' -
>  ((`val_global_pollutants' - `rebound_global') * ${USShareFutureSSC
> } * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `wtp_cons' + `val_local_pollutants' - `wtp_prod'
>  - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`val_global_polluta
> nts' - `rebound_global') - ((`val_global_pollutants' - `rebound_glo
> bal') * ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`val_global_polluta
> nts' - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = 1

. 
. local annual_fe_t = `semie' * `annual_kwh' * ${government_revenue_`
> dollar_year'_${State}}

. 
. local fisc_ext_t = (`annual_fe_t' + ((`annual_fe_t')/`discount') * 
> (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local gov_state_spending = 0

. 
. local gov_fed_spending = `avg_rebate' * `semie'

. 
. local fisc_ext_s = `gov_state_spending' + `gov_fed_spending'

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local annual_e_savings = `annual_kwh' * `energy_cost'

. local clothes_washer_energy_savings = `annual_e_savings' + (`annual
> _e_savings' / `discount') * (1 - (1 / (1 + `discount')^(`lifetime' 
> - 1)))

. 
. di in red "energy savings are `clothes_washer_energy_savings'"
energy savings are 194.9408020366026

. 
. local clothes_washer_cost = 448.82

. 
. local resource_cost = `clothes_washer_cost' - `clothes_washer_energ
> y_savings'

. di in red "resource cost is `resource_cost'"
resource cost is 253.8791979633974

. 
. local q_carbon_mck = `carbon'

. di in red "carbon is `q_carbon_mck'"
carbon is 1.494132158634947

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is 169.9174979242424

. 
. local gov_carbon = `q_carbon_mck' * `semie'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `val_global_pollutants' * (1 - (${USShareFutu
> reSSC} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `val_local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = -`wtp_prod'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_cons_`1' = `wtp_cons'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_r_loc wtp_r_glob
>  wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Clothes Washer Rebates - C4A (Datta)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `""Rebound" "Local""' 5 `""Rebound" "Global""' 6 `"Pr
> oducers"' 7 `"Total WTP"' 9 `""Program" "Cost""' 10 `""FE" "Subsidi
> es""' 11 `""FE" "Taxes""' 12 `""FE" "Long-Run""' 13 `"Total Cost"' 
> ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.3096447

. di `WTP'
1.721968

. di `total_cost'
1.314836

. di `wtp_society'
.80735861

. di `wtp_private'
.92813635

. 
. di `program_cost'
1

. di `wtp_prod'
.07186365

. di `wtp_cons'
1

. di `val_global_pollutants' + `val_local_pollutants'
1.0040101

. di `rebound_local' + `rebound_global'
.19665147

. di `wtp_society'
.80735861

. di `epsilon'
3.7818879

. di `annual_kwh'
201

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002l.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002m.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002n.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cw_datta_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cw_datta_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cw_datta_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/cw_datta_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for cw_datta under current
(5 vars, 5 obs)
spec_type    policy_year  run_year     paper_price  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  run_year     paper_price  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  run_year     paper_price  description
1
Specification 1 of 1, program 31 of 100 (dahl_diesel)
Number of observations (_N) was 0, now 0.
dahl_diesel

. *******************************************************************
> ******************
. /*       1. Program: Diesel taxes                                  
>                                               */
. *******************************************************************
> ******************
. 
. /* Dahl, Carol A.
> "Measuring Global Gasoline and Diesel Price and Income Elasticities
> ." 
> Energy Policy 41, (2012) 2-13. */
. *https://www.sciencedirect.com/science/article/pii/S030142151000879
> 7. */
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: dahl_diesel no uncorrec
> ted_vJK current

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_diesel"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.07           .       -.07       -.
> 07
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. ****************************************************
. /* 4. Pull in Necessary Price and Tax Data. */
. ****************************************************
. preserve

. 
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.         qui sum pct_markup if year == `dollar_year'

.         local pct_markup = r(mean)

. 
.         import excel "${policy_assumptions}", first clear sheet("di
> esel_prices") 
(4 vars, 21 obs)

.                 keep if year== `dollar_year'    
(20 observations deleted)

. 
. 
.         local consumer_price =  diesel_price

.         if "${spec_type}" == "baseline" {
.                 local consumer_price = ${paper_price}
.         }       

.                 
.         * Consumer price = includes taxes. 
.         local tax_rate = (diesel_tax_federal + diesel_tax_state_avg
> )/100

.         local diesel_markup = `consumer_price' * `pct_markup'

. 
. restore 

. 
. **************************
. /* 5. Cost Components.  */
. **************************
. 
. * Semi-elasticity of demand
. local semi_e_demand_diesel_tax = `e_demand_diesel' / `consumer_pric
> e' 

. 
. * Producer (Markups)
. local semi_e_producer_prices_tax = 0 // Assuming = 0.

. 
. * Program Costs
. local program_cost = 1

. 
. *************************
. /* 6. WTP Calculations */
. *************************
. 
. * Consumers  [1 + (1+t)ep] 
. local wtp_consumers = 1 + (1 +`tax_rate')*`semi_e_producer_prices_t
> ax'

. 
. * Society  [-V/p*e]
. local wtp_soc_g = ${diesel_ext_global_`dollar_year'} * `semi_e_dema
> nd_diesel_tax'

. local wtp_soc_l = ${diesel_ext_local_`dollar_year'} * `semi_e_deman
> d_diesel_tax'

.                                 
.                         
. * Producers
. local wtp_producers = -`diesel_markup' * `semi_e_demand_diesel_tax'
>  * (1 - ${gasoline_effective_corp_tax})

. local fisc_ext_prod = `diesel_markup' * `semi_e_demand_diesel_tax' 
> * ${gasoline_effective_corp_tax}

.         
. if "${value_profits}" == "no" {
.         
.         local wtp_producers = 0 // Includes utilities and gas compa
> nies' profits. 
.         local fisc_ext_prod = 0
.         
. }

. 
. local total_WTP = `wtp_consumers' + (`wtp_soc_g'* (1 - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC}))) + `wtp_soc_l' + `wtp_producer
> s'

. 
. local WTP_USPres = `wtp_consumers' + `wtp_producers' + `wtp_soc_l' 

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1-(${USShareFutureSSC})) * `wtp_soc_g' 

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local fiscal_externality_tax = (`tax_rate' * `semi_e_demand_diesel_
> tax') + `fisc_ext_prod'

. local fiscal_externality_subsidy = -0.000000000001

. local fiscal_externality_lr = -`wtp_soc_g' * ${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}

. 
. local total_cost = `program_cost' + `fiscal_externality_tax' + `fis
> cal_externality_lr' + `fiscal_externality_subsidy'

. 
. local MVPF = `total_WTP'/`total_cost'

. 
. ****************************************
. /* 6. Cost-Effectiveness Calculations */
. ****************************************
. local q_carbon_mck = ((`wtp_soc_g') / ${sc_CO2_`dollar_year'}) / `s
> emi_e_demand_diesel_tax'

. di in red "consumer price is `consumer_price'"
consumer price is 2.551

. di in red "diesel markup is `diesel_markup'"
diesel markup is .6916129929667384

. di in red "tax rate is `tax_rate'"
tax rate is .54

. local resource_cost = 0.92 * `consumer_price' - `diesel_markup' - `
> tax_rate'

. di in red "resource cost is `resource_cost'"
resource cost is 1.115307007033262

. 
. local resource_ce = -`resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is -98.46326970288675

. di in red "consumer price is `consumer_price'"
consumer price is 2.551

. di in red "carbon is `q_carbon_mck'"
carbon is .0113271376260275

. 
. local resource_cost = -`consumer_price'

. local gov_carbon = `wtp_soc_g' / ${sc_CO2_`dollar_year'}

. 
. **************************
. /* 7. Output */
. **************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `total_WTP'

. 
. global program_cost_`1' = `program_cost' 

. global wtp_soc_`1' = `wtp_soc_l' + (`wtp_soc_g' * (1 - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC})))

. 
. 
. global wtp_glob_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})))

. global wtp_loc_`1' = `wtp_soc_l'

. 
. global wtp_r_loc_`1' = 0

. global wtp_r_glob_`1' = 0

. 
. 
. global fisc_ext_t_`1' = `fiscal_externality_tax'

. global fisc_ext_s_`1' = `fiscal_externality_subsidy'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global p_spend_`1' = `program_cost' + `tax_rate' * `semi_e_demand_d
> iesel_tax'

. global q_CO2_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'}) * -1

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global wtp_soc_rbd_`1' = 0

. 
. global wtp_cons_`1' = `wtp_consumers'

. 
. global wtp_prod_s_`1' = `wtp_producers'

. global wtp_prod_u_`1' = 0

. global q_CO2_no_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'}) * -1

. global q_CO2_mck_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'})/`sem
> i_e_demand_diesel_tax'

. global q_CO2_mck_no_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'})/`
> semi_e_demand_diesel_tax'

. global resource_cost_`1' = `consumer_price'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semi_e_demand_diesel_tax'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002o.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002p.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002q.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dahl_diesel_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dahl_diesel_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dahl_diesel_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dahl_diesel_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for dahl_diesel under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 32 of 100 (dk_gas)
Number of observations (_N) was 0, now 0.
dk_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Davis, Lucas W., and Lutz Kilian. 
> "Estimating the effect of a gasoline tax on carbon emissions." 
> Journal of Applied Econometrics 26, no. 7 (2011): 1187-1214. */
. *https://onlinelibrary.wiley.com/doi/pdf/10.1002/jae.1156?casa_toke
> n=NvTuVmTc4IIAAAAA:X4am44dRQ8ZnnKjP3iBy9P5qmc5xze5xeyJqNICk1rfwlwZn
> PKfJEe3pDnRvW6TmOV-u-TrIkpK8206Vgw
. */
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.46           .       -.46       -.
> 46

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Davis 
> and Kilian 2011)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. global note_`1' = `"Publication: Davis and Kilian 2011" "Global Ass
> umptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline P
> rice of $`r(consumer_price_return)' (${today_year} dollars). `cc_no
> te_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002r.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002s.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002t.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dk_gas_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dk_gas_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dk_gas_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dk_gas_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for dk_gas under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 33 of 100 (dorsey_itc)
Number of observations (_N) was 0, now 0.
dorsey_itc

. *******************************************************************
> *************
. /*       0. Program: Federal ITC (DORSEY)         */
. *******************************************************************
> *************
. 
. /*
> https://www.jacksonfdorsey.com/_files/ugd/f863ae_3dcc9be89b99454db9
> a9bacd63551714.pdf
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: dorsey_itc no uncorrect
> ed_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"' `"markup"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -1.59           .      -1.59      -1.
> 59

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .46           .        .46        .
> 46
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.                 if "${spec_type}" == "baseline"{
.                         local dollar_year = ${policy_year}
.                 }

.                 
.                 if "${spec_type}" == "current"{
.                         local dollar_year = ${current_year}
.                 }

.         restore

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local annual_output = ${output} / (`system_capacity
> ' * 1000)

.                 local federal_subsidy = 0.26

.         restore

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************    
.         ** Cost assumptions
.         local pre_cost_per_watt = ${cost_per_watt}

.         local cost_per_watt = `pre_cost_per_watt' * (1 - `federal_s
> ubsidy')

.         local avg_state_rebate = 0

.         local avg_fed_rebate = `pre_cost_per_watt' * `federal_subsi
> dy'

.         
.         
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseli
> ne_gen" {
.                 local federal_subsidy = 0.3
.                 local system_capacity =  7.30 // kW, Average system
>  capacity (Table A.11)
.                 local annual_output =  1.42828 // kWh/Watt, output 
> per unit of installed capacity over 25-year lifespan (Table A.9)
.                         
.                 local pre_cost_per_watt = 2.19 + 1.76 // Table 2 Pa
> nel A 2014 H1
.                 local avg_state_rebate = 0
.                         
.                 local cost_per_watt = `pre_cost_per_watt' * (1 - `f
> ederal_subsidy') // Cost per watt is post-federal subsidy
.                 local avg_fed_rebate = `pre_cost_per_watt' * `feder
> al_subsidy'
.         }

.         
.         local semie = `e_demand'/`cost_per_watt'

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. * learning by doing
. local cum_sales = (713918 * 1000)/`system_capacity' // 71391800 MW,
>  as of 2020; 176,113.39 MW, as of 2014

. local marg_sales = (128050.40 * 1000)/`system_capacity' // 128050.4
> 0 MW, in 2020; 39,541.25 MW, in 2014

. 
. if `dollar_year' == ${policy_year} {
.         local cum_sales = (101645.45 * 1000)/`system_capacity'
.         local marg_sales = (29440.00 * 1000)/`system_capacity'
. }

. 
. solar, policy_year(${policy_year}) spec(${spec_type}) semie(`semie'
> ) replacement(`replacement') p_name("dorsey_itc") marg_sales(`marg_
> sales') cum_sales(`cum_sales') annual_output(`annual_output') syste
> m_capacity(`system_capacity') pre_cost_per_watt(`pre_cost_per_watt'
> ) avg_state_rebate(`avg_state_rebate') e_demand(`e_demand') pass_th
> rough(${solar_passthrough}) farmer_theta(`farmer_theta') federal_su
> bsidy(`federal_subsidy')
(4 vars, 8 obs)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'
(12 vars, 162 obs)
Global Benefits: 1.151658260123602
Local Benefits: .1689298224038397
Global Rebound: .249248350399066
Local Rebound: .0330876131710889
Dynamic Price: 0
Dynamic Enviro: 0
Producer Loss: .1433244141122779
WTP_cc: 13548.73308964182
1.2521857

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002u.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002v.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002w.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dorsey_itc_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dorsey_itc_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dorsey_itc_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dorsey_itc_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for dorsey_itc under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   State         ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State         ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State         ef_region
1
Specification 1 of 1, program 34 of 100 (dw_datta)
Number of observations (_N) was 0, now 0.
dw_datta

. *******************************************************************
> ******************
. /*       0. Program: Energy Efficient Appliance Rebate -- Dishwashe
> rs        */
. *******************************************************************
> ******************
. 
. /*
> Souvik Datta and Sumeet Gulati
> "Utility rebates for ENERGY STAR appliances: Are they effective?" 
> Journal of Environmental Economics and Management
> * https://www.sciencedirect.com/science/article/pii/S00950696140007
> 22#s0070
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: dw_datta no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals 
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.604           .      -.604      -.6
> 04
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. preserve

.         
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

. restore

. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

.         
. local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yrs - Foot
> note 10

. local marginal_valuation = ${val_given}

.         
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
. 
. local appliance_cost = (543+84) * (${cpi_`dollar_year'}/${cpi_2010}
> ) // From Aldy Paper Table 2

. local avg_rebate = 34.348 * (${cpi_`dollar_year'}/${cpi_2004}) // T
> able 3

. // local annual_kwh = ((700+700+574+439+413+448)/6) - ((555+555+455
> +336+341+341)/6) // kwh per year (Table 7)
. local annual_kwh = 34 // Houde & Aldy Appendix Table A.10

. 
. *********************************
. /* 5. Intermediate Calculations */
. *********************************
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. local semie = `semie'/100

. local epsilon = `semie' * (((543+84) * (${cpi_${policy_year}}/${cpi
> _2010})) - (34.348 * (${cpi_${policy_year}}/${cpi_2004})))

. local semie = (`epsilon'/(`appliance_cost' - `avg_rebate'))

. 
. 
. dynamic_grid `annual_kwh', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("unifo
> rm") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants = `r(local_enviro_ext)'

. local global_pollutants = `r(global_enviro_ext)'

. local carbon = `r(carbon_content)'

. local q_carbon = `carbon' * `r' * `semie'

. 
. local val_local_pollutants = `local_pollutants' * `semie'

. local val_global_pollutants = `global_pollutants' * `semie'

. local rebound_local = `local_pollutants' * (1-`r') * `semie'

. local rebound_global = `global_pollutants' * (1-`r') * `semie'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. * Private
. local wtp_cons = 1

. 
. * Society
. local wtp_soc_raw = `val_local_pollutants' + `val_global_pollutants
> '

. 
. local wtp_society = `wtp_soc_raw' - `rebound_local' - `rebound_glob
> al'

. 
. local annual_prod = `semie' * `annual_kwh' * ${producer_surplus_`do
> llar_year'_${State}}

. 
. local wtp_prod = (`annual_prod' + (`annual_prod'/`discount') * (1 -
>  (1/(1+`discount')^(`lifetime' - 1)))) * `r'

. 
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local annual_savings = `semie' * `annual_kwh' * ${kwh_price
> _`dollar_year'_${State}}
.         
.         local c_savings = `annual_savings' + (`annual_savings'/`dis
> count') * (1 - (1/(1+`discount')^(`lifetime' - 1)))
. }

. 
. if "${value_profits}" == "no" {
.         local wtp_prod = 0
. }

. 
. local wtp_private = `wtp_cons' - `wtp_prod'

. 
. local WTP = `wtp_cons' + `wtp_society' - `wtp_prod' + `c_savings' -
>  ((`val_global_pollutants' - `rebound_global') * ${USShareFutureSSC
> } * ${USShareGovtFutureSCC})

. 
. 
. // Quick decomposition
. local WTP_USPres = `wtp_cons' + `val_local_pollutants' - `wtp_prod'
>  - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`val_global_polluta
> nts' - `rebound_global') - ((`val_global_pollutants' - `rebound_glo
> bal') * ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`val_global_polluta
> nts' - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = 1

. 
. local annual_fe_t = `semie' * `annual_kwh' * ${government_revenue_`
> dollar_year'_${State}}

. 
. local fisc_ext_t = (`annual_fe_t' + ((`annual_fe_t')/`discount') * 
> (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local gov_state_spending = 0

. 
. local gov_fed_spending = `avg_rebate' * `semie'

. 
. local fisc_ext_s = `gov_state_spending' + `gov_fed_spending'

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local annual_e_savings = `annual_kwh' * `energy_cost'

. local dishwasher_energy_savings = `annual_e_savings' + (`annual_e_s
> avings' / `discount') * (1 - (1 / (1 + `discount')^(`lifetime' - 1)
> ))

. 
. di in red "energy savings are `dishwasher_energy_savings'"
energy savings are 32.97506104101736

. 
. local dishwasher_cost = 161.11772

. 
. local resource_cost = `dishwasher_cost' - `dishwasher_energy_saving
> s'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `semie'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `val_global_pollutants' * (1 - (${USShareFutu
> reSSC} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `val_local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = -`wtp_prod'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_cons_`1' = `wtp_cons'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_r_loc wtp_r_glob
>  wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Clothes Washer Rebates - C4A (Datta)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `""Rebound" "Local""' 5 `""Rebound" "Global""' 6 `"Pr
> oducers"' 7 `"Total WTP"' 9 `""Program" "Cost""' 10 `""FE" "Subsidi
> es""' 11 `""FE" "Taxes""' 12 `""FE" "Long-Run""' 13 `"Total Cost"' 
> ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.0533792

. di `WTP'
.81325858

. di `total_cost'
.7720473

. di `wtp_society'
-.20882822

. di `wtp_private'
1.018588

. 
. di `program_cost'
1

. di `wtp_prod'
-.01858797

. di `wtp_cons'
1

. di `val_global_pollutants' + `val_local_pollutants'
-.25969332

. di `rebound_local' + `rebound_global'
-.0508651

. di `wtp_society'
-.20882822

. di `epsilon'
-3.2788762

. di `annual_kwh'
34

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00002x.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000030.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000031.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dw_datta_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dw_datta_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dw_datta_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/dw_datta_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for dw_datta under current
(8 vars, 5 obs)
spec_type     emissions_~r  policy_year   ef_region
region        State         avg_subsidy   description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   ef_region
region        State         avg_subsidy   description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   ef_region
region        State         avg_subsidy   description
1
Specification 1 of 1, program 35 of 100 (es_incent)
Number of observations (_N) was 0, now 0.
es_incent

. *******************************************************************
> ******************
. /*       0. Program: Energy Star Sales Agent Nudge        */
. *******************************************************************
> ******************
. 
. /*
> Allcott, Hunt, and Richard L. Sweeney. 
> "The role of sales agents in information disclosure: evidence from 
> a field experiment." 
> Management Science 63.1 (2017): 21-39.
> */
. * https://pubsonline.informs.org/doi/abs/10.1287/mnsc.2015.2327
. *$100 Rebate & Sales Agent Incentive
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: es_incent no uncorrecte
> d_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"TE_prob"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .219           .       .219       .2
> 19
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************    
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.         
.         local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yr
> s - Footnote 10

.         local marginal_valuation = ${val_given}

. restore

. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
.         
. ** Cost assumptions:
. local rebate = 100 // 2012 $USD  (Table 6)

. local sales_incentive = 25 // 2012 $USD Sales Incentive

. local Baseline_prob = 0.009 // Specification (6) (Table 6)

. local baseline_mmbtu = 22.7 // https://www.eia.gov/todayinenergy/de
> tail.php?id=37433

. local mmbtu_saving_prop = 0.08 // https://www.energystar.gov/produc
> ts/water_heaters/water_heater_high_efficiency_gas_storage/benefits_
> savings

. 
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_rebate = `rebate' * (${cpi_`dollar_year'}/${cpi_${policy_
> year}})

. local adj_incentive = `sales_incentive' * (${cpi_`dollar_year'}/${c
> pi_${policy_year}})

. 
. ***********************************
. /* 4. Intermediate Calculations */
. ***********************************
. local mmbtu_reduction_annual = `mmbtu_saving_prop' * `baseline_mmbt
> u' // Assumes value for avg 4-person HH

. local prop_inframarginal = `Baseline_prob' / (`TE_prob'+`Baseline_p
> rob')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. local r_ng = `r(r_ng)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = `prop_inframarginal' * `adj_rebate'

. local marginal = `prop_marginal' * `marginal_valuation' * `adj_reba
> te'

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
. 
.         local annual_savings = `prop_marginal' * `mmbtu_reduction_a
> nnual' * ${ng_price_`dollar_year'_${State}}
.         
.         local c_savings = `annual_savings' + (`annual_savings'/`dis
> count') * (1 - (1/(1+`discount')^(`lifetime' - 1)))
. }

. 
. *Producers
. 
. local annual_prod = `prop_marginal' * `mmbtu_reduction_annual' * ${
> psurplus_mmbtu_`dollar_year'_${State}}

. 
. local corporate_loss = (`annual_prod' + (`annual_prod'/`discount') 
> * (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `r_ng'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. * Social Costs
. local local_pollutants = 0

. local global_pollutants = (`prop_marginal' * ${global_mmbtu_`dollar
> _year'} * `mmbtu_reduction_annual') + ((`prop_marginal' * ${global_
> mmbtu_`dollar_year'} * `mmbtu_reduction_annual') / `discount') * (1
>  - (1 / (1+`discount')^(`lifetime' - 1)))

. 
. local rebound_local = `local_pollutants' * (1-`r_ng')

. local rebound_global = `global_pollutants' * (1-`r_ng')

. 
. local q_carbon = `prop_marginal' * `lifetime' * `mmbtu_reduction_an
> nual' * (${global_mmbtu_`dollar_year'}/ ${sc_CO2_`dollar_year'}) * 
> `r_ng'

. 
. * Social benefits from reduced carbon 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =  ${USShareFutureSSC}  * ((`global_pollutants' - 
> `rebound_global') - ((`global_pollutants' - `rebound_global') * ${U
> SShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate' + `adj_incentive'

. 
. local annual_fe_t = `prop_marginal' * `mmbtu_reduction_annual' * ${
> govrev_mmbtu_`dollar_year'_${State}}

. local fisc_ext_t = (`annual_fe_t' + (`annual_fe_t'/`discount') * (1
>  - (1/(1+`discount')^(`lifetime' - 1)))) * `r_ng'

. 
. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants') * ${USShareFutureSSC
> } * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. 
. local water_heater_energy_savings = (`mmbtu_reduction_annual' * `ng
> _cost') + ((`mmbtu_reduction_annual' * `ng_cost') / `discount') * (
> 1 - (1 / (1+`discount')^(`lifetime' - 1)))

. 
. local water_heater_cost = 386.3243

. 
. local sticker_price = `water_heater_cost' + `adj_incentive'

. di in red "sticker price is `sticker_price'"
sticker price is 414.5104698884078

. di in red "energy savings are `water_heater_energy_savings'"
energy savings are 84.73946637412556

. 
. local q_carbon_mck = `lifetime' * (${global_mmbtu_2020} / ${sc_CO2_
> 2020}) * `mmbtu_reduction_annual'

. di in red "carbon is `q_carbon_mck'"
carbon is 1.446325606996176

. local resource_cost = `water_heater_cost' + `adj_incentive' - `wate
> r_heater_energy_savings'

. local energy_savings = `water_heater_energy_savings'

. local sticker_price = `water_heater_cost'

. local mmbtu_reduc = `mmbtu_reduction_annual' * `lifetime'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `prop_marginal' * `q_carbon_mck' * `r_ng'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf c_savings wtp_glob wtp_loc wt
> p_r_loc wtp_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "c_savings", "wt
> p_glob" ,"wtp_loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Water Heater Rebates + Incentive"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Consumer" "
> Savings""' 4 `""Global" "Enviro""' 5 `""Local" "Enviro""' 6 `""Rebo
> und" "Local""' 7 `""Rebound" "Global""' 8 `"Producers"' 9 `"Total W
> TP"' 11 `""Program" "Cost""' 12 `""FE" "Subsidies""' 13 `""FE" "Tax
> es""' 14 `""FE" "Long-Run""' 15 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 3

. global color_group2_`1' = 7

. global color_group3_`1' = 8

. global cost_color_start_`1' = 11

. global color_group4_`1' = 14

. 
. // global note_`1' = `"Publication: " "SCC: `scc'" "Description: Co
> st curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - 
> `s_def', Grid - `grid_def', Replacement - `replacement_def'," "Grid
>  Model - `grid_model_def', Electricity supply elasticity - `elec_su
> p_elas'"'
. global normalize_`1' = 1

. global note_`1' = `""'

. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000032.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000033.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000034.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/es_incent_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/es_incent_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/es_incent_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/es_incent_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for es_incent under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   State         ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State         ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State         ef_region
1
Specification 1 of 1, program 36 of 100 (esa_fridge)
Number of observations (_N) was 0, now 0.
esa_fridge

. *******************************************************************
> ******************
. /*       0. Program: Refridgerator Rebate Program in Southern Calif
> ornia       */
. *******************************************************************
> ******************
. 
. /*
> Joshua A. Blonz
> "The Costs of Misaligned Incentives: Energy Inefficiency and the Pr
> incipal-Agent Problem" 
> 
> * https://pubs.aeaweb.org/doi/pdfplus/10.1257/pol.20210208
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: esa_fridge no uncorrect
> ed_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals 
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"qualified_kwh"' `"unqualified_kwh"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       73.45           .      73.45      73.
> 45

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       38.02           .      38.02      38.
> 02
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.                 
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
. local avg_rebate = 850 // Table 2

. 
. local years_qualified = ln(1 - 266/(57/0.03)) / -ln(1.03) // From T
> able 3 and the Appendix (pg 34), we can back out the average years 
> they accelerated their replacement. We use the average capital repl
> acement and labor costs and the fact that the annual cost is $57 di
> scounted at a 3% rate  

. 
. local years_unqualified = ln(1 - 333/(57/0.03)) / -ln(1.03) // Same
>  calculation as above

. 
. local prop_marginal = 1 // We assume everyone is temporally changin
> g their purchase decison

. local prop_qualified = 3715 / (3715 + 1261)

. 
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_rebate = `avg_rebate' * (${cpi_`dollar_year'} / ${cpi_${p
> olicy_year}})

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
.  
. local kwh_reduction_q = `qualified_kwh' * 12

. local kwh_reduction_unq = `unqualified_kwh' * 12

. 
. *Need integer years for dynamic grid
. local years_qualified = round(`years_qualified')

. local years_unqualified = round(`years_unqualified')

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. * Consumers
. local inframarginal = (1-`prop_marginal') * `adj_rebate'

. 
. local marginal =  (`prop_marginal' * 0.5 * `adj_rebate')

. 
. * Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local annual_savings_q = (`prop_marginal' * `prop_qualified
> ' * (`kwh_reduction_q' * ${kwh_price_`dollar_year'_${State}}))
.         
.         local annual_savings_unq = (`prop_marginal' * (1 - `prop_qu
> alified') * (`kwh_reduction_unq' * ${kwh_price_`dollar_year'_${Stat
> e}}))
.         
.         local c_savings = `annual_savings_q' + (`annual_savings_q'/
> `discount') * (1 - (1/(1+`discount')^(`years_qualified' - 1))) + `a
> nnual_savings_unq' + (`annual_savings_unq'/`discount') * (1 - (1/(1
> +`discount')^(`years_unqualified' -1)))
. }

. 
. *Producers
. local annual_prod_q = (`prop_marginal' * `prop_qualified' * (`kwh_r
> eduction_q' * ${producer_surplus_`dollar_year'_${State}}))

. 
. local annual_prod_unq = (`prop_marginal' * (1 - `prop_qualified') *
>  (`kwh_reduction_unq' * ${producer_surplus_`dollar_year'_${State}})
> )

. 
. local corporate_loss = (`annual_prod_q' + (`annual_prod_q'/`discoun
> t') * (1 - (1/(1+`discount')^(`years_qualified' - 1))) + `annual_pr
> od_unq' + (`annual_prod_unq'/`discount') * (1 - (1/(1+`discount')^(
> `years_unqualified' - 1)))) * `r'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. * Social Costs
. dynamic_grid `kwh_reduction_q', starting_year(`dollar_year') lifeti
> me(`years_qualified') discount_rate(`discount') ef("`replacement'")
>  type("uniform") geo("${State}") grid_specify("yes") model("${grid_
> model}")

. local local_pollutants_q = `r(local_enviro_ext)'

. local global_pollutants_q = `r(global_enviro_ext)'

. local carbon_q = `r(carbon_content)'

. 
. dynamic_grid `kwh_reduction_unq', starting_year(`dollar_year') life
> time(`years_unqualified') discount_rate(`discount') ef("`replacemen
> t'") type("uniform") geo("${State}") grid_specify("yes") model("${g
> rid_model}")

. local local_pollutants_uq = `r(local_enviro_ext)'

. local global_pollutants_uq = `r(global_enviro_ext)'

. local carbon_unq = `r(carbon_content)'

. 
. local local_pollutants = `prop_marginal' * (`prop_qualified' * `loc
> al_pollutants_q' + ((1 - `prop_qualified') * `local_pollutants_uq')
> )

. local global_pollutants = `prop_marginal' * (`prop_qualified' * `gl
> obal_pollutants_q' + ((1 - `prop_qualified') * `global_pollutants_u
> q'))

. local q_carbon = `prop_marginal' * (`prop_qualified' * `carbon_q' +
>  ((1 - `prop_qualified') * `carbon_unq')) * `r'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate'

. 
. local annual_fe_t_q = (`prop_marginal' * `prop_qualified' * (`kwh_r
> eduction_q' * ${government_revenue_`dollar_year'_${State}}))

. 
. local annual_fe_t_unq = (`prop_marginal' * (1 - `prop_qualified') *
>  (`kwh_reduction_unq' * ${government_revenue_`dollar_year'_${State}
> }))

. 
. local fisc_ext_t = (`annual_fe_t_q' + (`annual_fe_t_q'/`discount') 
> * (1 - (1/(1+`discount')^(`years_qualified' - 1))) + `annual_fe_t_u
> nq' + (`annual_fe_t_unq'/`discount') * (1 - (1/(1+`discount')^(`yea
> rs_unqualified' - 1)))) * `r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

.  
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local fridge_energy_savings = (`prop_qualified' * `kwh_reduction_q'
>  * `energy_cost') + ((`prop_qualified' * (`kwh_reduction_q' * `ener
> gy_cost')) / `discount') * (1 - (1 / (1 + `discount')^(`years_quali
> fied' - 1))) + ///
>                                                           ((1 - `pr
> op_qualified') * (`kwh_reduction_unq' * `energy_cost')) + (((1 - `p
> rop_qualified') * (`kwh_reduction_unq' * `energy_cost')) / `discoun
> t') * (1 - (1 / (1 + `discount')^(`years_unqualified' - 1)))

. 
. local fridge_cost = -184.13454 // difference between ES and non-ES 
> fridge prices

. 
. local resource_cost = `fridge_cost' - `fridge_energy_savings'

. 
. local q_carbon_mck = `q_carbon' / (`prop_marginal' * `r')

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Fridge Rebates (Blonz)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
. 
. 
. di `MVPF'
.95832662

. di `WTP'
992.47422

. di `total_cost'
1035.6325

. di `wtp_society'
523.29861

. di `wtp_private'


. di `prop_inframarginal'


. di `inframarginal'
0

. di `marginal'
512.70967

. 
. di `CE'


. di `carbon_reduction'


. di `fiscal_externality'


. di `program_cost'
1025.4193

. di `corporate_loss'
34.828217

. di `global_pollutants' + `local_pollutants'
650.76048

. di `years_qualified'
5

. di `years_unqualified'
7

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000035.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000036.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000037.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/esa_fridge_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/esa_fridge_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/esa_fridge_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/esa_fridge_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for esa_fridge under current
(4 vars, 5 obs)
spec_type    policy_year  paper_price  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  paper_price  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  paper_price  description
1
Specification 1 of 1, program 37 of 100 (ethanol)
Number of observations (_N) was 0, now 0.
ethanol

. *************************************************************
. /* 1. Program: E85 fuel taxes                                      
>                               */
. *************************************************************
. /*
> Anderson, Soren T.
> "The demand for ethanol as a gasoline substitute." March 2012.
> Journal of Environmental Economics and Management 63(2): 151--168.
> */
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"ethanol_response"'
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      -1.622           .     -1.622     -1.6
> 22
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. * Social Costs. 
. local ghg CO2 CH4 N2O

. foreach g of local ghg {
  2.         
.         local social_cost_`g' = ${sc_`g'_`dollar_year'} * (${cpi_`d
> ollar_year'} / ${cpi_${sc_dollar_year}})
  3.                 
. }       

. 
. local md_u SO2 PM25 NOx VOC NH3 CO

. foreach p of local md_u  {
  2.         
.         local social_cost_`p'_uw = ${md_`p'_`dollar_year'_unweighte
> d} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year}})
  3.         
. }

. 
. // Transform reported point estimate to price elasticity.
. local e_demand_ethanol = (`ethanol_response' / 10) * ((0.10 / 2.37)
> ^(-1))

. // Author reports a $0.10 increase in price of ethanol leads to a 1
> 6.22% decrease (`ethanol_response') in quantity demanded.
. // Translate $0.10 increase to percent change using author's sample
>  average retail E85 price, $2.37, to calculate elasticity.
. 
. *********************************
. /* 3. Calculate Price Difference b/w Gasoline and E85 */
. *********************************
. preserve

. 
.         import excel "${policy_assumptions}", first clear sheet("e8
> 5_prices")
(3 vars, 86 obs)

.                 gen year = year(date)

.                 gen month = month(date)

.         
.         merge 1:1 month year using "${user_specific_assumptions}/fi
> les_v${user_name}/Gasoline Prices, Markups, and Taxes/gas_data_mont
> hly", keep(3) nogen       

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                                81  
    -----------------------------------------

.                 sort date

.         collapse (mean) *_price pct_markup avg_tax_rate [aw=gas_con
> sumption], by(year)

.         
.         keep if year == `dollar_year'
(22 observations deleted)

.                 local ethanol_price = e85_price

.                 
. restore 

. 
. *********************************
. /* 4. Adjust Per-Gallon Gasoline Externality for E85 */
. *********************************
. preserve

. 
.         * Save Ethanol Assumptions.
.         import excel "${policy_assumptions}", first clear sheet("et
> hanol_assumptions")
(3 vars, 29 obs)

.                 levelsof(parameter), local(parameter_loop)
`"CO_change_e10"' `"CO_change_e85"' `"NOx_change_e10"' `"NOx_change_e
> 85"' `"VOC_change_e10"' `"VOC_change_e85"' `"ethanol_CO2_factor"' `
> "ethanol_mpg_penalty"' `"luc_CO2_intensity"' `"mj_per_gal_ethanol"'
>  `"share_ethanol_fuel"' `"upstream_CO2_intensity_2005"' `"upstream_
> CO2_intensity_2006"' `"upstream_CO2_intensity_2007"' `"upstream_CO2
> _intensity_2008"' `"upstream_CO2_intensity_2009"' `"upstream_CO2_in
> tensity_2010"' `"upstream_CO2_intensity_2011"' `"upstream_CO2_inten
> sity_2012"' `"upstream_CO2_intensity_2013"' `"upstream_CO2_intensit
> y_2014"' `"upstream_CO2_intensity_2015"' `"upstream_CO2_intensity_2
> 016"' `"upstream_CO2_intensity_2017"' `"upstream_CO2_intensity_2018
> "' `"upstream_CO2_intensity_2019"' `"upstream_CO2_intensity_2020"' 
> `"upstream_CO2_intensity_2021"' `"upstream_CO2_intensity_2022"'

.                 foreach p of local parameter_loop {
  2.                         
.                         qui sum value if parameter == "`p'"
  3.                                 local `p' = r(mean)
  4.                         
.                 }

. 
.         * Bring in baseline, average gasoline externalities without
>  including ethanol effects.
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Externalities/gasoline_vehicle_externalities_no_ethanol_${scc_i
> nd_name}_${dr_ind_name}.dta", clear

.                 keep if year == `dollar_year'
(32 observations deleted)

.                         drop wtp_upstream_VOC wtp_upstream_CO wtp_V
> OC wtp_CO

.                 
.         *********************************
.         /* 4a. Adjust MPG. */
.         *********************************
.         local gas_mpg = mpg

.         replace mpg = mpg * (1 - `ethanol_mpg_penalty')
(1 real change made)

.                         
.         ***********************************************************
> *
.         /* 4b. Adjust On-Road CO2 Emissions for Ethanol Content. */
.         ***********************************************************
> *    
.         replace wtp_CO2 = (wtp_CO2 * (1 - `share_ethanol_fuel')) + 
> (`share_ethanol_fuel'*`ethanol_CO2_factor'*`social_cost_CO2')
(1 real change made)

.         /* For on-road CO2 and SO2 emissions, we assume emissions a
> re proportional to the share of fuel that remains gasoline. Since E
> 85
>            fuel is 17% gasoline and 83% ethanol, we scale CO2 and S
> O2 emissions down by 0.17 */
.                    
.         ***********************************************************
> **
.         /* 4c. Adjust On-Road Local Emissions for Ethanol Content. 
> */
.         ***********************************************************
> **   
.         local local_adj                 NOx CO VOC

.         foreach p of local local_adj {
  2.                 
.                 if inlist("`p'", "VOC", "CO") {
  3.                         
.                         replace local_`p' = (local_`p' * (1 + ``p'_
> change_e85') * (`share_ethanol_fuel' / 0.801)) // Tests used fuel w
> / 80.1% ethanol, not 83% in E85.
  4.                         replace global_`p' = (global_`p' * (1 + 
> ``p'_change_e85') * (`share_ethanol_fuel' / 0.801)) // Tests used f
> uel w/ 80.1% ethanol, not 83% in E85.
  5.                         
.                 }
  6.                 
.                 if !inlist("`p'", "VOC", "CO") {
  7.                         
.                         replace wtp_`p' = (wtp_`p' * (1 + ``p'_chan
> ge_e85') * (`share_ethanol_fuel' / 0.801))  
  8.                         
.                 }
  9.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                                    
.         ***********************************************************
> **
.         /* 4d. Adjust Upstream Emissions for Ethanol Share. */
.         ***********************************************************
> **           
.         ds *upstream* wtp_CH4 wtp_N2O
wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_N2O
wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m
wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_CH4

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = `var' * (1 - `share_ethanol_fuel')
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         replace wtp_upstream_CO2 = wtp_upstream_CO2 + (((`upstream_
> CO2_intensity_`dollar_year'' + `luc_CO2_intensity')/1000000)*`mj_pe
> r_gal_ethanol'*`social_cost_CO2'*`share_ethanol_fuel')
(1 real change made)

.         /* A gallon of E85 contains ~17% gasoline. Upstream emissio
> ns associated with producing a gallon of ethanol should therefore b
> e
>            proportional to the amount of gasoline needed to produce
>  the gallon of E85 fuel. */  
.                    
.         ***********************************************************
> **
.         /* 4e. Compare Externalities. */
.         ***********************************************************
> **
.         gen fuel_type = "Ethanol"

.                 order fuel_type

.         
.         // Average externality from gallon of gasoline, accounting 
> for share ethanol. 
.         append using "${user_specific_assumptions}/files_v${user_na
> me}/Gasoline Externalities/gasoline_vehicle_externalities_${scc_ind
> _name}_${dr_ind_name}.dta"

.                 keep if year == `dollar_year'
(32 observations deleted)

.                         replace fuel_type = "Gasoline" if fuel_type
>  != "Ethanol"
variable fuel_type was str7 now str8
(1 real change made)

.         assert _N == 2          

.         drop wtp_total wtp_global wtp_local wtp_upstream_VOC wtp_up
> stream_CO wtp_VOC wtp_CO CO2_total share_ethanol

.                 
.         // Checking unadjusted components sum.
.         assert wtp_PM25_exhaust[1] == wtp_PM25_exhaust[2]

.         assert wtp_SO2[1] == wtp_SO2[2]

.         
.         drop wtp_accidents wtp_congestion wtp_PM25_TBW // Assuming 
> same VMT.

.                 
.         local resum    CO VOC

.         foreach p of local resum {
  2.                 
.                 gen wtp_`p' = local_`p' + global_`p' + local_`p'_up
> stream + global_`p'_upstream
  3.                 
.         }

.         
.         // Calculate Total WTP, and Local / Global WTP
.         gen wtp_local = 0

.         foreach val of global damages_local {
  2.                                         
.                 if "`val'" == "NOx" | "`val'" == "SO2" {
  3.                                 
.                         replace wtp_local = wtp_local + wtp_`val' +
>  wtp_upstream_`val'
  4.                                 
.                 }
  5.                         
.                 if "`val'" == "PM25" {
  6.                                 
.                         replace wtp_local =     wtp_local + wtp_ups
> tream_`val' + wtp_`val'_exhaust // Do NOT want to include driving e
> xternalities.
  7.                                 
.                 }
  8.                         
.                 if "`val'" == "NH3" {
  9.                                 
.                         replace wtp_local =     wtp_local + wtp_ups
> tream_`val' 
 10.                                 
.                 }
 11.                         
.                 if "`val'" == "local_VOC"| "`val'" == "local_CO" {
 12.                                 
.                         replace wtp_local =     wtp_local + `val' +
>  `val'_upstream
 13.                                 
.                 }
 14. 
.                 if "`val'" == "accidents" | "`val'" == "congestion"
>  {
 15.                                 
.                         replace wtp_local = wtp_local // Do NOT wan
> t to include driving externalities.
 16.                                 
.                 }       
 17.         }
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)

. 
.         gen wtp_global = 0 

.         foreach val of global damages_global {
  2.                         
.                 if !inlist("`val'", "global_VOC", "global_CO") {
  3.                                 
.                         replace wtp_global = wtp_global + wtp_`val'
>  + wtp_upstream_`val'
  4.                                 
.                 }
  5.                 else {
  6.                                 
.                         replace wtp_global = wtp_global + `val' + `
> val'_upstream
  7.                                 
.                 }
  8.                 
.         }
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)

. 
.         assert round(wtp_local[2], 0.001) == round(${gas_ldv_ext_lo
> cal_no_vmt_`dollar_year'}, 0.001)

.         assert round(wtp_global[2], 0.001) == round(${gas_ldv_ext_g
> lobal_`dollar_year'}, 0.001)

.         
.         gen wtp_total = wtp_local + wtp_global

.         keep fuel_type year mpg wtp_total wtp_local wtp_global

.         
.         di in red wtp_total[1]
1.2549463

.         di in red wtp_global[1]
1.0947688

.         di in red wtp_local[1]
.16017752

.                 
.         ***********************************************************
> **
.         /* 4f. Adjust Quantity Differences and Compare. */
.         ***********************************************************
> **
.         gen price = .
(2 missing values generated)

.                 replace price = ${nominal_gas_price_`dollar_year'} 
> if fuel_type == "Gasoline"
(1 real change made)

.                 replace price = `ethanol_price' if fuel_type == "Et
> hanol"       
(1 real change made)

.         gen spending = price

.                 
.         gen tax = ${nominal_gas_tax_`dollar_year'} 

.         gen markup = price * (${nominal_gas_markup_`dollar_year'} /
>  ${nominal_gas_price_`dollar_year'}) // Assume same pct markup b/w 
> E85 and gasoline.

.                 di in red "Markup Pct is ${nominal_gas_markup_`doll
> ar_year'} / ${nominal_gas_price_`dollar_year'}"
Markup Pct is .6125684213945165 / 2.274412131502341

.                 
.         ds wtp* spending tax markup
wtp_local   wtp_total   tax
wtp_global  spending    markup

.         foreach var in `r(varlist)' {
  2.                 
.                 assert fuel_type == "Gasoline" if _n == 2
  3.                 
.                 local old_var = `var'[1]
  4.                 
.                 replace `var' = `var' * (mpg[2] / mpg[1]) if _n == 
> 1
  5.                         assert round(`old_var' / (1 - `ethanol_m
> pg_penalty'), 0.0001) == round(`var', 0.0001) if _n == 1
  6.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         local soc_l = (wtp_local[1] - wtp_local[2]) 

.         local soc_g = (wtp_global[1] - wtp_global[2]) 

.         
.                 di in red `soc_l'
-.00628316

.                 di in red `soc_g'
-.39092765

.                 di in red `soc_l' + `soc_g'
-.39721081

.                         
.                 di in red "Per-Dollar"
Per-Dollar

.                 di in red (`soc_l' + `soc_g') / price[1]
-.15154734

.                                                 
.         local tax_difference = tax[1] - tax[2]  

.                 di in red `tax_difference'
.17193822

.                 di in red `tax_difference' / `ethanol_price'
.06559937

.                 assert `tax_difference' > 0

.         local markup_difference = markup[1] - markup[2]

.                 di in red `markup_difference'
.3544513

.                 di in red `markup_difference' / `ethanol_price'
.13523336

.                 assert `markup_difference' > 0 

.                                 
. restore         

.                 
. ****************************************************
. /* 5. Calculate Components */
. ****************************************************
. local semi_e_demand_ethanol = `e_demand_ethanol' / `ethanol_price' 

.         assert `semi_e_demand_ethanol' < 0

.         // Elasticity from the fact that a $0.10 increase in price 
> differential leads to a 16.2% decline in ethanol consumption. 
. 
. local wtp_soc_global = `soc_g' * `semi_e_demand_ethanol'

. local wtp_soc_local = `soc_l' * `semi_e_demand_ethanol' 

.         local wtp_soc = `wtp_soc_local' + `wtp_soc_global'

.                 assert round(`wtp_soc', 0.01) == round(`wtp_soc_loc
> al' + `wtp_soc_global', 0.01)

.                 assert `wtp_soc' >= 0 // Positive WTP since ethanol
>  is cleaner than gasoline in our analysis.

.         
. local wtp_consumers = 1

. 
. * Producers
. local wtp_producers = -(`markup_difference')*`semi_e_demand_ethanol
> '*(1 - ${gasoline_effective_corp_tax})

.         assert `wtp_producers' >= 0 

.         /* Producers want you to remove the tax b/c they benefit fr
> om people consuming more gallons of E85;
>            same percent markup on E85 and gasoline, but E85 require
> s more ethanol consumed to travel same distance. 
>            Price of E85 also higher. */
.         
. local fisc_ext_prod = (`markup_difference')*`semi_e_demand_ethanol'
> *(${gasoline_effective_corp_tax})

.         assert `fisc_ext_prod' <= 0 // Lowers cost to government re
> moving tax b/c gain revenue from 

.         
.         
. if "${value_profits}" == "no" {
.         
.         local wtp_producers = 0 // Includes utilities and gas compa
> nies' profits. 
.         local fisc_ext_prod = 0
.         
. }

. 
. local total_WTP = `wtp_consumers' + (`wtp_soc_global'*(1 - (${USSha
> reFutureSSC} * ${USShareGovtFutureSCC}))) + `wtp_soc_local' + `wtp_
> producers'        

.         di in red `total_WTP'
1.9822728

. 
. local WTP_USPres = `wtp_consumers' + `wtp_producers' + `wtp_soc_loc
> al' 

. local WTP_USFut = `wtp_soc_global' * (${USShareFutureSSC} - (${USSh
> areFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1-(${USShareFutureSSC})) * `wtp_soc_global' 

. 
. **************************
. /* 6. MVPF Calculations */
. **************************
. 
. local program_cost = 1

.         local fiscal_externality_lr = `wtp_soc_global' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

.                 assert `fiscal_externality_lr' >= 0

.                 
.         local fiscal_externality_tax = (`tax_difference' * `semi_e_
> demand_ethanol') + `fisc_ext_prod'

.                 assert (`tax_difference' * `semi_e_demand_ethanol')
>  <= 0

.                 assert `fisc_ext_prod' <= 0

.                 
.                 di in red (`tax_difference' * `semi_e_demand_ethano
> l')
-.25217317

.                 di in red `fisc_ext_prod'
-.10916975

.                 
.                 di in red `wtp_soc_global'
.57335398

.                 di in red `fiscal_externality_lr'                  
>      
.0109826

.         
. local total_cost = `program_cost' + `fiscal_externality_tax' + `fis
> cal_externality_lr'

. 
. local MVPF = `total_WTP'/`total_cost'

. di in red "`MVPF'"
3.051341913561449

. 
.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`tota
> l_cost', 0.1) == round(`MVPF', 0.1)  

. 
. *********************************
. /* 7. Save Results and Waterfalls */
. *********************************
. global MVPF_`1' = `MVPF'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = `wtp_soc_local' + (`wtp_soc_global'*(1 - (${US
> ShareFutureSSC} * ${USShareGovtFutureSCC})))

.         global wtp_soc_l_`1' = `wtp_soc_local'

.         global wtp_soc_g_`1' = (`wtp_soc_global'*(1 - (${USShareFut
> ureSSC} * ${USShareGovtFutureSCC})))

.                 
.  
. global wtp_cons_`1' = `wtp_consumers'

. 
. global wtp_prod_`1' = `wtp_producers'

.         global wtp_prod_s_`1' = `wtp_producers'

.         global wtp_prod_u_`1' = 0

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == ///
>                 round(${wtp_cons_`1'} + ${wtp_prod_`1'} + ${wtp_soc
> _`1'}, 0.0001) 

. 
. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fiscal_externality_tax'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000038.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000039.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003a.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ethanol_current_estimates_0_replicat
    > ions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ethanol_current_estimates_0_replicat
    > ions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ethanol_current_unbounded_estimates_
    > 0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ethanol_current_unbounded_estimates_
    > 0_replications.dta saved
Finished running for ethanol under current
(2 vars, 5 obs)
spec_type    policy_year

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year
1
Specification 1 of 1, program 38 of 100 (ets)
Number of observations (_N) was 0, now 0.
ets

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* Bayer, Patrick, and Michael Aklin. 2020. 
> "The European Union Emissions Trading System reduced CO2 emissions 
> despite low prices."
> Proceedings of the National Academy of Sciences 117(16):8804-8812. 
> https://doi.org/10.1073/pnas.1918128117
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1     -1219.5           .    -1219.5    -1219
> .5
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         local total_delta_CO2 = `ets_CO2_abated' * 1000000 // From 
> paper; millions of tons to total tons. 

. 
.         import excel "${policy_assumptions}", first clear sheet("ET
> S_C&T_data")
(3 vars, 19 obs)

. 
.         egen q = total(allowances_auctioned) if inrange(year, 2008,
>  ${policy_year})
(10 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                         
.         gen real_annual_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018
>  2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_annual_price = annual_price * (${cpi_`
> dollar_year'}/${cpi_`y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         qui sum real_annual_price [aw = allowances_auctioned] if in
> range(year, 2008, ${policy_year}) 

.                 local baseline_price = r(mean)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_annual_price if year == `dollar_year' 
.                         local permit_price = r(mean)
.                 
.         }       

. 
.         local semie = (`baseline_price' / `total_delta_CO2') * `per
> mit_q'

. 
. ****************************************************
. /* 3. Social Costs */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_ye
> ar'} / ${cpi_${sc_dollar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carb
> on.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inran
> ge(year, 2008, ${policy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year 
> == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

.         
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.                 local wtp_permits = `wtp_permits_grandfathered' + `
> wtp_permits_auctioned'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  6.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + (`wtp_soc
> _g'*(1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_pr
> oducers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}) * -1      

. local total_cost = `permit_revenue' + `fiscal_externality' + `fisca
> l_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost'  

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`tota
> l_cost', 0.01) == round(`MVPF', 0.01)

.         
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})))

. global wtp_soc_g_`1'  = `wtp_soc_g'* (1 - (${USShareFutureSSC} * ${
> USShareGovtFutureSCC}))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global gov_carbon_`1' = `total_delta_CO2'

. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `total_delta_CO2')

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
(1 real change made)
wtp_abatement
(1 real change made)
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003b.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003c.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003d.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_current_estimates_0_replications
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_current_estimates_0_replications
    > .dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_current_unbounded_estimates_0_re
    > plications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_current_unbounded_estimates_0_re
    > plications.dta saved
Finished running for ets under current
(2 vars, 5 obs)
spec_type    policy_year

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year
1
Specification 1 of 1, program 39 of 100 (ets_c)
Number of observations (_N) was 0, now 0.
ets_c

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* 
> Colmer, Jonathan, Ralf Martin, Mirabelle Muuls, and Ulrich J. Wagne
> r. 2024.
> "Does Pricing Carbon Mitigate Climate Change? Firm-Level Evidence f
> rom the European Trading System"
> Review of Economic Studies 00: 1--36. 
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated_pct"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .1515           .      .1515      .15
> 15
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         import excel "${policy_assumptions}", first clear sheet("ET
> S_C&T_data")
(3 vars, 19 obs)

.         
.         gen real_permit_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018
>  2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_permit_price = annual_price * (${cpi_`
> dollar_year'}/${cpi_`y'}) if year == `y'
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         qui sum real_permit_price [aw = allowances_auctioned] if in
> range(year, 2005, ${policy_year})

.                 local baseline_price = r(mean)

. 
. 
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseli
> ne_gen" {
.                 
.                 local permit_price = `baseline_price'
.                 
.         }

. 
.         if "${spec_type}" == "current"{
.                 
.                 qui sum real_permit_price if year == `dollar_year'
.                         local permit_price = r(mean)
.                 
.         }

. 
.         local dp_dlogq = `baseline_price' / `ets_CO2_abated_pct'

. 
. ****************************************************
. /* 3. Import Social Costs and Marginal Damages */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_ye
> ar'} / ${cpi_${sc_dollar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carb
> on.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inran
> ge(year, 2005, ${policy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year 
> == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = `dp_dlogq'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = `dp_dlogq'
.                 local wtp_permits = `wtp_permits_grandfathered' + `
> wtp_permits_auctioned'
.                 assert `wtp_permits' > 0
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 assert `wtp_`p'' < 0 // Soc. WTP negative for reven
> ue-raising policies.
  6.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  7.                         assert `wtp_soc' < 0
  8.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.                 assert round(`wtp_soc_g' + `wtp_soc_l', 0.00001) ==
>  round(`wtp_soc', 0.00001)
.         
.         local total_WTP = `wtp_producers' + (`wtp_soc'*(1 - (${USSh
> areFutureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

.         assert `WTP_USPres' == 0

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_pr
> oducers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}) * -1

.         assert `fiscal_externality_lr' >= 0 

.         
. local total_cost = `permit_revenue' + `fiscal_externality' + `fisca
> l_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost' // finite MVPF

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`tota
> l_cost', 0.01) == round(`MVPF', 0.01)

. 
. 
. di in red `total_WTP'
-41.243017

. di in red `total_cost'
133.22698

. di in red `MVPF'
-.30956955

. 
. di in red `WTP_RoW'
-15.989932

. di in red `WTP_USFut'
-25.253085

. di in red `WTP_USPres'
0

. 
. di in red `wtp_permits'
148.06007

. 
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = `wtp_soc_g' * (1 - (${USShareFutureSSC} * ${US
> ShareGovtFutureSCC}))

. global wtp_soc_g_`1'  = `wtp_CO2' * (1 - (${USShareFutureSSC} * ${U
> SShareGovtFutureSCC}))

. 
. global dp_dq_`1' = `dp_dlogq'

. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_s_`1' = 0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global semie_`1' = `dp_dlogq'

. global permit_price_`1' = `permit_price'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
(1 real change made)
wtp_abatement
(1 real change made)
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003e.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003f.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003g.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_c_current_estimates_0_replicatio
    > ns.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_c_current_estimates_0_replicatio
    > ns.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_c_current_unbounded_estimates_0_
    > replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ets_c_current_unbounded_estimates_0_
    > replications.dta saved
Finished running for ets_c under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 40 of 100 (federal_ev)
Number of observations (_N) was 0, now 0.
federal_ev

. *******************************************************************
> ******************
. /*       0. Program: Federal Income Tax Credit for EV Buyers       
>   */
. *******************************************************************
> ******************
. 
. /*
> Li, Shanjun, Lang Tong, Jianwei Xing, and Yiyi Zhou. 
> "The market for electric vehicles: indirect network effects and pol
> icy design." 
> Journal of the Association of Environmental and Resource Economists
>  4, no. 1 (2017): 89-133.
> * https://www.journals.uchicago.edu/doi/full/10.1086/689702
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: federal_ev no uncorrect
> ed_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local dynamic_grid = 1

. local static_grid = 0

. 
. local want_rebound = 1

. 
. local elec_dem_elas = -0.190144

. local elec_sup_elas = 0.7806420154513118

. 
. local bev_cf = "${bev_cf}"

. local veh_lifespan_type = substr("${bev_cf}", strpos("${bev_cf}", "
> _") + 1, .)

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"EV_increase"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .4044           .      .4044      .40
> 44

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. EV Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         forvalues y = 2011(1)2013{
  2.                 qui sum total_sales if year == `y'
  3.                 local total_sales`y' = r(mean)
  4.         }

.         if "`4'" == "baseline"{
.                 keep if year >= 2011 & year <= 2013
.                 forvalues y = 2011(1)2013{
  2.                         qui sum total_sales if year == `y'
  3.                         local total_sales`y' = r(mean)
  4.                         qui sum cf_mpg if year == `y'
  5.                         local cf_mpg_`y' = r(mean)
  6.                 }
.                 local ev_cf_mpg = (`total_sales2011' * `cf_mpg_2011
> ' + `total_sales2012' * `cf_mpg_2012' + `total_sales2013' * `cf_mpg
> _2013') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013')
.         }

.         else{
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum cf_mpg
.                 local ev_cf_mpg = r(mean)
.         }

. restore

. 
. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                 
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                 
.         keep if year==${run_year}
(56 observations deleted)

.         
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.                                         
.         if "${spec_type}" == "baseline" {
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if inrange(year, 2011, 2013)
.                 * Li et al. 2017 look at BEV rebates for 2011 throu
> gh 2013 
.                                                 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) 
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
.                         
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1 
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes. 
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. EV Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs")

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. EV Energy Consumption Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         if "`4'" == "baseline"{
.                 forvalues y = 2011(1)2013{
  2.                         qui sum avg_kwh_per_mile if year == `y'
  3.                         local kwh_per_mile`y' = r(mean)
  4.                         qui sum avg_batt_cap if year == `y'
  5.                         local batt_cap`y' = r(mean)
  6.                 }
. 
.                 local kwh_per_mile = (`total_sales2011' * `kwh_per_
> mile2011' + `total_sales2012' * `kwh_per_mile2012' + `total_sales20
> 13' * `kwh_per_mile2013') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013')
.                 local batt_cap = (`total_sales2011' * `batt_cap2011
> ' + `total_sales2012' * `batt_cap2012' + `total_sales2013' * `batt_
> cap2013') ///
>                                                         / (`total_s
> ales2011' + `total_sales2012' + `total_sales2013')
.         }

.         else{
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_kwh_per_mile
.                 local kwh_per_mile = r(mean)
.                 qui sum avg_batt_cap
.                 local batt_cap = r(mean)
.         }

. restore

. 
. 
. ****************************************************
. /*                  3e. EV Price Data             */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         forvalues y = 2011(1)2013{
  2.                 replace avg_msrp = avg_msrp * (${cpi_2011} / ${c
> pi_`y'}) if year == `y'
  3.                 qui sum avg_msrp if year == `y'
  4.                 local msrp`y' = r(mean)
  5.         }
(0 real changes made)
(1 real change made)
(1 real change made)

.         * calculating fixed price in paper's sample period for use 
> in calculating a constant elasticity
.         local elas_msrp = (`total_sales2011' * `msrp2011' + `total_
> sales2012' * `msrp2012' + `total_sales2013' * `msrp2013') ///
>                                         / (`total_sales2011' + `tot
> al_sales2012' + `total_sales2013')

.         if "`4'" == "baseline"{
.                 local msrp = `elas_msrp'
.         }

.         else{
.                 use "${assumptions}/evs/processed/kwh_msrp_batt_cap
> .dta", clear
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_msrp
.                 local msrp = r(mean) * (${cpi_`dollar_year'} / ${cp
> i_${run_year}})
.         }

. restore

. 
. ****************************************************
. /* 3f. EV and ICE Age-Level VMT Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/ev_vmt_by_age", clear

.         local ub = `lifetime'

.         sort age

.         forvalues y = 1(1)`ub'{
  2.                 local ev_miles_traveled`y' = vmt[`y']
  3.         }

.  restore

. 
. preserve

.         use "${assumptions}/evs/processed/ice_vmt_by_age", clear

.         keep age vmt    

.         local ub = `lifetime'

.         sort age

.         forvalues y = 1(1)`ub'{
  2.                 local ice_miles_traveled`y' = vmt[`y'] * ${EV_VM
> T_car_adjustment}
  3.         }

. restore

. 
. ** Fixing EVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local ev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. 
. ****************************************************
. /* 3i. Grid Emissions Data */
. ****************************************************
. if "${replacement}" == "marginal"{
.         local emit uniform
. }

. if "${replacement}" == "average"{
.         local emit kwh
. }

. preserve

.         if "`4'" == "baseline_gen" | "`4'" == "baseline"{
.                 local local_grid_factor = ${local_`emit'_US_`dollar
> _year'}
.                 local global_grid_factor = ${global_`emit'_US_`doll
> ar_year'}
.         }

.         else if "`4'" == "current"{
.                 local local_grid_factor = ${local_`emit'_US_`dollar
> _year'}
.                 local global_grid_factor = ${global_`emit'_US_`doll
> ar_year'}
.         }

. restore

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/cyl_batt_costs_combined",
>  clear

. if "`4'" == "baseline"{
.         forvalues y = 2011(1)2013{ 
  2.                 qui sum prod_cost_2018 if year == `y'
  3.                 local prod_cost`y' = r(mean)
  4.         }
.                 local prod_cost = (`total_sales2011' * `prod_cost20
> 11' + `total_sales2012' * `prod_cost2012' + `total_sales2013' * `pr
> od_cost2013') ///
>                                                 / (`total_sales2011
> ' + `total_sales2012' + `total_sales2013')
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

.         else{
.                 keep if year == `dollar_year'
(31 observations deleted)
.                 qui sum prod_cost_2018
.                 local prod_cost = r(mean)
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

. restore

. 
. ****************************************************
. /* 3i. Subsidy Levels */
. ****************************************************
. preserve

.         local elas_avg_state_subsidy = 1575 // from Li et al. Table
>  1

.         if "`4'" == "baseline"{
.                 local avg_state_subsidy = `elas_avg_state_subsidy'
.         }

.         else{
.                 use "${assumptions}/evs/processed/bev_fed_subsidy_d
> ata", clear
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum subsidy_weighted_avg
.                 local avg_fed_subsidy = r(mean)
. 
.                 local avg_state_subsidy = 604.27 // see NST-EST2023
> -POP spreadsheet
.         }

.         if "${ev_fed_subsidy}" != ""{
.                 if ${ev_fed_subsidy} != -1 {
.                         local avg_fed_subsidy = ${ev_fed_subsidy}
.                 }
.         }

. restore

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$
. 
. local ep_rebate_cost = 924200000

. 
. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 924200000 // Income tax credit to EV bu
> yers 2011-2013 (pg 124), double check the dollar years for this num
> ber
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 924200000 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'}/${cpi
> _${policy_year}})

. local total_EV_sales = 140195 // Observed EV increase 2011-2013 (Li
>  et al. 2017 Table 9)

. local avg_subsidy = `adj_rebate_cost' / `total_EV_sales'

. local elas_avg_subsidy = `rebate_cost' / `total_EV_sales' // federa
> l subsidy, always want this in the policy year's dollars

. 
. * Counterfactual EV sales in absense of subsidy (Li et al. Table 9)
. local counterfactual_sales = (1 - `EV_increase') * `total_EV_sales'

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_fed_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_fed_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_state_subsidy' - 0.5 
> * `elas_avg_subsidy'

. 
. local ep_adj_rebate_cost = `ep_rebate_cost' * (${cpi_2011} / ${cpi_
> ${policy_year}})

. local ep_avg_subsidy = `ep_adj_rebate_cost' / `total_EV_sales'

. local epsilon = (`EV_increase' / (-`ep_avg_subsidy' / `net_elas_msr
> p'))

. 
. local net_msrp = `msrp' - `avg_state_subsidy' - `avg_subsidy'

. 
. local total_subsidy = `avg_subsidy' + `avg_state_subsidy'

. local semie = -`epsilon' / `net_msrp'

. * fraction inframarginal
. local prop_inframarginal = `counterfactual_sales'/`total_EV_sales'

. local prop_marginal = 1 - `prop_inframarginal'

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie' // positive
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `prop_marginal'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * utility companies
. local util_gov_revenue ${government_revenue_`dollar_year'_${State}}

. local util_producer_surplus ${producer_surplus_`dollar_year'_${Stat
> e}}

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. local utility_fisc_ext = 0

. forvalues y = 1(1)`ub'{
  2.         local utility_fisc_ext = `utility_fisc_ext' + (`beh_resp
> onse' * `ev_miles_traveled`y'' * `kwh_per_mile' * `util_gov_revenue
> ') / ((1 + `discount')^(`y' - 1)) // gain in profit tax from highte
> r utility profits + gain in gov revenue since 28% of utilities are 
> publicly owned
  3. }

. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * `tax_rate') / ((
> 1+`discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = `beh_response' * ${`bev_cf'_cf_gas_fis
> c_ext_`dollar_year'}
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local state_fisc_ext = `beh_response' * `avg_state_subsidy'

. local avg_state_subsidy_n = `avg_state_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. local avg_subsidy_n = `avg_subsidy' / `net_msrp'

. 
. if `marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `state_fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `state_fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = 1

. 
. * marginal and inframarginal consumers
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_u = 0

. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         if "`4'" == "baseline"{
.                 local tot_gal = (${`bev_cf'_gal_2011} * `total_sale
> s2011' + ${`bev_cf'_gal_2012} * `total_sales2012' + ${`bev_cf'_gal_
> 2013} * `total_sales2013') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
> ) // for Latex
.                 local gas_markup = (${nominal_gas_markup_2011} * ($
> {cpi_${dollar_year}} / ${cpi_2011}) * `total_sales2011' + ${nominal
> _gas_markup_2012} * (${cpi_${dollar_year}} / ${cpi_2012}) * `total_
> sales2012' + ${nominal_gas_markup_2013} * (${cpi_${dollar_year}} / 
> ${cpi_2013}) * `total_sales2013') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
> ) // for Latex
. 
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * (`producer_p
> rice' - `producer_mc')) / ((1 + `discount')^(`y' - 1))) // positive
  3.                 }
.         }
. 
.         else{
.                 local tot_gal = ${`bev_cf'_gal_`dollar_year'} // fo
> r Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * ${`bev_cf'_wtp_
> prod_s_`dollar_year'}
. 
.         }
. 
.         * producers - utilities
.         local wtp_prod_u = 0
.         local tot_kwh = 0
. 
.         forvalues y = 1(1)`ub'{
  2.                 local tot_kwh = `tot_kwh' + (`ev_miles_traveled`
> y'' * `kwh_per_mile') // for Latex
  3.                 local wtp_prod_u = `wtp_prod_u' + ((`beh_respons
> e' * (`ev_miles_traveled`y'' * `kwh_per_mile') * `util_producer_sur
> plus') / ((1 + `discount')^(`y' - 1)))
  4.         }
. }

. 
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. local profits_fisc_e = `gas_corp_fisc_e' - `utility_fisc_ext' 

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' - `wtp_prod_s' + `wtp_prod_u
> '
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' - `wtp_prod_s' +
>  `wtp_prod_u'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a battery electric vehicle
. 
. if "`4'" == "baseline"{
. 
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         local ev_first_damages_g = (${ev_first_damages_g_2011} * `t
> otal_sales2011' + ${ev_first_damages_g_2012} * `total_sales2012' + 
> ${ev_first_damages_g_2013} * `total_sales2013') / (`total_sales2011
> ' + `total_sales2012' + `total_sales2013')
.         local q_carbon_yes_ev = `beh_response' * ((${yes_ev_carbon_
> content_2011} * `total_sales2011' + ${yes_ev_carbon_content_2012} *
>  `total_sales2012' + ${yes_ev_carbon_content_2013} * `total_sales20
> 13') / (`total_sales2011' + `total_sales2012' + `total_sales2013'))
.         local q_carbon_yes_ev_mck = `q_carbon_yes_ev' / `beh_respon
> se'
. 
.         local total_bev_damages_glob = (${yes_ev_damages_global_no_
> r_2011} * `total_sales2011' + ${yes_ev_damages_global_no_r_2012} * 
> `total_sales2012' + ${yes_ev_damages_global_no_r_2013} * `total_sal
> es2013') / (`total_sales2011' + `total_sales2012' + `total_sales201
> 3') // for Latex
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -((${yes_ev_damages_local_n
> o_r_2011} * `total_sales2011' + ${yes_ev_damages_local_no_r_2012} *
>  `total_sales2012' + ${yes_ev_damages_local_no_r_2013} * `total_sal
> es2013') / (`total_sales2011' + `total_sales2012' + `total_sales201
> 3')) / `net_msrp' // for Latex
.         
.         local wtp_yes_ev_local = -`beh_response' * ((${yes_ev_damag
> es_local_2011} * `total_sales2011' + ${yes_ev_damages_local_2012} *
>  `total_sales2012' + ${yes_ev_damages_local_2013} * `total_sales201
> 3') / (`total_sales2011' + `total_sales2012' + `total_sales2013'))
.         local wtp_yes_ev_global_tot = -`beh_response' * ((${yes_ev_
> damages_global_2011} * `total_sales2011' + ${yes_ev_damages_global_
> 2012} * `total_sales2012' + ${yes_ev_damages_global_2013} * `total_
> sales2013') / (`total_sales2011' + `total_sales2012' + `total_sales
> 2013'))
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. }

. 
. ** now using Aidan's cleanly calculated externality values
. else{
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         local total_bev_damages_glob = ${yes_ev_damages_global_no_r
> _`dollar_year'} // for Latex
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -${yes_ev_damages_local_no_
> r_`dollar_year'} / `net_msrp' // for Latex
.         if "${latex}" == "yes"{
.                 local ev_first_damages_g = ${ev_first_damages_g_202
> 0} // for Latex
.         }
. 
.         local wtp_yes_ev_local = -`beh_response' * ${yes_ev_damages
> _local_no_r_`dollar_year'}
.         local wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev_da
> mages_global_no_r_`dollar_year'}
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local q_carbon_yes_ev = -`beh_response' * ${yes_ev_carbon_c
> ontent_`dollar_year'}
.         local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_`dolla
> r_year'}
. }

. 
. local yes_ev_local_ext = `wtp_yes_ev_local' / `beh_response'

. local yes_ev_global_ext_tot = `wtp_yes_ev_global_tot' / `beh_respon
> se'

. local wtp_yes_ev = `wtp_yes_ev_local' + `wtp_yes_ev_g'

. 
. 
. local yes_ev_ext = `wtp_yes_ev' / `beh_response'

. 
. ** Calculating the gallons used in the first year of a vehicle's li
> fetime for Latex
. preserve

. 
.         if "`4'" == "baseline"{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 forvalues y = 2011(1)2014{
  2.                         qui sum `bev_cf'_mpg if year == `y'
  3.                         local cf_mpg_`y' = `r(mean)'
  4. 
.                         local gas_consumed_year_one_`y' = `vmt_age_
> 1' / `cf_mpg_`y''
  5.                 }
. 
.                 local gas_consumed_year_one = (`gas_consumed_year_o
> ne_2011' * `total_sales2011' + `gas_consumed_year_one_2012' * `tota
> l_sales2012' + `gas_consumed_year_one_2013' * `total_sales2013') //
> /
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
> )
. 
.         }

. 
.         else{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 qui sum `bev_cf'_mpg if year == 2020
.                 local cf_mpg_2020 = `r(mean)'
. 
.                 local gas_consumed_year_one = `vmt_age_1' / `cf_mpg
> _2020'
.         }

. 
. restore

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. if "`4'" == "baseline"{
.         local wtp_no_ice_local = `beh_response' * ((${`bev_cf'_cf_d
> amages_loc_2011} * `total_sales2011' + ${`bev_cf'_cf_damages_loc_20
> 12} * `total_sales2012' + ${`bev_cf'_cf_damages_loc_2013} * `total_
> sales2013') /// 
>                                                                    
>                              / (`total_sales2011' + `total_sales201
> 2' + `total_sales2013'))
.                                                         
.         local wtp_no_ice_global_tot = `beh_response' * ((${`bev_cf'
> _cf_damages_glob_2011} * `total_sales2011' + ${`bev_cf'_cf_damages_
> glob_2012} * `total_sales2012' + ${`bev_cf'_cf_damages_glob_2013} *
>  `total_sales2013') ///
>                                                                    
>                              / (`total_sales2011' + `total_sales201
> 2' + `total_sales2013'))
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
. 
.         local q_carbon_no_ice = `beh_response' * ((${`bev_cf'_cf_ca
> rbon_2011} * `total_sales2011' + ${`bev_cf'_cf_carbon_2012} * `tota
> l_sales2012' + ${`bev_cf'_cf_carbon_2013} * `total_sales2013') / (`
> total_sales2011' + `total_sales2012' + `total_sales2013'))
.         local q_carbon_no_ice_mck = `q_carbon_no_ice' / `beh_respon
> se'
. }

. else{
.         local wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_dam
> ages_loc_`dollar_year'}
.         local wtp_no_ice_global_tot = `beh_response' * ${`bev_cf'_c
> f_damages_glob_`dollar_year'}
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
.         local q_carbon_no_ice = `beh_response' * ${`bev_cf'_cf_carb
> on_`dollar_year'}
.         local q_carbon_no_ice_mck = ${`bev_cf'_cf_carbon_`dollar_ye
> ar'}
. }

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions, 59.5 kg CO2eq/kWh for NMC111 b
> atteries ***
. 
. * Averaging the SCC for 2011-2013
. if "`4'" == "baseline"{
.         local relevant_scc = (${sc_CO2_2011} * `total_sales2011' + 
> ${sc_CO2_2012} * `total_sales2012' + ${sc_CO2_2013} * `total_sales2
> 013') ///
>                                                                    
>        / (`total_sales2011' + `total_sales2012' + `total_sales2013'
> )
. }

. else{
.         local relevant_scc = ${sc_CO2_`dollar_year'}
. }

. 
. local batt_emissions = 59.5 * `batt_cap' // for Latex

. 
. local batt_damages = `batt_emissions' * 0.001 * `relevant_scc'

. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_ev' + `wtp_no_ice' - `batt_man_ext'

. local wtp_glob = `wtp_yes_ev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_ev_local' + `wtp_no_ice_local'

. 
. if `want_rebound' == 1{
.         ** rebound effect
.         local rbd_coeff = (1 / (1 - (`elec_dem_elas'/`elec_sup_elas
> ')))
.         local wtp_soc_rbd =  -(1 - `rbd_coeff') * `wtp_yes_ev'
.         local wtp_soc_rbd_l = -(1 - `rbd_coeff') * `wtp_yes_ev_loca
> l'
.         local wtp_soc_rbd_global_tot = -(1 - `rbd_coeff') * `wtp_ye
> s_ev_global_tot'
.         local wtp_soc_rbd_g = -(1 - `rbd_coeff') * `wtp_yes_ev_g'
.         
.         local q_carbon_rbd = -(1 - `rbd_coeff') * `q_carbon_yes_ev'
.         local q_carbon_rbd_mck = -(1 - `rbd_coeff') * `q_carbon_yes
> _ev_mck'
.         
.     * Adding the rebound effect to the utility producer WTP
.     local wtp_private = `wtp_private' - (1 - `rbd_coeff') * `wtp_pr
> od_u'
.         local wtp_prod_u = `rbd_coeff' * `wtp_prod_u' 
. 
.         * Adding the rebound effect to the utility fiscal externali
> ty
.         local total_cost = `total_cost' + (1 - `rbd_coeff') * `util
> ity_fisc_ext'
.         local utility_fisc_ext =  `utility_fisc_ext' - (1 - `rbd_co
> eff') * `utility_fisc_ext' // rebound makes the utility fe smaller
.     
. }

. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_ev_local') 
> / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_e
> v_global_tot') / `beh_response'

. 
. local enviro_ext = `wtp_soc' / `beh_response'

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.         local lbd_cf = ("`bev_cf'" == "new_car")
.         ** --------------------- COST CURVE --------------------- *
> *
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') ///
>                                                    curr_prod(`marg_
> sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_local) //
> /
>                                                    start_year(`doll
> ar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_c
> ar_adjustment}) ev_grid(${ev_grid})
.         local dyn_enviro_local = `r(enviro_mvpf)' // no scaling bec
> ause federal_ev is us-wide and no year averaging in other policies'
>  baseline spec
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') ///
>                                                    curr_prod(`marg_
> sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_global) /
> //
>                                                    start_year(`doll
> ar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_c
> ar_adjustment}) ev_grid(${ev_grid})
.         local dyn_enviro_global_tot = `r(enviro_mvpf)'
.         local dyn_enviro_global = `dyn_enviro_global_tot' * ((1 - $
> {USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutur
> eSCC}))
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost'
.                 local env_cost_wtp = (`dyn_enviro_local' + `dyn_env
> iro_global') * `program_cost'
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost'
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost'
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost'
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_ev' + `q_carbon_
> rbd'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_ev_mck' 
> + `q_carbon_rbd_mck'

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_ev_glo
> bal_tot' + `wtp_soc_rbd_global_tot' + `env_cost_wtp_global_tot' + `
> batt_man_ext_tot') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost' + `fisc_ext_lr' + `gas_corp_fisc_e'

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`bev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${yes_ev_savings_`dollar_year'}) 
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_soc_rbd' + `wtp_saving
> s' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_ev_local' + `wtp_no_ice
> _local' + `env_cost_wtp_l' + `wtp_soc_rbd_l'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_ev_global_tot' + `wtp_no_ice_global_tot' + `env_co
> st_wtp_global_tot' + `wtp_soc_rbd_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_ev_global_tot
> ' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot' + `wtp_soc_
> rbd_global_tot') + 0.9 * `cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. local avg_lcoe = ${energy_cost}

. local energy_cost = `avg_lcoe'

. 
. local lifetime_energy_cost = 0

. forvalues y = 1(1)`ub'{
  2.         local lifetime_energy_cost = `lifetime_energy_cost' + (`
> ev_miles_traveled`y'' * `kwh_per_mile' * `energy_cost') / ((1 + `di
> scount')^(`y' - 1))
  3. }

. 
. 
. 
. local purchase_price_diff = 8166 * (${cpi_2020} / ${cpi_2023}) // f
> rom vin diesel

. 
. local lifetime_gas_cost = ${clean_car_cf_gas_savings_2020} - ${clea
> n_car_wtp_prod_s_2020} - 0.08 * ${clean_car_cf_gas_savings_2020} - 
> ${clean_car_cf_gas_fisc_ext_2020}

. 
. local resource_cost = `purchase_price_diff' + `lifetime_energy_cost
> ' - `lifetime_gas_cost'

. 
. local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_2020} - (59.5 
> * `batt_cap' * 0.001) - ${yes_ev_rbd_CO2_2020} // need to remove th
> e rebound effect

. 
. local q_carbon_no_ice_mck = ${clean_car_cf_carbon_2020}

. 
. local q_carbon_mck = `q_carbon_yes_ev_mck' + `q_carbon_no_ice_mck'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck' + (1 - `rbd_coeff') * `
> semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_deal_`1' = 0

. global wtp_prod_s_`1' = -`wtp_prod_s'

. global wtp_prod_u_`1' = `wtp_prod_u'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global utility_fisc_ext_`1' = -`utility_fisc_ext'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global state_fisc_ext_`1' = `state_fisc_ext'

. global fed_fisc_ext_`1' = 0

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_`4'_ep = round(`epsilon', 0.001)

. 
. global profits_fisc_e_`1' = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob' 

. global wtp_loc_`1'= `wtp_loc'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_ev_`1' = `wtp_yes_ev'

. global wtp_yes_ev_local_`1' = `wtp_yes_ev_local'

. global wtp_yes_ev_g_`1' = `wtp_yes_ev_g'

. 
. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. global wtp_soc_rbd_l_`1' = `wtp_soc_rbd_l'

. global wtp_soc_rbd_g_`1' = `wtp_soc_rbd_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_deal wtp_glob wtp_loc wtp_soc_rbd
>  env_cost_wtp cost_wtp wtp_prod_s wtp_prod_u WTP_cc

. global wtp_comps_`1'_commas "wtp_cons", "wtp_deal", "wtp_glob", "wt
> p_loc", "wtp_soc_rbd", "env_cost_wtp", "wtp_prod_s", "wtp_prod_u"

. global wtp_comps_`1'_commas2 "cost_wtp", "WTP_cc"

. 
. global cost_comps_`1' program_cost state_fisc_ext beh_fisc_ext gas_
> fisc_ext profits_fisc_e fisc_ext_lr total_cost

. global cost_comps_`1'_commas "program_cost", "state_fisc_ext", "beh
> _fisc_ext", "gas_fisc_ext", "profits_fisc_e", "fisc_ext_lr", "total
> _cost"

. 
. global `1'_xlab 1 `"Consumers"' 2 `"Dealers"' 3 `""Global" "Env.""'
>  4 `""Local" "Env.""' 5 `"Rebound"' 6 `""Dynamic" "Env.""' 7 `""Dyn
> amic" "Price""' 8 `""Gasoline" "Producers""' 9 `"Utilities"' 10 `"T
> otal WTP"' 12 `""Program" "Cost""' 13 `""State" "Subsidy""' 14 `""F
> ederal" "Subsidy""' 15 `""Gas" "Tax""' 16 `""Profits" "Tax""' 17 `"
> "Climate" "FE""' 18 `""Govt" "Cost""' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 7

. global color_group4_`1' = 9

. global cost_color_start_`1' = 12

. global color_group5_`1' = 17

. 
. 
. 
. 
. 
. global `1'_name "Federal Income Tax Credit for Electric Vehicles"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `wtp_cons'
1

. di `wtp_marg'
.00105121

. di `wtp_inf'
42.978867

. di `wtp_prod_s'
.05873865

. di `wtp_prod_u'
.01299042

. di `wtp_yes_ev'
-.08996113

. di `wtp_no_ice'
.27610809

. di `wtp_soc'
.14592288

. di `wtp_soc_rbd'
.01762033

. di `env_cost_wtp'
0

. di `cost_wtp'
0

. di `WTP_cc'
1.117795

. di `program_cost'
1

. di `beh_fisc_ext'
.00210242

. di `fed_fisc_ext'


. di `gas_fisc_ext'
.05642529

. di `utility_fisc_ext'
.00705652

. di `fisc_ext_lr'
-.00440551

. di `total_cost'
1.0922391

. di in red "End of Main Estimates"
End of Main Estimates

. 
. di in red "Cost Curve Inputs"
Cost Curve Inputs

. di `epsilon'
-2.6111293

. di `discount'
.02

. di `farmer_theta'
-.421

. di `batt_cost'
13285.154

. di `msrp'
54025.484

. di `prod_cost'
13285.154

. di `batt_per_kwh_cost'
181.97818

. di `batt_cap'
73.004105

. di `fixed_cost_frac'
.75409468

. di `marg_sales'
167700

. di `cum_sales'
917708.31

. di `enviro_ext'
2983.0411

. di in red "End of Cost Curve Inputs"
End of Cost Curve Inputs

. 
. di in red "Behavioral Fiscal Externality Inputs"
Behavioral Fiscal Externality Inputs

. di `semie'
.00004892

. di `avg_subsidy'
42.978867

. di `adj_rebate_cost'
1.064e+09

. di `rebate_cost'
9.242e+08

. di ${cpi_`dollar_year'}
258.846

. di ${cpi_${policy_year}}
224.923

. di `total_EV_sales'
140195

. di in red "End of Fiscal Externality Inputs"
End of Fiscal Externality Inputs

. 
. if "${latex}" == "yes"{
.         if "`bev_cf'" == "clean_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp kwh_per_mile tota
> l_subsidy kwh_used_year_one total_bev_damages_glob ev_first_damages
> _g wtp_yes_ev_g wtp_no_ice_global_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac gas_c
> onsumed_year_one total_bev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc tot_kwh util_producer_surplus wtp_prod_u total_bev_damage
> s_loc_n total_damages_loc_n ///
>                                         avg_state_subsidy avg_fed_s
> ubsidy avg_state_subsidy_n avg_fed_subsidy_n fed_fisc_ext state_fis
> c_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax_rate utility_fisc_e
> xt util_gov_revenue fisc_ext_lr ///
>                                         total_cost MVPF epsilon sem
> ie_paper EV_increase ep_avg_subsidy net_elas_msrp ev_cf_mpg avg_sub
> sidy_n batt_emissions batt_damages_n batt_man_ext
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "gas_consumed_
> year_one", "avg_subsidy", "net_elas_msrp") | inlist("`i'", "tot_gal
> ", "avg_state_subsidy") {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_fed_subsidy",
>  "total_subsidy", "ep_avg_subsidy") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
. 
.         }
. 
.         if "`bev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
(1 real change made)
state_fisc_ext
(1 real change made)
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
(1 real change made)
wtp_yes_ev_g
(1 real change made)
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003h.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003i.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003j.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/federal_ev_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/federal_ev_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/federal_ev_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/federal_ev_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for federal_ev under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   State         description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State         description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State         description
1
Specification 1 of 1, program 41 of 100 (food_labels)
Number of observations (_N) was 0, now 0.
food_labels

. *******************************************************************
> ******************
. /*       0. Program: Nudges with Carbon Footprint Food Labels      
>                         */
. *******************************************************************
> ******************
. 
. /*
> Paul M. Lohmann, Elisabeth Gsottbauer, Anya Doherty, Andreas Kontol
> eon
> Do carbon footprint labels promote climatarian diets? Evidence from
>  a large-scale field experiment, Journal of Environmental Economics
>  and Management, https://www.sciencedirect.com/science/article/pii/
> S0095069622000596.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: food_labels no uncorrec
> ted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"reduction"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       26.74           .      26.74      26.
> 74
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.                 if "${spec_type}" == "baseline"{
.                         local dollar_year = ${policy_year}
.                 }

.                 
.                 if "${spec_type}" == "current"{
.                         local dollar_year = ${current_year}
.                 }

.         restore

. 
. local sales_per_day = 1000

. local grams_per_ton = 907185

. local euro_dollar = 1.09

. local days_per_month = 30

. local cost_per_month = 80 // From Discussion/Conclusion section

. 
. local treatment_footprint_baseline = 573.23 // From Table 2

. local control_footprint_baseline = 671.27 //From Table 2

. local average_meal_footprint = 2000 // From Discussion/Conclusion s
> ection 

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. local average_footprint = (`treatment_footprint_baseline' + `contro
> l_footprint_baseline') / 2

. local average_reduction = (`reduction' / `average_footprint') * `av
> erage_meal_footprint'

. local carbon_saved = (`average_reduction' * `days_per_month' * `sal
> es_per_day')/`grams_per_ton'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. * consumers
. local inframarginal = 0

. local marginal = 0

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *producers
. local wtp_producers = 0

. 
. * society 
. local carbon_reduction = `carbon_saved'

. 
. local wtp_society = `carbon_saved' * ${sc_CO2_`dollar_year'} * (${c
> pi_`dollar_year'}/${cpi_2020})

. 
. local q_carbon = `carbon_saved'

. 
. * Total WTP
. local WTP = `wtp_consumers' + `wtp_producers' + `wtp_society' - (`w
> tp_society' * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. local WTP_USPres = `wtp_consumers' + `wtp_producers'

. local WTP_USFut  =      ${USShareFutureSSC}  * (`wtp_society' - (`w
> tp_society' * ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `wtp_society'

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `cost_per_month' * `euro_dollar'

. 
. local fisc_ext_t = 0

. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `wtp_society' * ${USShareFutureSSC} * ${US
> ShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP'/`total_cost'

. 
. ****************
. /* 9. Outputs */
. ****************
. 
. di `program_cost'
87.2

. di `fiscal_externality'


. di `total_cost'
76.692695

. di `WTP'
538.03382

. di `wtp_consumers'
0

. di `wtp_producers'
0

. di `wtp_society'
548.54113

. di `total_cost'
76.692695

. di `MVPF'
7.0154508

. di `CE'


. di `carbon_reduction'
2.842182

. 
. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_society_`1' = `wtp_society'

. global prop_infra_`1' = .

. global wtp_cons_`1' = `wtp_consumers'

. global wtp_glob_`1' = `wtp_society' * (1 - (${USShareFutureSSC} * $
> {USShareGovtFutureSCC}))

. global wtp_loc_`1' = 0

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global total_cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Food Label Nudge"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `"Total WTP"' 6 `"Program Cost"' 7 `""FE" "Subsidies"
> "' 8 `""FE" "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"'  ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 1

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. 
. 
. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003k.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003l.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003m.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/food_labels_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/food_labels_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/food_labels_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/food_labels_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for food_labels under current
(7 vars, 5 obs)
spec_type     emissions_~r  State         description
region        policy_year   ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  State         description
region        policy_year   ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  State         description
region        policy_year   ef_region
1
Specification 1 of 1, program 42 of 100 (fridge_datta)
Number of observations (_N) was 0, now 0.
fridge_datta

. *******************************************************************
> ******************
. /*       0. Program: Energy Efficient Appliance Rebate -- Refridger
> ators        */
. *******************************************************************
> ******************
. 
. /*
> Souvik Datta and Sumeet Gulati
> "Utility rebates for ENERGY STAR appliances: Are they effective?" 
> Journal of Environmental Economics and Management
> * https://www.sciencedirect.com/science/article/pii/S00950696140007
> 22#s0070
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: fridge_datta no uncorre
> cted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals 
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .282           .       .282       .2
> 82
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************
. preserve

.         
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

. restore

. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. *i. Import energy rebate assumptions
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

. restore

.         
. local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yrs - Foot
> note 10

. local marginal_valuation = ${val_given}

.         
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
. 
. local appliance_cost = (1112+128) * (${cpi_`dollar_year'}/${cpi_201
> 0}) // From Aldy Paper Table 2

. local avg_rebate = 49.062 * (${cpi_`dollar_year'}/${cpi_2004}) // T
> able 3

. // local annual_kwh = ((540+558+558+520+520+525)/6) - ((450+502+502
> +442+442+457)/6) // kwh per year (Table 7)
. local annual_kwh = 65 // Houde & Aldy Appendix Table A.10, kWh save
> d each year by switching 

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. local semie = `semie'/100

. local epsilon = `semie' * (((1112+128) * (${cpi_${policy_year}}/${c
> pi_2010})) - (49.062 * (${cpi_${policy_year}}/${cpi_2004})))

. local semie = (`epsilon'/(`appliance_cost' - `avg_rebate'))

. 
. dynamic_grid `annual_kwh', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("unifo
> rm") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants = `r(local_enviro_ext)'

. local global_pollutants = `r(global_enviro_ext)'

. local carbon = `r(carbon_content)'

. local q_carbon = `carbon' * `r' * `semie'

. 
. local val_local_pollutants = `local_pollutants' * `semie'

. local val_global_pollutants = `global_pollutants' * `semie'

. local rebound_local = `local_pollutants' * (1-`r') * `semie'

. local rebound_global = `global_pollutants' * (1-`r') * `semie'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. * Private
. local wtp_cons = 1

. 
. * Society
. local wtp_soc_raw = `val_local_pollutants' + `val_global_pollutants
> '

. 
. local wtp_society = `wtp_soc_raw' - `rebound_local' - `rebound_glob
> al'

. 
. local annual_prod = `semie' * `annual_kwh' * ${producer_surplus_`do
> llar_year'_${State}}

. 
. local wtp_prod = (`annual_prod' + (`annual_prod'/`discount') * (1 -
>  (1/(1+`discount')^(`lifetime' - 1)))) * `r'

. 
. * Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local annual_savings = `semie' * `annual_kwh' * ${kwh_price
> _`dollar_year'_${State}}
.         
.         local c_savings = `annual_savings' + (`annual_savings'/`dis
> count') * (1 - (1/(1+`discount')^(`lifetime' - 1)))
. }

. 
. if "${value_profits}" == "no" {
.         local wtp_prod = 0
. }

. 
. local wtp_private = `wtp_cons' - `wtp_prod'

. 
. local WTP = `wtp_cons' + `wtp_society' - `wtp_prod' + `c_savings' -
>  ((`val_global_pollutants' - `rebound_global') * ${USShareFutureSSC
> } * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `wtp_cons' + `val_local_pollutants' - `wtp_prod'
>  - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`val_global_polluta
> nts' - `rebound_global') - ((`val_global_pollutants' - `rebound_glo
> bal') * ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`val_global_polluta
> nts' - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = 1

. 
. local annual_fe_t = `semie' * `annual_kwh' * ${government_revenue_`
> dollar_year'_${State}}

. 
. local fisc_ext_t = (`annual_fe_t' + ((`annual_fe_t')/`discount') * 
> (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `r'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local gov_state_spending = 0

. 
. local gov_fed_spending = `avg_rebate' * `semie'

. 
. local fisc_ext_s = `gov_state_spending' + `gov_fed_spending'

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local annual_e_savings = `annual_kwh' * `energy_cost'

. local fridge_energy_savings = `annual_e_savings' + (`annual_e_savin
> gs' / `discount') * (1 - (1 / (1 + `discount')^(`lifetime' - 1)))

. 
. di in red "energy savings are `fridge_energy_savings'"
energy savings are 63.04055787253318

. 
. local fridge_cost = -184.13454 // difference between ES and non-ES 
> fridge prices

. 
. local resource_cost = `fridge_cost' - `fridge_energy_savings'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `semie'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `val_global_pollutants' * (1 - (${USShareFutu
> reSSC} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `val_local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = -`wtp_prod'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_cons_`1' = `wtp_cons'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_r_loc wtp_r_glob
>  wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Refridgerators Rebates - C4A (Datta)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `""Rebound" "Local""' 5 `""Rebound" "Global""' 6 `"Pr
> oducers"' 7 `"Total WTP"' 9 `""Program" "Cost""' 10 `""FE" "Subsidi
> es""' 11 `""FE" "Taxes""' 12 `""FE" "Long-Run""' 13 `"Total Cost"' 
> ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `MVPF'
1.0114193

. di `WTP'
1.1666814

. di `total_cost'
1.1535091

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003n.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003o.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003p.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_datta_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_datta_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_datta_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_datta_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for fridge_datta under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 43 of 100 (fridge_mex)
Number of observations (_N) was 0, now 0.
fridge_mex

. *******************************************************************
> ******************
. /*       0. Program: Cash for Coolers (fridges) - Mexico         */
. *******************************************************************
> ******************
. 
. /*
> Davis, Lucas W., Alan Fuchs, and Paul Gertler. 
> "Cash for coolers: evaluating a large-scale appliance replacement p
> rogram in Mexico." 
> American Economic Journal: Economic Policy 6.4 (2014): 207-38.
> * https://www.aeaweb.org/articles?id=10.1257/pol.6.4.207
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: fridge_mex no uncorrect
> ed_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"kwh_reduced"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        11.2           .       11.2       11
> .2
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.         *i. Import energy rebate assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("energy_rebate")
(3 vars, 6 obs)

.                 
.                 levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.         restore

.                 
.         local marginal_valuation = ${val_given}

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************
.         local lifetime = 5 // Paper assumes that the program accele
> rates retirement by 5 years

.         local tons_per_gram = .000001

.         
.         /* Do not have reliable non-CO2 numbers for Mexico grid
>         local SO2_per_kwh = ${md_SO2_`dollar_year'_unweighted} * ($
> {cpi_`dollar_year'}/${cpi_${md_dollar_year}}) * 9.1 * `tons_per_gra
> m'
>         
>         local NOx_per_kwh = ${md_NOx_`dollar_year'_unweighted} * ($
> {cpi_`dollar_year'}/${cpi_${md_dollar_year}}) * 8.5 * `tons_per_gra
> m'
>         */
.         local SO2_per_kwh = 0

.         local NOx_per_kwh = 0

.         
.         *431 gCO2/kWh from: https://www.climate-transparency.org/wp
> -content/uploads/2021/10/CT2021Mexico.pdf 
.         local CO2_per_kwh = ${sc_CO2_`dollar_year'} * (${cpi_`dolla
> r_year'}/${cpi_2020}) * 431 * `tons_per_gram'

.                 
.         local adj_subsidy = 129400000 / 858962 * (${cpi_`dollar_yea
> r'}/${cpi_2012}) // total spent on program divided by number of fri
> dge replacements

.                         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
.         local kwh_change = `kwh_reduced' * 12 // Converting monthly
>  change to annual change

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_marginal = 0.5 // We are assuming that 50% of recipients
>  are marginal

. 
. local wtp_inf = `adj_subsidy' * `prop_marginal'

. local wtp_marg = `adj_subsidy' * `marginal_valuation' * `prop_margi
> nal'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = ((`kwh_change' * (`SO2_per_kwh' + `NOx_per
> _kwh')) + ((`kwh_change' * (`SO2_per_kwh' + `NOx_per_kwh'))/`discou
> nt') * (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `prop_marginal'
>  * `r'

. 
. local global_pollutants = ((`kwh_change' * (`CO2_per_kwh')) + ((`kw
> h_change' * (`CO2_per_kwh'))/`discount') * (1 - (1/(1+`discount')^(
> `lifetime' - 1)))) * `prop_marginal' * `r'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = ((-1 * `kwh_change' * `prop_marginal' * `CO2_per_k
> wh' * `lifetime')/(1/`tons_per_gram')) * `r'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `adj_subsidy'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "AC Rebate - Mexico"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `kwh_change'
134.4

. di `MVPF'
.85202615

. di `total_cost'
169.51354

. di `WTP'
144.42997

. di `wtp_cons'
127.38481

. di `local_pollutants'
0

. di `global_pollutants'
21.610868

. di `rebound_global'
4.2328349

. di `rebound_local'
0

. di `wtp_society'
17.378033

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
144.42997

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.01341385

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003q.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003r.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003s.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_mex_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_mex_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_mex_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/fridge_mex_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for fridge_mex under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 44 of 100 (gelman_gas)
Number of observations (_N) was 0, now 0.
gelman_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /* Gelman, Michael, Yuriy Gorodnichenko, Shachar Kariv, Dmitri Kous
> tas, Matthew D. Shapiro, Dan Silverman, and Steven Tadelis.
> "The Response of Consumer Spending to Changes in Gasoline Prices." 
> American Economic Journal: Macroeconomics 15, no. 2 (2023): 129-60.
> * https://faculty.haas.berkeley.edu/stadelis/gasprices.pdf
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: gelman_gas no uncorrect
> ed_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.164           .      -.164      -.1
> 64

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. global wtp_lbd_`1' = `r(lbd_wtp)'

. global cost_lbd_`1' = `r(lbd_cost)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Gelman
>  et al. 2023)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Gelman et al. 2023" "Global Assump
> tions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline Pric
> e of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_note_
> gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003t.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003u.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003v.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/gelman_gas_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/gelman_gas_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/gelman_gas_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/gelman_gas_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for gelman_gas under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 45 of 100 (h_gas_01_06)
Number of observations (_N) was 0, now 0.
h_gas_01_06

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Hughes, Jonathan, Christopher R. Knittel, and Daniel Sperling. 
> "Evidence of a shift in the short-run price elasticity of gasoline 
> demand." 
> The Energy Journal 29, no. 1 (2008).
> *https://www.iaee.org/en/publications/ejarticle.aspx?id=2243
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: h_gas_01_06 no uncorrec
> ted_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.042           .      -.042      -.0
> 42

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Hughes
>  et al. 2008 (2001–2006 Estimate))"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. global note_`1' = `"Publication: Hughes et al. 2008 (2001–2006 Esti
> mate)" "Global Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Descr
> iption: Gasoline Price of $`r(consumer_price_return)' (`dollar_year
> ' dollars). `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003w.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00003x.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000040.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_01_06_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_01_06_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_01_06_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_01_06_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for h_gas_01_06 under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 46 of 100 (h_gas_75_80)
Number of observations (_N) was 0, now 0.
h_gas_75_80

. *******************************************************************
> ******************
. /*       0. Program: Gas taxes                                     
>                                      */
. *******************************************************************
> ******************
. 
. /* Hughes, Jonathan, Christopher R. Knittel, and Daniel Sperling. 
> "Evidence of a shift in the short-run price elasticity of gasoline 
> demand." 
> The Energy Journal 29, no. 1 (2008).
> * https://www.iaee.org/en/publications/ejarticle.aspx?id=2243
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: h_gas_75_80 no uncorrec
> ted_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.335           .      -.335      -.3
> 35

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Hughes
>  et al. 2008 (1975–1980 Estimate))"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. 
. global note_`1' = `"Publication: Hughes et al. 2008 (1975–1980 Esti
> mate)" "Global Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Descr
> iption: Gasoline Price of $`r(consumer_price_return)' (`dollar_year
> ' dollars). `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000041.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000042.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000043.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_75_80_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_75_80_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_75_80_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/h_gas_75_80_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for h_gas_75_80 under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 47 of 100 (hancevic_rf)
Number of observations (_N) was 0, now 0.
hancevic_rf

. *******************************************************************
> ******************
. /*       0. Program: Gainesville Low-Income Energy Retrofit Program
>                 */
. *******************************************************************
> ******************
. 
. /*
> Pedro I. Hancevic, Hector H. Sandoval. 
> "Low-income energy efficiency programs and energy consumption.""
> Journal of Environmental Economics and Management, Volume 113, 2022
> , 102656, ISSN 0095-0696, 
> * https://doi.org/10.1016/j.jeem.2022.102656.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: hancevic_rf no uncorrec
> ted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"retrofit_impact"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .071           .       .071       .0
> 71
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. if "${harmonized_2010}" == "yes" & "${emissions_factor}" == "baseli
> ne_gen" {
.         local dollar_year = 2010
. }

. 
. local subsidy_cost = 3783.60

. local baseline_kwh = 9956.5 // sum from untreated in Table 4

.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Energy Reduction
. local ATE = 1 - exp(`retrofit_impact')

. 
. local kwh_reduction_annual = `baseline_kwh' * `retrofit_impact'

. *No reduction in natural gas consumption
. 
. 
. weatherization_ado non-marginal, policy_year(${policy_year}) inflat
> ion_year(2018) spec(${emissions_factor}) geo(${State}) kwh_reduced(
> `kwh_reduction_annual') mmbtu_reduced(0) ///
>                                                                  pr
> ogram_cost(`subsidy_cost') replacement(`replacement')
(3 vars, 7 obs)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'
(12 vars, 162 obs)

. di `r(MVPF)'
.8591472

. 
. ****************
. /* 5. Outputs */
. ****************
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. global wtp_soc_`1' = `r(wtp_society)'

. global wtp_marg_`1' = `r(marginal)' 

. global wtp_inf_`1' = `r(inframarginal)'

. global c_savings_`1' = `r(c_savings)'

. global wtp_glob_`1' = `r(global_pollutants)'

. global wtp_loc_`1' = `r(local_pollutants)'

. global total_cost_`1' = `r(total_cost)'

. global wtp_prod_`1' = `r(corporate_loss)'

. global wtp_r_loc_`1' = `r(rebound_local)'

. global wtp_r_glob_`1' = `r(rebound_global)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global p_spend_`1' = `r(policy_spending)'

. global q_CO2_`1' = `r(q_carbon)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Retrofit (Hancevic)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000044.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000045.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000046.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hancevic_rf_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hancevic_rf_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hancevic_rf_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hancevic_rf_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for hancevic_rf under current
(5 vars, 5 obs)
spec_type     emissions_~r  policy_year   State         ef_region

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   State         ef_region
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   State         ef_region
1
Specification 1 of 1, program 48 of 100 (her_compiled)
Number of observations (_N) was 0, now 0.
her_compiled

. *******************************************************************
> ******************
. /*       0. Program:  OPOWER Home Energy Report letters - Aggregate
> d         */
. *******************************************************************
> ******************
. 
. /*
> Allcott, Hunt. 
> "Social norms and energy conservation." 
> Journal of public Economics 95, no. 9-10 (2011): 1082-1095.
> * https://www.sciencedirect.com/science/article/pii/S00472727110004
> 78
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: her_compiled no uncorre
> cted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"treat_11m"' `"treat_11q"' `"treat_12"' `"treat_13"' `"treat_15"' `"
> treat_16"' `"treat_17"' `"treat_2"' `"treat_3b"' `"treat_3q"' `"tre
> at_4m"' `"treat_4q"' `"treat_5"' `"treat_6"' `"treat_7"' `"treat_8"
> ' `"treat_9"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0196           .      .0196      .01
> 96

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0149           .      .0149      .01
> 49

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0139           .      .0139      .01
> 39

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0144           .      .0144      .01
> 44

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0189           .      .0189      .01
> 89

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0314           .      .0314      .03
> 14

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0184           .      .0184      .01
> 84

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0183           .      .0183      .01
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .014           .       .014       .0
> 14

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0137           .      .0137      .01
> 37

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0272           .      .0272      .02
> 72

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0226           .      .0226      .02
> 26

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .027           .       .027       .0
> 27

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0164           .      .0164      .01
> 64

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0248           .      .0248      .02
> 48

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0332           .      .0332      .03
> 32

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0163           .      .0163      .01
> 63
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. preserve

. 
.         import excel "${assumptions}/policy_category_assumptions_MA
> STER", first clear sheet("her_compiled")
(10 vars, 17 obs)

.         replace cost_effectiveness = cost_effectiveness * (${cpi_20
> 09} / ${cpi_2008}) if year == 2008
(4 real changes made)

.         
.         gen kwh_reduced = .
(17 missing values generated)

.         gen kwh_weighted = .
(17 missing values generated)

.         gen cost_weighted = .
(17 missing values generated)

.         levelsof Experiment, local(levels)      
`"11m"' `"11q"' `"12"' `"13"' `"15"' `"16"' `"17"' `"2"' `"3b"' `"3q"
> ' `"4m"' `"4q"' `"5"' `"6"' `"7"' `"8"' `"9"'

.         foreach exp of local levels {
  2.                 replace kwh_reduced = baseline_daily * 365 * `tr
> eat_`exp'' if Experiment == "`exp'"
  3.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         replace kwh_weighted = kwh_reduced * experiment_weight // w
> eighted by treatment size
(17 real changes made)

.         replace cost_weighted = experiment_weight * number_nudges
(17 real changes made)

.                 
.         qui sum kwh_weighted

.         local kwh_reduced_annual = `r(sum)'

.         
.         qui sum cost_weighted

.         local nominal_cost = `r(sum)'

.         local program_cost = `nominal_cost' * (${cpi_`dollar_year'}
>  / ${cpi_${policy_year}})

. 
. restore

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

.         
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = 0

. local marginal = 0

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings = `kwh_reduced_annual' * ${kwh_price_`dolla
> r_year'_${State}}
. }

. 
. *Producers
. local corporate_loss = `kwh_reduced_annual' * ${producer_surplus_`d
> ollar_year'_${State}} * `r'

. local util_producer_surplus = ${producer_surplus_`dollar_year'_${St
> ate}} // for Latex

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. local wtp_prod_n = -`corporate_loss' / `program_cost' // for Latex

. 
. * Social Costs
. dynamic_grid `kwh_reduced_annual', starting_year(`dollar_year') lif
> etime(1) discount_rate(`discount') ef("`replacement'") type("unifor
> m") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants = `r(local_enviro_ext)'

. local local_pollutants_n = `local_pollutants' / `program_cost' // f
> or Latex

. 
. local global_pollutants = `r(global_enviro_ext)'

. local wtp_glob = `global_pollutants' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_glob_n = `wtp_glob' / `program_cost' // for Latex

. local carbon = `r(carbon_content)'

. 
. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 - `r')

. local rebound_local_n = `rebound_local' / `program_cost'

. 
. local rebound_global = `global_pollutants' * (1 - `r')

. local wtp_r_glob = -`rebound_global' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_r_glob_n = `wtp_r_glob' / `program_cost'

. 
. local wtp_soc_rbd_n = (-`rebound_local' + `wtp_r_glob') / `program_
> cost'

. 
. * Social benefits from reduced carbon
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. local wtp_society_n = `wtp_society' / `program_cost'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. local WTP_n = `WTP' / `program_cost' // for Latex

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. local fisc_ext_t = `kwh_reduced_annual' * ${government_revenue_`dol
> lar_year'_${State}} * `r'

. local tax_rate = ${government_revenue_`dollar_year'_${State}} // fo
> r Latex

. local utility_fisc_ext = `fisc_ext_t' / `program_cost' // for Latex

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local fisc_ext_lr_n = `fisc_ext_lr' / `program_cost' // for Latex

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. local total_cost_n = `total_cost' / `program_cost' // for Latex

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local energy_savings = `kwh_reduced_annual' * `energy_cost'

. 
. local her_cost = `program_cost'

. 
. local resource_cost = `her_cost' - `energy_savings'

. local her_price = `program_cost'

. local kwh_reduc = `kwh_reduced_annual'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `r'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_consumers'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = `wtp_r_glob'

. global wtp_soc_rbd_`1' = -`rebound_local' + `wtp_r_glob'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_r_glob wtp_r_loc
>  wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _r_glob", "wtp_r_loc", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_lr", "cost"

. global `1'_name "Alcott HERs - Electricity"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `""Rebound" "Global""' 5 `""Rebound" "Local""' 6 `"Ut
> ilities"' 7 `"Total WTP"' 9 `""Program" "Cost""' 10 `"Taxes"' 11 `"
> "Climate" "FE""' 12 `""Govt" "Cost""' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global color_group4_`1' = 6

. global cost_color_start_`1' = 9

. global color_group5_`1' = 11

. 
. // global note_`1' = `"Publication: " "SCC: `scc'" "Description: Co
> st curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - 
> `s_def', Grid - `grid_def', Replacement - `replacement_def'," "Grid
>  Model - `grid_model_def', Electricity supply elasticity - `elec_su
> p_elas'"'
. global normalize_`1' = 1

. 
. di `MVPF'
3.0060025

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs kwh_reduced_annual wtp_glob local_pol
> lutants wtp_r_glob rebound_local wtp_society local_pollutants_n wtp
> _glob_n rebound_local_n wtp_r_glob_n wtp_soc_rbd_n wtp_society_n wt
> p_prod_n ///
>                           util_producer_surplus WTP_n tax_rate util
> ity_fisc_ext fisc_ext_lr_n MVPF total_cost_n nominal_cost program_c
> ost
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         local `original' = trim("`: display %5.2fc 
> ``original'''")
 10.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000047.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000048.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000049.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/her_compiled_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/her_compiled_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/her_compiled_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/her_compiled_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for her_compiled under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 49 of 100 (hev_usa_i)
Number of observations (_N) was 0, now 0.
hev_usa_i

. *******************************************************************
> ******************
. /*       0. Program: Hybrid Electric Vehicle Rebate - USA        */
. *******************************************************************
> ******************
. 
. /*
> Gallagher, Kelly Sims, and Erich Muehlegger. 
> "Giving green to get green? Incentives and consumer adoption of hyb
> rid vehicle technology." 
> Journal of Environmental Economics and Management 61.1 (2011): 1-15
> .
> * https://www.sciencedirect.com/science/article/abs/pii/S0095069610
> 000768
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: hev_usa_i no uncorrecte
> d_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local hev_cf = "${hev_cf}"

. if "`hev_cf'" == "muehl" | "`hev_cf'" == "new_car" { 
.         local veh_lifespan_type = "car"
. }

. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0239           .      .0239      .02
> 39
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. Hybrid and Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         ** cleanest counterfactual 
.         if "`4'" == "baseline"{
.                 keep if year >= 2000 & year <= 2006
.                 forvalues y = 2000(1)2006{
  2.                         qui sum mpg_N if year == `y'
  3.                         local mpg_N_`y' = r(mean)
  4.                         qui sum mpg if year == `y'
  5.                         local mpg_`y' = r(mean)
  6.                         qui sum mpg_cf if year == `y'
  7.                         local mpg_cf_`y' = r(mean)
  8.                 }
.                 local hev_cf_mpg = (`mpg_N_2000' * `mpg_cf_2000' + 
> `mpg_N_2001' * `mpg_cf_2001' + `mpg_N_2002' * `mpg_cf_2002' + `mpg_
> N_2003' * `mpg_cf_2003' + `mpg_N_2004' * `mpg_cf_2004' + `mpg_N_200
> 5' * `mpg_cf_2005' + `mpg_N_2006' * `mpg_cf_2006') ///
>                                                         / (`mpg_N_2
> 000' + `mpg_N_2001' + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + 
> `mpg_N_2005' + `mpg_N_2006')
.                 local hev_mpg = (`mpg_N_2000' * `mpg_2000' + `mpg_N
> _2001' * `mpg_2001' + `mpg_N_2002' * `mpg_2002' + `mpg_N_2003' * `m
> pg_2003' + `mpg_N_2004' * `mpg_2004' + `mpg_N_2005' * `mpg_2005' + 
> `mpg_N_2006' * `mpg_2006') ///
>                                                         / (`mpg_N_2
> 000' + `mpg_N_2001' + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + 
> `mpg_N_2005' + `mpg_N_2006')
.         }

.         else{
.                 keep if year == ${run_year}
(21 observations deleted)
.                 qui sum mpg_cf
.                 local hev_cf_mpg = r(mean)
.                 qui sum mpg
.                 local hev_mpg = r(mean)
.         }

. restore

. 
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("fuel_economy_1975_2022")

.         forvalues y = 2000(1)2006{
  2.                 qui sum RealWorldMPG if RegulatoryClass == "All"
>  & ModelYear == "`y'"
  3.                 local base_mpg`y' = r(mean)
  4.         }

.         qui sum RealWorldMPG if RegulatoryClass == "All" & ModelYea
> r == "2020"

.         local base_mpg2020 = r(mean)

. restore

. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                         
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                         
.         keep if year==${run_year}
(56 observations deleted)

.                 
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.         
.         if "${spec_type}" == "baseline" {
.                 qui import excel "${assumptions}/evs/processed/stat
> e_level_gas_tax_rates", first clear
.                 keep tax2000 tax2001 tax2002 tax2003 tax2004 tax200
> 5 tax2006 state
.                 replace tax2000 = tax2000 * (${cpi_${dollar_year}} 
> / ${cpi_2000}) 
.                 replace tax2001 = tax2001 * (${cpi_${dollar_year}} 
> / ${cpi_2001})
.                 replace tax2002 = tax2002 * (${cpi_${dollar_year}} 
> / ${cpi_2002})
.                 replace tax2003 = tax2003 * (${cpi_${dollar_year}} 
> / ${cpi_2003})
.                 replace tax2004 = tax2004 * (${cpi_${dollar_year}} 
> / ${cpi_2004})
.                 replace tax2005 = tax2005 * (${cpi_${dollar_year}} 
> / ${cpi_2005})
.                 replace tax2006 = tax2006 * (${cpi_${dollar_year}} 
> / ${cpi_2006})
.                 keep if state == "Colorado" | state == "Maryland" |
>  state == "New York" | state == "Oregon" | state == "Pennsylvania" 
> | state == "South Carolina" | state == "Utah" | state == "West Virg
> inia"
.                 merge m:1 state using "${assumptions}/evs/processed
> /pop_by_state_2000_2019", keep(match)
.                 drop pop2007 pop2008 pop2009 pop2010 pop2011 pop201
> 2 pop2013 pop2014 pop2015 pop2016 pop2017 pop2018 pop2019
.                 drop _merge
.                 gen N = pop2000 + pop2001 + pop2002 + pop2003 + pop
> 2004 + pop2005 + pop2006
.                 gen weighted_avg = pop2000 * tax2000 + pop2001 * ta
> x2001 + pop2002 * tax2002 + pop2003 * tax2003 + pop2004 * tax2004 +
>  pop2005 * tax2005 + pop2005 * tax2006
.                 replace weighted_avg = weighted_avg / N
. 
.                 egen N_states = total(N)
.                 egen weighted_avg_states = total(N * weighted_avg)
.                 replace weighted_avg_states = weighted_avg_states /
>  N_states
.                 sum weighted_avg_states
.                 local tax_rate = r(mean) / 100
. 
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if inrange(year, 2000, 2006) // pg. 4
.                 * Gallagher and Muehlegger 2011 look at HEV tax inc
> entives for Q1 2000 through Q4 2006.
. 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) // no state-level gas price data so just gonna keep u
> sing national numbers
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
. 
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes.
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. Hybrid Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs") // same as BEVs

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. HEV Battery Capacity Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         forvalues y = 2000(1)2006{
  2.                 qui sum batt_cap if year == `y'
  3.                 local batt_cap`y' = r(mean)
  4.                 qui sum batt_cap_N if year == `y'
  5.                 local total_sales`y' = r(mean)
  6.         }

.         if "`4'" == "baseline"{
.                 local batt_cap = (`total_sales2000' * `batt_cap2000
> ' + `total_sales2001' * `batt_cap2001' + `total_sales2002' * `batt_
> cap2002' + `total_sales2003' * `batt_cap2003' + `total_sales2004' *
>  `batt_cap2004' + `total_sales2005' * `batt_cap2005' + `total_sales
> 2006' * `batt_cap2006') ///
>                                                         / (`total_s
> ales2000' + `total_sales2001' + `total_sales2002' + `total_sales200
> 3' + `total_sales2004' + `total_sales2005' + `total_sales2006')
.         }

.         else{
.                 keep if year == ${run_year}
(21 observations deleted)
.                 qui sum batt_cap
.                 local batt_cap = r(mean)
.         }

. restore

. 
. 
. ****************************************************
. /*                  3e. HEV Price Data            */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         forvalues y = 2000(1)2006{
  2.                 replace msrp = msrp * (${cpi_2000} / ${cpi_`y'})
>  if year == `y'
  3.                 qui sum msrp if year == `y'
  4.                 local msrp`y' = r(mean)
  5.         }
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         * calculating fixed price in paper's sample period for use 
> in calculating a constant elasticity
.         local elas_msrp = (`total_sales2000' * `msrp2000' + `total_
> sales2001' * `msrp2001' + `total_sales2002' * `msrp2002' + `total_s
> ales2003' * `msrp2003' + `total_sales2004' * `msrp2004' + `total_sa
> les2005' * `msrp2005' + `total_sales2006' * `msrp2006') ///
>                                         / (`total_sales2000' + `tot
> al_sales2001' + `total_sales2002' + `total_sales2003' + `total_sale
> s2004' + `total_sales2005' + `total_sales2006')

.         if "`4'" == "baseline"{
.                 local msrp = `elas_msrp'
.         }

.         else{
.                 use "${assumptions}/evs/processed/hev_data", clear
.                 keep if year == ${run_year}
(21 observations deleted)
.                 qui sum msrp
.                 local msrp = r(mean) * (${cpi_`dollar_year'} / ${cp
> i_${run_year}})
.         }

. restore

. 
. ****************************************************
. /*               3f. Population Data              */
. ****************************************************
. preserve

.         ** avg over policy's time period (2000-2006) and across sta
> tes
.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/pop_by_state_2000
> _2019", clear
.                 forvalues y = 2000(1)2006{
  2.                         qui sum pop`y' if state == "Colorado"
  3.                         local CO_pop_`y' = r(mean)
  4.                         qui sum pop`y' if state == "Maryland"
  5.                         local MD_pop_`y' = r(mean)
  6.                         qui sum pop`y' if state == "New York"
  7.                         local NY_pop_`y' = r(mean)
  8.                         qui sum pop`y' if state == "Oregon"
  9.                         local OR_pop_`y' = r(mean)
 10.                         qui sum pop`y' if state == "Pennsylvania
> "
 11.                         local PA_pop_`y' = r(mean)
 12.                         qui sum pop`y' if state == "South Caroli
> na"
 13.                         local SC_pop_`y' = r(mean)
 14.                         qui sum pop`y' if state == "Utah"
 15.                         local UT_pop_`y' = r(mean)
 16.                         qui sum pop`y' if state == "West Virgini
> a"
 17.                         local WV_pop_`y' = r(mean)
 18.                 }
.                 keep if inlist(state, "Colorado", "Maryland", "New 
> York", "Oregon", "Pennsylvania", "South Carolina", "Utah", "West Vi
> rginia")
.                 collapse (sum) pop2000 pop2001 pop2002 pop2003 pop2
> 004 pop2005 pop2006
.                 forvalues y = 2000(1)2006{
  2.                         qui sum pop`y'
  3.                         local total_pop`y' = r(mean)
  4.                 }
.         }

. restore

. 
. ****************************************************
. /* 3g. EV and ICE Age-State-Level VMT Data */
. ****************************************************
. local ub = `lifetime'

. local states CO MD NY OR PA SC UT WV

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ev_vmt_by_state_b
> y_age", clear // survey data combines hybrids and BEVs
.                 keep if state == "CO" | state == "MD" | state == "N
> Y" | state == "OR" | state == "PA" | state == "SC" | state == "UT" 
> | state == "WV"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2000(1)2006{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 7 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N 
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local hev_miles_traveled`y' = weighted_a
> vg[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ev_vmt_by_age", c
> lear
.                 local ub = `lifetime'
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local hev_miles_traveled`y' = vmt[`y']
  3.                 }
.         }

. restore

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ice_vmt_by_state_
> by_age", clear
.                 keep if state == "CO" | state == "MD" | state == "N
> Y" | state == "OR" | state == "PA" | state == "SC" | state == "UT"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2000(1)2006{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 7 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = weighted_a
> vg[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ice_vmt_by_age", 
> clear
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt[`y']
  3.                 }
.         }       

. restore

. 
. ** fixing HEVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local hev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/all_cells_batt_costs_comb
> ined", clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2000(1)2006{
  2.                         qui sum prod_cost_2018 if year == `y'
  3.                         local prod_cost`y' = r(mean)
  4.                 }
.                 local prod_cost = (`mpg_N_2000' * `prod_cost2000' +
>  `mpg_N_2001' * `prod_cost2001' + `mpg_N_2002' * `prod_cost2002' + 
> `mpg_N_2003' * `prod_cost2003' + `mpg_N_2004' * `prod_cost2004' + `
> mpg_N_2005' * `prod_cost2005' + `mpg_N_2006' * `prod_cost2006') ///
>                                                 / (`mpg_N_2000' + `
> mpg_N_2001' + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2
> 005' + `mpg_N_2006')
.                 local batt_per_kwh_cost = `prod_cost'
.         }

.         else{
.                 keep if year == `dollar_year'
(31 observations deleted)
.                 qui sum prod_cost_2018
.                 local prod_cost = r(mean)
.                 local batt_per_kwh_cost = `prod_cost'
.         }

. restore

. 
. ****************************************************
. /* 3h. Subsidy Levels */
. ****************************************************
. ** Federal Subsidy
. 
. local elas_avg_fed_subsidy = 1073 // Table 3

. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local avg_fed_subsidy = `elas_avg_fed_subsidy'
. }

. else{
.         local avg_fed_subsidy = 0
.         local avg_state_subsidy = 0 // no states offer normal hybri
> d subsidies in 2020
. }

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$
. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 2011 // from Table 3
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 2011 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'} / ${c
> pi_${policy_year}})

. local avg_subsidy = `adj_rebate_cost'

. local elas_avg_subsidy = `rebate_cost' // state subsidy, always wan
> t this in the policy year's dollars

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_state_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_state_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. ** adjust semi-elasticity to be for $1 of subsidy instead of $1,000
. local semie_paper = `semie'

. local semie = `semie' / 1000 // this is the in-context semi-elastic
> ity

. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_fed_subsidy' - 0.5 * 
> `elas_avg_subsidy'

. local epsilon = -`semie' * `net_elas_msrp'

. di in red "net msrp for elasticity is `net_elas_msrp'"
net msrp for elasticity is 18005.75680284473

. 
. local net_msrp = `msrp' - `avg_subsidy' - `avg_fed_subsidy'

. local total_subsidy = `avg_subsidy' + `avg_fed_subsidy'

. if "`4'" != "baseline"{
.         local semie = -`epsilon' / `net_msrp'
. }

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie'
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `semie' * `avg_subsidy'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * no utility company producer surplus for HEVs
. 
. * intermediate rebound effect calculations for Latex
. 
. local per_diff_cost_driving = ((`consumer_price' / `hev_mpg') - (`c
> onsumer_price' / `hev_cf_mpg')) / (`consumer_price' / `hev_cf_mpg')

. local hev_rebound = `per_diff_cost_driving' * -0.221

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. * no utility fiscal externality for HEVs
. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' * (1 / `hev_cf_mpg' - 1 / `hev_mp
> g')) * `tax_rate') / ((1 + `discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = -`beh_response' * (${hybrid_cf_gas_fis
> c_ext_`dollar_year'} - ${`hev_cf'_cf_gas_fisc_ext_`dollar_year'}) 
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local fed_fisc_ext = `beh_response' * `avg_fed_subsidy'

. local avg_fed_subsidy_n = `avg_fed_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. 
. if `marg_mvpf' == 1{
.         local total_cost0 = `program_cost' + `gas_fisc_ext' + `fed_
> fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost0 = `program_cost' + `gas_fisc_ext' + `fed_
> fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = 1

. 
. * marginal and inframarginal consumers
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         * producers
.         if "`4'" == "baseline"{
.                 local tot_gal_cf = 0
.                 local tot_gal_hy = 0
.                 local tot_sales = 0
.                 local gas_markup = 0
.                 forvalues y = 2000(1)2006{
  2.                         local tot_gal_cf = `tot_gal_cf' + ${`hev
> _cf'_gal_`y'} * `total_sales`y''
  3.                         local tot_gal_hy = `tot_gal_hy' + ${hybr
> id_gal_`y'} * `total_sales`y''
  4.                         local gas_markup = `gas_markup' + ${nomi
> nal_gas_markup_`y'} * `total_sales`y''
  5.                         local tot_sales = `tot_sales' + `total_s
> ales`y''
  6.                 }
.                 local tot_gal_cf = `tot_gal_cf' / `tot_sales'
.                 local tot_gal_hy = `tot_gal_hy' / `tot_sales'
.                 local tot_gal = `tot_gal_cf' - `tot_gal_hy'
.                 local gas_markup = `gas_markup' / `tot_sales'
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' * (1/`hev_cf_mpg' - 1/`hev_mp
> g')) * (`producer_price' - `producer_mc')) / ((1 + `discount')^(`y'
>  - 1))) // positive
  3.                 }
.         }
. 
.         else{
.                 local tot_gal_cf = ${`hev_cf'_gal_`dollar_year'} //
>  for Latex
.                 local tot_gal_hy = ${hybrid_gal_`dollar_year'} // f
> or Latex
.                 local tot_gal = `tot_gal_cf' - `tot_gal_hy' // for 
> Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * (${hybrid_wtp_p
> rod_s_`dollar_year'} - ${`hev_cf'_wtp_prod_s_`dollar_year'})
.         }
. }

. 
. *no utility producer surplus for HEVs
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' + `wtp_prod_s'
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' + `wtp_prod_s'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a hybrid vehicle
. 
. if "`4'" == "baseline"{
. 
.         local hev_gas_consumed_year_one = `hev_miles_traveled1' / `
> hev_mpg' // for Latex
. 
.         forvalues y = 2000(1)2006{
  2.                 local yes_hev_ext_local_`y' = ${hybrid_cf_damage
> s_loc_`y'}
  3.                 local yes_hev_ext_global_`y' = ${hybrid_cf_damag
> es_glob_`y'}
  4.                 local yes_hev_carbon_content_`y' = ${hybrid_cf_c
> arbon_`y'}
  5.                 local yes_hev_rbd_loc_`y' = ${yes_hev_rbd_loc_`y
> '}
  6.                 local yes_hev_rbd_glob_`y' = ${yes_hev_rbd_glob_
> `y'}
  7.                 
.         }
. 
.         local hev_first_damages_g = 0
.         local tot_sales = 0
.         forvalues y = 2000(1)2006{
  2.                 local hev_first_damages_g = `hev_first_damages_g
> ' + ${hybrid_first_damages_g_`y'} * `total_sales`y''
  3.                 local tot_sales = `tot_sales' + `total_sales`y''
  4.         }
.         local hev_first_damages_g = `hev_first_damages_g' / `tot_sa
> les' // for Latex
. 
.         local q_carbon_yes_hev = -`beh_response' * ((`yes_hev_carbo
> n_content_2000' * `mpg_N_2000' + `yes_hev_carbon_content_2001' * `m
> pg_N_2001' + `yes_hev_carbon_content_2002' * `mpg_N_2002' + `yes_he
> v_carbon_content_2003' * `mpg_N_2003' + `yes_hev_carbon_content_200
> 4' * `mpg_N_2004' + `yes_hev_carbon_content_2005' * `mpg_N_2005' + 
> `yes_hev_carbon_content_2006' * `mpg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local q_carbon_yes_hev_mck = `q_carbon_yes_hev' / `beh_resp
> onse'
.         
.         
. 
.         local wtp_yes_hev_local = -`beh_response' * ((`yes_hev_ext_
> local_2000' * `mpg_N_2000' + `yes_hev_ext_local_2001' * `mpg_N_2001
> ' + `yes_hev_ext_local_2002' * `mpg_N_2002' + `yes_hev_ext_local_20
> 03' * `mpg_N_2003' + `yes_hev_ext_local_2004' * `mpg_N_2004' + `yes
> _hev_ext_local_2005' * `mpg_N_2005' + `yes_hev_ext_local_2006' * `m
> pg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_yes_hev_rbd_loc = -`beh_response' * ((`yes_hev_rb
> d_loc_2000' * `mpg_N_2000' + `yes_hev_rbd_loc_2001' * `mpg_N_2001' 
> + `yes_hev_rbd_loc_2002' * `mpg_N_2002' + `yes_hev_rbd_loc_2003' * 
> `mpg_N_2003' + `yes_hev_rbd_loc_2004' * `mpg_N_2004' + `yes_hev_rbd
> _loc_2005' * `mpg_N_2005' + `yes_hev_rbd_loc_2006' * `mpg_N_2006') 
> ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.                                                                    
>                              
.         local wtp_yes_hev_loc_no_rbd = `wtp_yes_hev_local' - `wtp_y
> es_hev_rbd_loc' // for Latex
.         local wtp_yes_hev_global_tot = -`beh_response' * ((`yes_hev
> _ext_global_2000' * `mpg_N_2000' + `yes_hev_ext_global_2001' * `mpg
> _N_2001' + `yes_hev_ext_global_2002' * `mpg_N_2002' + `yes_hev_ext_
> global_2003' * `mpg_N_2003' + `yes_hev_ext_global_2004' * `mpg_N_20
> 04' + `yes_hev_ext_global_2005' * `mpg_N_2005' + `yes_hev_ext_globa
> l_2006' * `mpg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_yes_hev_rbd_glob_tot = -`beh_response' * ((`yes_h
> ev_rbd_glob_2000' * `mpg_N_2000' + `yes_hev_rbd_glob_2001' * `mpg_N
> _2001' + `yes_hev_rbd_glob_2002' * `mpg_N_2002' + `yes_hev_rbd_glob
> _2003' * `mpg_N_2003' + `yes_hev_rbd_glob_2004' * `mpg_N_2004' + `y
> es_hev_rbd_glob_2005' * `mpg_N_2005' + `yes_hev_rbd_glob_2006' * `m
> pg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_yes_hev_g = `wtp_yes_hev_global_tot' * ((1 - ${US
> ShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C}))
.         local wtp_yes_hev_rbd_glob = `wtp_yes_hev_rbd_glob_tot' * (
> (1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGov
> tFutureSCC}))
. 
.         local total_hev_damages_glob = `wtp_yes_hev_global_tot' / `
> beh_response' // for Latex
.         local total_hev_damages_glob_n = `total_hev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_hev_damages_loc_n = `wtp_yes_hev_local' / `beh_
> response' // for Latex
. }

. 
. else{
.         local hev_gas_consumed_year_one = `hev_miles_traveled1' / `
> hev_mpg' // for Latex
.         local total_hev_damages_glob = ${hybrid_cf_damages_glob_`do
> llar_year'} - ${yes_hev_rbd_glob_`dollar_year'} // for Latex
.         local total_hev_damages_glob_n = `total_hev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_hev_damages_loc_n = ${hybrid_cf_damages_loc_`do
> llar_year'} / `net_msrp' // for Latex
.         local hev_first_damages_g = ${hybrid_first_damages_g_2020} 
> // for Latex
. 
.         local wtp_yes_hev_local = -`beh_response' * ${hybrid_cf_dam
> ages_loc_`dollar_year'} // with rebound
.         local wtp_yes_hev_rbd_loc = -`beh_response' * ${yes_hev_rbd
> _loc_`dollar_year'}
.         local wtp_yes_hev_loc_no_rbd = `wtp_yes_hev_local' - `wtp_y
> es_hev_rbd_loc' // for Latex
. 
.         local wtp_yes_hev_global_tot = -`beh_response' * `total_hev
> _damages_glob' // no rebound
.         local wtp_yes_hev_rbd_glob_tot = -`beh_response' * ${yes_he
> v_rbd_glob_`dollar_year'}
. 
.         local wtp_yes_hev_g = `wtp_yes_hev_global_tot' * ((1 - ${US
> ShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C}))
.         local wtp_yes_hev_rbd_glob = `wtp_yes_hev_rbd_glob_tot' * (
> (1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGov
> tFutureSCC}))
. 
.         local q_carbon_yes_hev = -`beh_response' * ${hybrid_cf_carb
> on_`dollar_year'}
.         local q_carbon_yes_hev_mck = ${hybrid_cf_carbon_`dollar_yea
> r'}
. }

. 
. local wtp_soc_rbd = `wtp_yes_hev_rbd_glob' + `wtp_yes_hev_rbd_loc'

. 
. 
. local yes_hev_local_ext = `wtp_yes_hev_local' / `beh_response'

. local yes_hev_global_ext_tot = `wtp_yes_hev_global_tot' / `beh_resp
> onse'

. local wtp_yes_hev = `wtp_yes_hev_loc_no_rbd' + `wtp_yes_hev_g'

. 
. 
. local yes_hev_ext = `wtp_yes_hev' / `beh_response'

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. if "`4'" == "baseline"{
.         forvalues y = 2000(1)2006{
  2.                 local no_ice_ext_local_`y' = ${`hev_cf'_cf_damag
> es_loc_`y'}
  3.                 local no_ice_ext_global_`y' = ${`hev_cf'_cf_dama
> ges_glob_`y'}
  4.                 local no_ice_carbon_content_`y' = ${`hev_cf'_cf_
> carbon_`y'}
  5.         }
. 
.         
.         local wtp_no_ice_local = `beh_response' * ((`no_ice_ext_loc
> al_2000' * `mpg_N_2000' + `no_ice_ext_local_2001' * `mpg_N_2001' + 
> `no_ice_ext_local_2002' * `mpg_N_2002' + `no_ice_ext_local_2003' * 
> `mpg_N_2003' + `no_ice_ext_local_2004' * `mpg_N_2004' + `no_ice_ext
> _local_2005' * `mpg_N_2005' + `no_ice_ext_local_2006' * `mpg_N_2006
> ') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_no_ice_global_tot = `beh_response' * ((`no_ice_ex
> t_global_2000' * `mpg_N_2000' + `no_ice_ext_global_2001' * `mpg_N_2
> 001' + `no_ice_ext_global_2002' * `mpg_N_2002' + `no_ice_ext_global
> _2003' * `mpg_N_2003' + `no_ice_ext_global_2004' * `mpg_N_2004' + `
> no_ice_ext_global_2005' * `mpg_N_2005' + `no_ice_ext_global_2006' *
>  `mpg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
.         local ice_gas_consumed_year_one = `ice_miles_traveled1' / `
> hev_cf_mpg' // for Latex
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_hev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
. 
.         local q_carbon_no_ice = `beh_response' * ((`no_ice_carbon_c
> ontent_2000' * `mpg_N_2000' + `no_ice_carbon_content_2001' * `mpg_N
> _2001' + `no_ice_carbon_content_2002' * `mpg_N_2002' + `no_ice_carb
> on_content_2003' * `mpg_N_2003' + `no_ice_carbon_content_2004' * `m
> pg_N_2004' + `no_ice_carbon_content_2005' * `mpg_N_2005' + `no_ice_
> carbon_content_2006' * `mpg_N_2006') / (`mpg_N_2000' + `mpg_N_2001'
>  + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg
> _N_2006'))
.         local q_carbon_no_ice_mck = `q_carbon_no_ice' / `beh_respon
> se'
. }

. else{
.         local wtp_no_ice_local = `beh_response' * ${`hev_cf'_cf_dam
> ages_loc_`dollar_year'}
.         local wtp_no_ice_global_tot = `beh_response' * ${`hev_cf'_c
> f_damages_glob_`dollar_year'}
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local ice_gas_consumed_year_one = `ice_miles_traveled1' / `
> hev_cf_mpg' // for Latex
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_hev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
.         
.         local q_carbon_no_ice = `beh_response' * ${`hev_cf'_cf_carb
> on_`dollar_year'}
.         local q_carbon_no_ice_mck = ${`hev_cf'_cf_carbon_`dollar_ye
> ar'}
. }

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions
. 
. * Averaging the SCC for 2000-2006
. if "`4'" == "baseline"{
.         local relevant_scc = 0
.         local total_sales = 0
.         forvalues y = 2000(1)2006{
  2.                 local relevant_scc = `relevant_scc' + ${sc_CO2_`
> y'} * `total_sales`y''
  3.                 local total_sales = `total_sales' + `total_sales
> `y''
  4.         }
.         local relevant_scc = `relevant_scc' / `total_sales'
. }

. else{
.         local relevant_scc = ${sc_CO2_`dollar_year'}
. }

. 
. local batt_emissions = 214 + 20 // from Table 9 of Pipitone et al. 
> (2021)

. 
. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_hev' + `wtp_no_ice' - `batt_man_ext'

. local wtp_glob = `wtp_yes_hev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_hev_loc_no_rbd' + `wtp_no_ice_local'

. 
. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_hev_local')
>  / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_h
> ev_global_tot' - `batt_man_ext_tot') / `beh_response'

. 
. local enviro_ext = `local_enviro_ext' + `global_enviro_ext_tot'

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.         ** --------------------- COST CURVE --------------------- *
> *
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`enviro_ext')
.         local dyn_enviro = `r(enviro_mvpf)'
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`local_enviro_ext')
.         local dyn_enviro_local = `r(enviro_mvpf)'
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`global_enviro_ext_tot')
.         local dyn_enviro_global_tot = `r(enviro_mvpf)'
.         local dyn_enviro_global = `dyn_enviro_global_tot' * ((1 - $
> {USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutur
> eSCC}))
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost'
.                 local env_cost_wtp = `dyn_enviro' * `program_cost' 
> // same as local plus global_tot
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost'
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost'
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost'
. 
.                 local env_cost_wtp = `env_cost_wtp_l' + `env_cost_w
> tp_g' // switching to not include the piece of the global dynamic e
> nviro that will go to the FE
. 
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_hev'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_hev_mck'

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_hev_gl
> obal_tot' + `env_cost_wtp_global_tot' + `batt_man_ext_tot') * ${USS
> hareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost0' + `fisc_ext_lr' + `gas_corp_fisc_e
> '

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`hev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${hybrid_cf_gas_savings_`dollar_year'})
.         
. }

. else {
.         
.         local wtp_savings = 0
. 
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_savings' + `wtp_soc_rb
> d' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_hev_local' + `wtp_no_ic
> e_local' + `env_cost_wtp_l' + `wtp_savings'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_hev_global_tot' + `wtp_no_ice_global_tot' + `env_c
> ost_wtp_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_hev_global_to
> t' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot') + 0.9 * `
> cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. 
. 
. local hev_price = 28359.08333 // from KBB, look at spreadsheet

. local ice_price = 27012.5 // from KBB, look at spreadsheet

. 
. local lifetime_hev_gas_cost = ${hybrid_cf_gas_savings_2020} - ${hyb
> rid_wtp_prod_s_2020} - 0.08 * ${hybrid_cf_gas_savings_2020} - ${hyb
> rid_cf_gas_fisc_ext_2020}

. local lifetime_ice_gas_cost = ${muehl_cf_gas_savings_2020} - ${mueh
> l_wtp_prod_s_2020} - 0.08 * ${muehl_cf_gas_savings_2020} - ${muehl_
> cf_gas_fisc_ext_2020}

. 
. 
. local resource_cost = `hev_price' + `lifetime_hev_gas_cost' - `ice_
> price' - `lifetime_ice_gas_cost'

. local q_carbon_yes_hev_mck = ${hybrid_cf_carbon_2020} + ((214 + 20)
>  * 0.001) - ${hybrid_rbd_CO2_2020}

. 
. local q_carbon_no_ice_mck = ${muehl_cf_carbon_2020}

. 
. local q_carbon_mck = `q_carbon_no_ice_mck' - `q_carbon_yes_hev_mck'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_prod_s_`1' = `wtp_prod_s'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global fed_fisc_ext_`1' = `fed_fisc_ext'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_ep = round(`epsilon', 0.001)

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob' 

. global wtp_loc_`1'= `wtp_loc'

. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_hev_`1' = `wtp_yes_hev'

. global wtp_yes_hev_local_`1' = `wtp_yes_hev_local'

. global wtp_yes_hev_g_`1' = `wtp_yes_hev_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_soc_rbd env_cost
> _wtp cost_wtp wtp_prod_s WTP_cc

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob", "wtp_loc", "wtp
> _soc_rbd", "env_cost_wtp", "cost_wtp", "wtp_prod_s", "WTP_cc"

. 
. global cost_comps_`1' program_cost beh_fisc_ext fed_fisc_ext gas_fi
> sc_ext gas_corp_fisc_e fisc_ext_lr total_cost

. global cost_comps_`1'_commas "program_cost", "beh_fisc_ext", "fed_f
> isc_ext", "gas_fisc_ext", "gas_corp_fisc_e", "fisc_ext_lr", "total_
> cost"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Env.""' 3 `""Local" "
> Env.""' 4 `"Rebound"' 5 `""Dynamic" "Env.""' 6 `""Dynamic" "Price""
> ' 7 `""Gasoline" "Producers""' 8 `"Total WTP"' 10 `""Program" "Cost
> ""' 11 `""State" "Subsidy""' 12 `""Federal" "Subsidy""' 13 `""Gas" 
> "Tax""' 14 `""Profits" "Tax""' 15 `""Climate" "FE""' 16 `""Govt" "C
> ost""' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 7

. global cost_color_start_`1' = 10

. global color_group5_`1' = 15

. 
. 
. 
. 
. 
. global `1'_name "HEV USA - Income Tax Credit"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `wtp_cons'
1

. di `wtp_marg'
0

. di `wtp_inf'
0

. di `wtp_prod_s'
-.00089656

. di `wtp_yes_hev'
-.11437309

. di `wtp_no_ice'
.11972248

. di `wtp_soc'
.00477974

. di `env_cost_wtp'
0

. di `cost_wtp'
0

. di `WTP_cc'
1.0002363

. di `program_cost'
1

. di `beh_fisc_ext'
0

. di `fed_fisc_ext'
0

. di `gas_fisc_ext'
.00086125

. di `fisc_ext_lr'
-.00010723

. di `total_cost'
1.0005157

. di in red "End of Main Estimates"
End of Main Estimates

. 
. di in red "Cost Curve Inputs"
Cost Curve Inputs

. di `epsilon'
-.43033759

. di `discount'
.02

. di `farmer_theta'
-.421

. di `batt_cost'
267.32618

. di `msrp'
33463.66

. di `prod_cost'
267.32618

. di `batt_per_kwh_cost'
176.53246

. di `batt_cap'
1.4690013

. di `fixed_cost_frac'
.99201145

. di `marg_sales'
167700

. di `cum_sales'
917708.31

. di `enviro_ext'
175.89558

. di in red "End of Cost Curve Inputs"
End of Cost Curve Inputs

. 
. di in red "Behavioral Fiscal Externality Inputs"
Behavioral Fiscal Externality Inputs

. di `semie'
.00001286

. di `avg_subsidy'
0

. di `adj_rebate_cost'
3023.0168

. di `rebate_cost'
2011

. di ${cpi_`dollar_year'}
258.846

. di ${cpi_${policy_year}}
172.192

. di in red "End of Fiscal Externality Inputs"
End of Fiscal Externality Inputs

. 
. if "${latex}" == "yes"{
.         if "`hev_cf'" == "muehl" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp total_subsidy tot
> al_hev_damages_glob hev_first_damages_g wtp_yes_hev_g wtp_no_ice_gl
> obal_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac ice_g
> as_consumed_year_one total_hev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc total_hev_damages_loc_n total_damages_loc_n ///
>                                         avg_fed_subsidy avg_fed_sub
> sidy_n fed_fisc_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax_rate 
> fisc_ext_lr ///
>                                         total_cost MVPF semie_paper
>  epsilon hev_mpg hev_gas_consumed_year_one per_diff_cost_driving he
> v_rebound ///
>                                         wtp_yes_hev_loc_no_rbd batt
> _damages_n batt_man_ext hev_cf_mpg gas_corp_fisc_e
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "ice_gas_consu
> med_year_one", "avg_subsidy", "total_subsidy") | inlist("`i'", "tot
> _gal") {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_fed_subsidy",
>  "total_subsidy") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie", "gas_corp
> _fisc_e"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
.                 
.         }
. 
.         if "`hev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004a.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004b.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004c.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_i_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_i_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_i_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_i_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for hev_usa_i under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 50 of 100 (hev_usa_s)
Number of observations (_N) was 0, now 0.
hev_usa_s

. *******************************************************************
> ******************
. /*       0. Program: Hybrid Electric Vehicle Rebate - USA        */
. *******************************************************************
> ******************
. 
. /*
> Gallagher, Kelly Sims, and Erich Muehlegger. 
> "Giving green to get green? Incentives and consumer adoption of hyb
> rid vehicle technology." 
> Journal of Environmental Economics and Management 61.1 (2011): 1-15
> .
> * https://www.sciencedirect.com/science/article/abs/pii/S0095069610
> 000768
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: hev_usa_s no uncorrecte
> d_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local hev_cf = "${hev_cf}"

. if "`hev_cf'" == "muehl" | "`hev_cf'" == "new_car" {
.         local veh_lifespan_type = "car"
. }

. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .374           .       .374       .3
> 74
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. Hybrid and Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         ** cleanest counterfactual 
.         if "`4'" == "baseline"{
.                 keep if year >= 2000 & year <= 2006
.                 forvalues y = 2000(1)2006{
  2.                         qui sum mpg_N if year == `y'
  3.                         local mpg_N_`y' = r(mean)
  4.                         qui sum mpg if year == `y'
  5.                         local mpg_`y' = r(mean)
  6.                         qui sum mpg_cf if year == `y'
  7.                         local mpg_cf_`y' = r(mean)
  8.                 }
.                 local hev_cf_mpg = (`mpg_N_2000' * `mpg_cf_2000' + 
> `mpg_N_2001' * `mpg_cf_2001' + `mpg_N_2002' * `mpg_cf_2002' + `mpg_
> N_2003' * `mpg_cf_2003' + `mpg_N_2004' * `mpg_cf_2004' + `mpg_N_200
> 5' * `mpg_cf_2005' + `mpg_N_2006' * `mpg_cf_2006') ///
>                                                         / (`mpg_N_2
> 000' + `mpg_N_2001' + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + 
> `mpg_N_2005' + `mpg_N_2006')
.                 local hev_mpg = (`mpg_N_2000' * `mpg_2000' + `mpg_N
> _2001' * `mpg_2001' + `mpg_N_2002' * `mpg_2002' + `mpg_N_2003' * `m
> pg_2003' + `mpg_N_2004' * `mpg_2004' + `mpg_N_2005' * `mpg_2005' + 
> `mpg_N_2006' * `mpg_2006') ///
>                                                         / (`mpg_N_2
> 000' + `mpg_N_2001' + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + 
> `mpg_N_2005' + `mpg_N_2006')
.         }

.         else{
.                 keep if year == ${run_year}
(21 observations deleted)
.                 qui sum mpg_cf
.                 local hev_cf_mpg = r(mean)
.                 qui sum mpg
.                 local hev_mpg = r(mean)
.         }

. restore

. 
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("fuel_economy_1975_2022")

.         forvalues y = 2000(1)2006{
  2.                 qui sum RealWorldMPG if RegulatoryClass == "All"
>  & ModelYear == "`y'"
  3.                 local base_mpg`y' = r(mean)
  4.         }

.         qui sum RealWorldMPG if RegulatoryClass == "All" & ModelYea
> r == "2020"

.         local base_mpg2020 = r(mean)

. restore

. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                         
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                         
.         keep if year==${run_year}
(56 observations deleted)

.                 
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.         
.         if "${spec_type}" == "baseline" {
.                 qui import excel "${assumptions}/evs/processed/stat
> e_level_gas_tax_rates", first clear
.                 keep tax2000 tax2001 tax2002 tax2003 tax2004 tax200
> 5 tax2006 state
.                 replace tax2000 = tax2000 * (${cpi_${dollar_year}} 
> / ${cpi_2000}) 
.                 replace tax2001 = tax2001 * (${cpi_${dollar_year}} 
> / ${cpi_2001})
.                 replace tax2002 = tax2002 * (${cpi_${dollar_year}} 
> / ${cpi_2002})
.                 replace tax2003 = tax2003 * (${cpi_${dollar_year}} 
> / ${cpi_2003})
.                 replace tax2004 = tax2004 * (${cpi_${dollar_year}} 
> / ${cpi_2004})
.                 replace tax2005 = tax2005 * (${cpi_${dollar_year}} 
> / ${cpi_2005})
.                 replace tax2006 = tax2006 * (${cpi_${dollar_year}} 
> / ${cpi_2006})
.                 keep if state == "Connecticut" | state == "Dist. of
>  Col." | state == "Maine" | state == "New Mexico"
.                 replace state = "District of Columbia" if state == 
> "Dist. of Col."
.                 merge m:1 state using "${assumptions}/evs/processed
> /pop_by_state_2000_2019", keep(match)
.                 drop pop2007 pop2008 pop2009 pop2010 pop2011 pop201
> 2 pop2013 pop2014 pop2015 pop2016 pop2017 pop2018 pop2019
.                 drop _merge
.                 gen N = pop2000 + pop2001 + pop2002 + pop2003 + pop
> 2004 + pop2005 + pop2006
.                 gen weighted_avg = pop2000 * tax2000 + pop2001 * ta
> x2001 + pop2002 * tax2002 + pop2003 * tax2003 + pop2004 * tax2004 +
>  pop2005 * tax2005 + pop2005 * tax2006
.                 replace weighted_avg = weighted_avg / N
. 
.                 egen N_states = total(N)
.                 egen weighted_avg_states = total(N * weighted_avg)
.                 replace weighted_avg_states = weighted_avg_states /
>  N_states
.                 sum weighted_avg_states
.                 local tax_rate = r(mean) / 100
. 
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if inrange(year, 2000, 2006) // pg. 4
.                 * Gallagher and Muehlegger 2011 look at HEV tax inc
> entives for Q1 2000 through Q4 2006.
. 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) // no state-level gas price data so just gonna keep u
> sing national numbers
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
. 
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes.
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. Hybrid Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs") // same as BEVs

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. HEV Battery Capacity Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         forvalues y = 2000(1)2006{
  2.                 qui sum batt_cap if year == `y'
  3.                 local batt_cap`y' = r(mean)
  4.                 qui sum batt_cap_N if year == `y'
  5.                 local total_sales`y' = r(mean)
  6.         }

.         if "`4'" == "baseline"{
.                 local batt_cap = (`total_sales2000' * `batt_cap2000
> ' + `total_sales2001' * `batt_cap2001' + `total_sales2002' * `batt_
> cap2002' + `total_sales2003' * `batt_cap2003' + `total_sales2004' *
>  `batt_cap2004' + `total_sales2005' * `batt_cap2005' + `total_sales
> 2006' * `batt_cap2006') ///
>                                                 / (`total_sales2000
> ' + `total_sales2001' + `total_sales2002' + `total_sales2003' + `to
> tal_sales2004' + `total_sales2005' + `total_sales2006')
.         }

.         else{
.                 keep if year == ${run_year}
(21 observations deleted)
.                 qui sum batt_cap
.                 local batt_cap = r(mean)
.         }

. restore

. 
. 
. ****************************************************
. /*                  3e. HEV Price Data            */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         forvalues y = 2000(1)2006{
  2.                 replace msrp = msrp * (${cpi_2000} / ${cpi_`y'})
>  if year == `y'
  3.                 qui sum msrp if year == `y'
  4.                 local msrp`y' = r(mean)
  5.         }
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         * calculating fixed price in paper's sample period for use 
> in calculating a constant elasticity
.         local elas_msrp = (`total_sales2000' * `msrp2000' + `total_
> sales2001' * `msrp2001' + `total_sales2002' * `msrp2002' + `total_s
> ales2003' * `msrp2003' + `total_sales2004' * `msrp2004' + `total_sa
> les2005' * `msrp2005' + `total_sales2006' * `msrp2006') ///
>                                         / (`total_sales2000' + `tot
> al_sales2001' + `total_sales2002' + `total_sales2003' + `total_sale
> s2004' + `total_sales2005' + `total_sales2006')

.         if "`4'" == "baseline"{
.                 local msrp = `elas_msrp'
.         }

.         else{
.                 use "${assumptions}/evs/processed/hev_data", clear
.                 keep if year == ${run_year}
(21 observations deleted)
.                 qui sum msrp
.                 local msrp = r(mean) * (${cpi_`dollar_year'} / ${cp
> i_${run_year}})
.         }

. restore

. 
. ****************************************************
. /*               3f. Population Data              */
. ****************************************************
. preserve

.         ** avg over policy's time period (2000-2006) and across sta
> tes
.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/pop_by_state_2000
> _2019", clear
.                 forvalues y = 2000(1)2006{
  2.                         qui sum pop`y' if state == "Connecticut"
  3.                         local CT_pop_`y' = r(mean)
  4.                         qui sum pop`y' if state == "District of 
> Columbia"
  5.                         local DC_pop_`y' = r(mean)
  6.                         qui sum pop`y' if state == "Maine"
  7.                         local ME_pop_`y' = r(mean)
  8.                         qui sum pop`y' if state == "New Mexico"
  9.                         local NM_pop_`y' = r(mean)
 10.                 }
.                 keep if inlist(state, "Connecticut", "District of C
> olumbia", "Maine", "New Mexico")
.                 collapse (sum) pop2000 pop2001 pop2002 pop2003 pop2
> 004 pop2005 pop2006
.                 forvalues y = 2000(1)2006{
  2.                         qui sum pop`y'
  3.                         local total_pop`y' = r(mean)
  4.                 }
.         }

. restore

. 
. ****************************************************
. /* 3g. EV and ICE Age-State-Level VMT Data */
. ****************************************************
. local ub = `lifetime'

. local states CT DC ME NM

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ev_vmt_by_state_b
> y_age", clear // survey data combines hybrids and BEVs
.                 keep if state == "CT" | state == "DC" | state == "M
> E" | state == "NM"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2000(1)2006{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 7 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N 
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local hev_miles_traveled`y' = weighted_a
> vg[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ev_vmt_by_age", c
> lear
.                 local ub = `lifetime'
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local hev_miles_traveled`y' = vmt[`y']
  3.                 }
.         }

. restore

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ice_vmt_by_state_
> by_age", clear
.                 keep if state == "CT" | state == "DC" | state == "M
> E" | state == "NM"
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         local state_pop = 0
  3.                         forvalues y = 2000(1)2006{
  4.                                 local state_pop = `state_pop' + 
> ``s'_pop_`y''
  5.                         }
  6.                         replace population = `state_pop' / 7 if 
> state == "`s'"
  7.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = weighted_a
> vg[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ice_vmt_by_age", 
> clear
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt[`y']
  3.                 }
.         }       

. restore

. 
. ** fixing HEVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local hev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/all_cells_batt_costs_comb
> ined", clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2000(1)2006{
  2.                         qui sum prod_cost_2018 if year == `y'
  3.                         local prod_cost`y' = r(mean)
  4.                 }
.                 local prod_cost = (`mpg_N_2000' * `prod_cost2000' +
>  `mpg_N_2001' * `prod_cost2001' + `mpg_N_2002' * `prod_cost2002' + 
> `mpg_N_2003' * `prod_cost2003' + `mpg_N_2004' * `prod_cost2004' + `
> mpg_N_2005' * `prod_cost2005' + `mpg_N_2006' * `prod_cost2006') ///
>                                                 / (`mpg_N_2000' + `
> mpg_N_2001' + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2
> 005' + `mpg_N_2006')
.                 local batt_per_kwh_cost = `prod_cost'
.         }

.         else{
.                 keep if year == `dollar_year'
(31 observations deleted)
.                 qui sum prod_cost_2018
.                 local prod_cost = r(mean)
.                 local batt_per_kwh_cost = `prod_cost'
.         }

. restore

. 
. ****************************************************
. /* 3h. Subsidy Levels */
. ****************************************************
. ** Federal Subsidy
. 
. local elas_avg_fed_subsidy = 1073 // Table 3

. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local avg_fed_subsidy = `elas_avg_fed_subsidy'
. }

. else{
.         local avg_fed_subsidy = 0
.         local avg_state_subsidy = 0 // no states offer normal hybri
> d subsidies in 2020
. }

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$
. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 1037 // semi-elasticity is calculated f
> or a $1k price decrease
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 1037 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'} / ${c
> pi_${policy_year}})

. local avg_subsidy = `adj_rebate_cost'

. local elas_avg_subsidy = `rebate_cost' // state subsidy, always wan
> t this in the policy year's dollars

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_state_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_state_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. ** adjust semi-elasticity to be for $1 of subsidy instead of $1,000
. local semie_paper = `semie'

. local semie = `semie' / 1000 // this is the in-context semi-elastic
> ity

. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_fed_subsidy' - 0.5 * 
> `elas_avg_subsidy'

. local epsilon = -`semie' * `net_elas_msrp'

. di in red "net msrp for elasticity is `net_elas_msrp'"
net msrp for elasticity is 18492.75680284473

. 
. local net_msrp = `msrp' - `avg_subsidy' - `avg_fed_subsidy'

. local total_subsidy = `avg_subsidy' + `avg_fed_subsidy'

. if "`4'" != "baseline"{
.         local semie = -`epsilon' / `net_msrp'
. }

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie'
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `semie' * `avg_subsidy'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * no utility company producer surplus for HEVs
. 
. * intermediate rebound effect calculations for Latex
. 
. local per_diff_cost_driving = ((`consumer_price' / `hev_mpg') - (`c
> onsumer_price' / `hev_cf_mpg')) / (`consumer_price' / `hev_cf_mpg')

. local hev_rebound = `per_diff_cost_driving' * -0.221

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. * no utility fiscal externality for HEVs
. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' * (1 / `hev_cf_mpg' - 1 / `hev_mp
> g')) * `tax_rate') / ((1 + `discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = -`beh_response' * (${hybrid_cf_gas_fis
> c_ext_`dollar_year'} - ${`hev_cf'_cf_gas_fisc_ext_`dollar_year'}) 
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local fed_fisc_ext = `beh_response' * `avg_fed_subsidy'

. local avg_fed_subsidy_n = `avg_fed_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. 
. if `marg_mvpf' == 1{
.         local total_cost0 = `program_cost' + `gas_fisc_ext' + `fed_
> fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost0 = `program_cost' + `gas_fisc_ext' + `fed_
> fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = 1

. 
. * marginal and inframarginal consumers
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         * producers
.         if "`4'" == "baseline"{
.                 local tot_gal_cf = 0
.                 local tot_gal_hy = 0
.                 local tot_sales = 0
.                 local gas_markup = 0
.                 forvalues y = 2000(1)2006{
  2.                         local tot_gal_cf = `tot_gal_cf' + ${`hev
> _cf'_gal_`y'} * `total_sales`y''
  3.                         local tot_gal_hy = `tot_gal_hy' + ${hybr
> id_gal_`y'} * `total_sales`y''
  4.                         local gas_markup = `gas_markup' + ${nomi
> nal_gas_markup_`y'} * `total_sales`y''
  5.                         local tot_sales = `tot_sales' + `total_s
> ales`y''
  6.                 }
.                 local tot_gal_cf = `tot_gal_cf' / `tot_sales'
.                 local tot_gal_hy = `tot_gal_hy' / `tot_sales'
.                 local tot_gal = `tot_gal_cf' - `tot_gal_hy'
.                 local gas_markup = `gas_markup' / `tot_sales'
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' * (1/`hev_cf_mpg' - 1/`hev_mp
> g')) * (`producer_price' - `producer_mc')) / ((1 + `discount')^(`y'
>  - 1))) // positive
  3.                 }
.         }
. 
.         else{
.                 local tot_gal_cf = ${`hev_cf'_gal_`dollar_year'} //
>  for Latex
.                 local tot_gal_hy = ${hybrid_gal_`dollar_year'} // f
> or Latex
.                 local tot_gal = `tot_gal_cf' - `tot_gal_hy' // for 
> Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * (${hybrid_wtp_p
> rod_s_`dollar_year'} - ${`hev_cf'_wtp_prod_s_`dollar_year'})
.         }
. }

. 
. *no utility producer surplus for HEVs
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' + `wtp_prod_s'
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' + `wtp_prod_s'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a hybrid vehicle
. 
. if "`4'" == "baseline"{
. 
.         local hev_gas_consumed_year_one = `hev_miles_traveled1' / `
> hev_mpg' // for Latex
. 
.         forvalues y = 2000(1)2006{
  2.                 local yes_hev_ext_local_`y' = ${hybrid_cf_damage
> s_loc_`y'}
  3.                 local yes_hev_ext_global_`y' = ${hybrid_cf_damag
> es_glob_`y'}
  4.                 local yes_hev_carbon_content_`y' = ${hybrid_cf_c
> arbon_`y'}
  5.                 local yes_hev_rbd_loc_`y' = ${yes_hev_rbd_loc_`y
> '}
  6.                 local yes_hev_rbd_glob_`y' = ${yes_hev_rbd_glob_
> `y'}
  7.         
.         }
. 
.         local hev_first_damages_g = 0
.         local tot_sales = 0
.         forvalues y = 2000(1)2006{
  2.                 local hev_first_damages_g = `hev_first_damages_g
> ' + ${hybrid_first_damages_g_`y'} * `total_sales`y''
  3.                 local tot_sales = `tot_sales' + `total_sales`y''
  4.         }
.         local hev_first_damages_g = `hev_first_damages_g' / `tot_sa
> les' // for Latex
. 
.         local q_carbon_yes_hev = -`beh_response' * ((`yes_hev_carbo
> n_content_2000' * `mpg_N_2000' + `yes_hev_carbon_content_2001' * `m
> pg_N_2001' + `yes_hev_carbon_content_2002' * `mpg_N_2002' + `yes_he
> v_carbon_content_2003' * `mpg_N_2003' + `yes_hev_carbon_content_200
> 4' * `mpg_N_2004' + `yes_hev_carbon_content_2005' * `mpg_N_2005' + 
> `yes_hev_carbon_content_2006' * `mpg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local q_carbon_yes_hev_mck = `q_carbon_yes_hev' / `beh_resp
> onse'
.         
.         
. 
.         local wtp_yes_hev_local = -`beh_response' * ((`yes_hev_ext_
> local_2000' * `mpg_N_2000' + `yes_hev_ext_local_2001' * `mpg_N_2001
> ' + `yes_hev_ext_local_2002' * `mpg_N_2002' + `yes_hev_ext_local_20
> 03' * `mpg_N_2003' + `yes_hev_ext_local_2004' * `mpg_N_2004' + `yes
> _hev_ext_local_2005' * `mpg_N_2005' + `yes_hev_ext_local_2006' * `m
> pg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_yes_hev_rbd_loc = -`beh_response' * ((`yes_hev_rb
> d_loc_2000' * `mpg_N_2000' + `yes_hev_rbd_loc_2001' * `mpg_N_2001' 
> + `yes_hev_rbd_loc_2002' * `mpg_N_2002' + `yes_hev_rbd_loc_2003' * 
> `mpg_N_2003' + `yes_hev_rbd_loc_2004' * `mpg_N_2004' + `yes_hev_rbd
> _loc_2005' * `mpg_N_2005' + `yes_hev_rbd_loc_2006' * `mpg_N_2006') 
> ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         
.         local wtp_yes_hev_loc_no_rbd = `wtp_yes_hev_local' - `wtp_y
> es_hev_rbd_loc' // for Latex
.         local wtp_yes_hev_global_tot = -`beh_response' * ((`yes_hev
> _ext_global_2000' * `mpg_N_2000' + `yes_hev_ext_global_2001' * `mpg
> _N_2001' + `yes_hev_ext_global_2002' * `mpg_N_2002' + `yes_hev_ext_
> global_2003' * `mpg_N_2003' + `yes_hev_ext_global_2004' * `mpg_N_20
> 04' + `yes_hev_ext_global_2005' * `mpg_N_2005' + `yes_hev_ext_globa
> l_2006' * `mpg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_yes_hev_rbd_glob_tot = -`beh_response' * ((`yes_h
> ev_rbd_glob_2000' * `mpg_N_2000' + `yes_hev_rbd_glob_2001' * `mpg_N
> _2001' + `yes_hev_rbd_glob_2002' * `mpg_N_2002' + `yes_hev_rbd_glob
> _2003' * `mpg_N_2003' + `yes_hev_rbd_glob_2004' * `mpg_N_2004' + `y
> es_hev_rbd_glob_2005' * `mpg_N_2005' + `yes_hev_rbd_glob_2006' * `m
> pg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_yes_hev_g = `wtp_yes_hev_global_tot' * ((1 - ${US
> ShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C}))
.         local wtp_yes_hev_rbd_glob = `wtp_yes_hev_rbd_glob_tot' * (
> (1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGov
> tFutureSCC}))
. 
.         local total_hev_damages_glob = `wtp_yes_hev_global_tot' / `
> beh_response' // for Latex
.         local total_hev_damages_glob_n = `total_hev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_hev_damages_loc_n = `wtp_yes_hev_local' / `beh_
> response' // for Latex
. }

. 
. else{
.         local hev_gas_consumed_year_one = `hev_miles_traveled1' / `
> hev_mpg' // for Latex
.         local total_hev_damages_glob = ${hybrid_cf_damages_glob_`do
> llar_year'} - ${yes_hev_rbd_glob_`dollar_year'} // for Latex
.         local total_hev_damages_glob_n = `total_hev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_hev_damages_loc_n = ${hybrid_cf_damages_loc_`do
> llar_year'} / `net_msrp' // for Latex
.         local hev_first_damages_g = ${hybrid_first_damages_g_2020} 
> // for Latex
. 
.         local wtp_yes_hev_local = -`beh_response' * ${hybrid_cf_dam
> ages_loc_`dollar_year'} // with rebound
.         local wtp_yes_hev_rbd_loc = -`beh_response' * ${yes_hev_rbd
> _loc_`dollar_year'}
.         local wtp_yes_hev_loc_no_rbd = `wtp_yes_hev_local' - `wtp_y
> es_hev_rbd_loc' // for Latex
. 
.         local wtp_yes_hev_global_tot = -`beh_response' * `total_hev
> _damages_glob' // no rebound
.         local wtp_yes_hev_rbd_glob_tot = -`beh_response' * ${yes_he
> v_rbd_glob_`dollar_year'}
. 
.         local wtp_yes_hev_g = `wtp_yes_hev_global_tot' * ((1 - ${US
> ShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C}))
.         local wtp_yes_hev_rbd_glob = `wtp_yes_hev_rbd_glob_tot' * (
> (1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGov
> tFutureSCC}))
. 
.         local q_carbon_yes_hev = -`beh_response' * ${hybrid_cf_carb
> on_`dollar_year'}
.         local q_carbon_yes_hev_mck = ${hybrid_cf_carbon_`dollar_yea
> r'}
. }

. 
. local wtp_soc_rbd = `wtp_yes_hev_rbd_glob' + `wtp_yes_hev_rbd_loc'

. 
. 
. local yes_hev_local_ext = `wtp_yes_hev_local' / `beh_response'

. local yes_hev_global_ext_tot = `wtp_yes_hev_global_tot' / `beh_resp
> onse'

. local wtp_yes_hev = `wtp_yes_hev_loc_no_rbd' + `wtp_yes_hev_g'

. 
. 
. local yes_hev_ext = `wtp_yes_hev' / `beh_response'

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. if "`4'" == "baseline"{
.         forvalues y = 2000(1)2006{
  2.                 local no_ice_ext_local_`y' = ${`hev_cf'_cf_damag
> es_loc_`y'}
  3.                 local no_ice_ext_global_`y' = ${`hev_cf'_cf_dama
> ges_glob_`y'}
  4.                 local no_ice_carbon_content_`y' = ${`hev_cf'_cf_
> carbon_`y'}
  5.         }
. 
.         
.         local wtp_no_ice_local = `beh_response' * ((`no_ice_ext_loc
> al_2000' * `mpg_N_2000' + `no_ice_ext_local_2001' * `mpg_N_2001' + 
> `no_ice_ext_local_2002' * `mpg_N_2002' + `no_ice_ext_local_2003' * 
> `mpg_N_2003' + `no_ice_ext_local_2004' * `mpg_N_2004' + `no_ice_ext
> _local_2005' * `mpg_N_2005' + `no_ice_ext_local_2006' * `mpg_N_2006
> ') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_no_ice_global_tot = `beh_response' * ((`no_ice_ex
> t_global_2000' * `mpg_N_2000' + `no_ice_ext_global_2001' * `mpg_N_2
> 001' + `no_ice_ext_global_2002' * `mpg_N_2002' + `no_ice_ext_global
> _2003' * `mpg_N_2003' + `no_ice_ext_global_2004' * `mpg_N_2004' + `
> no_ice_ext_global_2005' * `mpg_N_2005' + `no_ice_ext_global_2006' *
>  `mpg_N_2006') ///
>                                                                    
>                              / (`mpg_N_2000' + `mpg_N_2001' + `mpg_
> N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg_N_2006'
> ))
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
.         local ice_gas_consumed_year_one = `ice_miles_traveled1' / `
> hev_cf_mpg' // for Latex
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_hev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
. 
.         local q_carbon_no_ice = `beh_response' * ((`no_ice_carbon_c
> ontent_2000' * `mpg_N_2000' + `no_ice_carbon_content_2001' * `mpg_N
> _2001' + `no_ice_carbon_content_2002' * `mpg_N_2002' + `no_ice_carb
> on_content_2003' * `mpg_N_2003' + `no_ice_carbon_content_2004' * `m
> pg_N_2004' + `no_ice_carbon_content_2005' * `mpg_N_2005' + `no_ice_
> carbon_content_2006' * `mpg_N_2006') / (`mpg_N_2000' + `mpg_N_2001'
>  + `mpg_N_2002' + `mpg_N_2003' + `mpg_N_2004' + `mpg_N_2005' + `mpg
> _N_2006'))
.         local q_carbon_no_ice_mck = `q_carbon_no_ice' / `beh_respon
> se'
. }

. else{
.         local wtp_no_ice_local = `beh_response' * ${`hev_cf'_cf_dam
> ages_loc_`dollar_year'}
.         local wtp_no_ice_global_tot = `beh_response' * ${`hev_cf'_c
> f_damages_glob_`dollar_year'}
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local ice_gas_consumed_year_one = `ice_miles_traveled1' / `
> hev_cf_mpg' // for Latex
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_hev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
.         
.         local q_carbon_no_ice = `beh_response' * ${`hev_cf'_cf_carb
> on_`dollar_year'}
.         local q_carbon_no_ice_mck = ${`hev_cf'_cf_carbon_`dollar_ye
> ar'}
. }

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions
. 
. * Averaging the SCC for 2000-2006
. if "`4'" == "baseline"{
.         local relevant_scc = 0
.         local total_sales = 0
.         forvalues y = 2000(1)2006{
  2.                 local relevant_scc = `relevant_scc' + ${sc_CO2_`
> y'} * `total_sales`y''
  3.                 local total_sales = `total_sales' + `total_sales
> `y''
  4.         }
.         local relevant_scc = `relevant_scc' / `total_sales'
. }

. else{
.         local relevant_scc = ${sc_CO2_`dollar_year'}
. }

. 
. local batt_emissions = 214 + 20 // from Table 9 of Pipitone et al. 
> (2021)

. 
. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_hev' + `wtp_no_ice' - `batt_man_ext'

. local wtp_glob = `wtp_yes_hev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_hev_loc_no_rbd' + `wtp_no_ice_local'

. 
. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_hev_local')
>  / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_h
> ev_global_tot' - `batt_man_ext_tot') / `beh_response'

. 
. local enviro_ext = `local_enviro_ext' + `global_enviro_ext_tot'

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.         ** --------------------- COST CURVE --------------------- *
> *
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`enviro_ext')
.         local dyn_enviro = `r(enviro_mvpf)'
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`local_enviro_ext')
.         local dyn_enviro_local = `r(enviro_mvpf)'
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`global_enviro_ext_tot')
.         local dyn_enviro_global_tot = `r(enviro_mvpf)'
.         local dyn_enviro_global = `dyn_enviro_global_tot' * ((1 - $
> {USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutur
> eSCC}))
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost'
.                 local env_cost_wtp = `dyn_enviro' * `program_cost' 
> // same as local plus global_tot
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost'
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost'
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost'
. 
.                 local env_cost_wtp = `env_cost_wtp_l' + `env_cost_w
> tp_g' // switching to not include the piece of the global dynamic e
> nviro that will go to the FE
. 
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_hev'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_hev_mck'

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_hev_gl
> obal_tot' + `env_cost_wtp_global_tot' + `batt_man_ext_tot') * ${USS
> hareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost0' + `fisc_ext_lr' + `gas_corp_fisc_e
> '

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`hev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${hybrid_cf_gas_savings_`dollar_year'})
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_savings' + `wtp_soc_rb
> d' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_hev_local' + `wtp_no_ic
> e_local' + `env_cost_wtp_l' + `wtp_savings'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_hev_global_tot' + `wtp_no_ice_global_tot' + `env_c
> ost_wtp_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_hev_global_to
> t' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot') + 0.9 * `
> cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. 
. 
. local hev_price = 28359.08333 // from KBB, look at spreadsheet

. local ice_price = 27012.5 // from KBB, look at spreadsheet

. 
. local lifetime_hev_gas_cost = ${hybrid_cf_gas_savings_2020} - ${hyb
> rid_wtp_prod_s_2020} - 0.08 * ${hybrid_cf_gas_savings_2020} - ${hyb
> rid_cf_gas_fisc_ext_2020}

. di in red "hev gas cost is `lifetime_hev_gas_cost'"
hev gas cost is 4007.879397475849

. local lifetime_ice_gas_cost = ${muehl_cf_gas_savings_2020} - ${mueh
> l_wtp_prod_s_2020} - 0.08 * ${muehl_cf_gas_savings_2020} - ${muehl_
> cf_gas_fisc_ext_2020}

. di in red "ice gas cost is `lifetime_ice_gas_cost'"
ice gas cost is 4154.109255862792

. 
. 
. local resource_cost = `hev_price' + `lifetime_hev_gas_cost' - `ice_
> price' - `lifetime_ice_gas_cost'

. di in red "resource cost is `resource_cost'"
resource cost is 1200.353471613056

. local q_carbon_yes_hev_mck = ${hybrid_cf_carbon_2020} + ((214 + 20)
>  * 0.001) - ${hybrid_rbd_CO2_2020}

. 
. local q_carbon_no_ice_mck = ${muehl_cf_carbon_2020}

. 
. local q_carbon_mck = `q_carbon_no_ice_mck' - `q_carbon_yes_hev_mck'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_prod_s_`1' = `wtp_prod_s'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global fed_fisc_ext_`1' = `fed_fisc_ext'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_ep = round(`epsilon', 0.001)

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1'= `wtp_loc'

. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_hev_`1' = `wtp_yes_hev'

. global wtp_yes_hev_local_`1' = `wtp_yes_hev_local'

. global wtp_yes_hev_g_`1' = `wtp_yes_hev_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_soc_rbd env_cost
> _wtp cost_wtp wtp_prod_s WTP_cc

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob", "wtp_loc", "wtp
> _soc_rbd", "env_cost_wtp", "cost_wtp", "wtp_prod_s", "WTP_cc"

. 
. global cost_comps_`1' program_cost beh_fisc_ext fed_fisc_ext gas_fi
> sc_ext gas_corp_fisc_e fisc_ext_lr total_cost

. global cost_comps_`1'_commas "program_cost", "beh_fisc_ext", "fed_f
> isc_ext", "gas_fisc_ext", "gas_corp_fisc_e", "fisc_ext_lr", "total_
> cost"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Env.""' 3 `""Local" "
> Env.""' 4 `"Rebound"' 5 `""Dynamic" "Env.""' 6 `""Dynamic" "Price""
> ' 7 `""Gasoline" "Producers""' 8 `"Total WTP"' 10 `""Program" "Cost
> ""' 11 `""State" "Subsidy""' 12 `""Federal" "Subsidy""' 13 `""Gas" 
> "Tax""' 14 `""Profits" "Tax""' 15 `""Climate" "FE""' 16 `""Govt" "C
> ost""' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 7

. global cost_color_start_`1' = 10

. global color_group5_`1' = 15

. 
. 
. 
. 
. 
. global `1'_name "HEV USA - Sales Tax Waiver"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `wtp_cons'
1

. di `wtp_marg'
0

. di `wtp_inf'
0

. di `wtp_prod_s'
-.01440929

. di `wtp_yes_hev'
-1.8381791

. di `wtp_no_ice'
1.9241534

. di `wtp_soc'
.076819

. di `env_cost_wtp'
0

. di `cost_wtp'
0

. di `WTP_cc'
1.0037981

. di `program_cost'
1

. di `beh_fisc_ext'
0

. di `fed_fisc_ext'
0

. di `gas_fisc_ext'
.0138418

. di `fisc_ext_lr'
-.00172336

. di `total_cost'
1.0082881

. di in red "End of Main Estimates"
End of Main Estimates

. 
. di in red "Cost Curve Inputs"
Cost Curve Inputs

. di `epsilon'
-6.916291

. di `discount'
.02

. di `farmer_theta'
-.421

. di `batt_cost'
267.32618

. di `msrp'
33463.66

. di `prod_cost'
267.32618

. di `batt_per_kwh_cost'
176.53246

. di `batt_cap'
1.4690013

. di `fixed_cost_frac'
.99201145

. di `marg_sales'
167700

. di `cum_sales'
917708.31

. di `enviro_ext'
175.89558

. di in red "End of Cost Curve Inputs"
End of Cost Curve Inputs

. 
. di in red "Behavioral Fiscal Externality Inputs"
Behavioral Fiscal Externality Inputs

. di `semie'
.00020668

. di `avg_subsidy'
0

. di `adj_rebate_cost'
1558.8605

. di `rebate_cost'
1037

. di ${cpi_`dollar_year'}
258.846

. di ${cpi_${policy_year}}
172.192

. di in red "End of Fiscal Externality Inputs"
End of Fiscal Externality Inputs

. 
. if "${latex}" == "yes"{
.         if "`hev_cf'" == "muehl" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp total_subsidy tot
> al_hev_damages_glob hev_first_damages_g wtp_yes_hev_g wtp_no_ice_gl
> obal_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac ice_g
> as_consumed_year_one total_hev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc total_hev_damages_loc_n total_damages_loc_n ///
>                                         avg_fed_subsidy avg_fed_sub
> sidy_n fed_fisc_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax_rate 
> fisc_ext_lr ///
>                                         total_cost MVPF semie_paper
>  epsilon hev_mpg hev_gas_consumed_year_one per_diff_cost_driving he
> v_rebound ///
>                                         wtp_yes_hev_loc_no_rbd batt
> _damages_n batt_man_ext hev_cf_mpg gas_corp_fisc_e
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "ice_gas_consu
> med_year_one", "avg_subsidy", "total_subsidy") | inlist("`i'", "tot
> _gal") {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_fed_subsidy",
>  "total_subsidy") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie", "gas_corp
> _fisc_e"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
. 
.         }
. 
.         if "`hev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004d.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004e.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004f.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_s_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_s_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_s_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hev_usa_s_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for hev_usa_s under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 51 of 100 (hitaj_ger)
Number of observations (_N) was 0, now 0.
hitaj_ger

. **************************************************
. /*       0. Program: FIT Germany            */
. **************************************************
. 
. /*
> The impact of a feed-in tariff on wind power development in Germany
> Claudia Hitaj, Andreas Löschel
> 
> https://www.sciencedirect.com/science/article/pii/S0928765517304165
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -1.665239           .  -1.665239  -1.6652
> 39

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.         
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. *Getting the elasticity
. local epsilon = `e_demand'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0280 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("hitaj_ger") marg_sales(`marg_sales') cum_sales(`cu
> m_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta(`f
> armer_theta') subsidy_max(`subsidy_max') current_ptc(`current_ptc')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Hitaj (Germany)"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004g.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004h.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004i.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ger_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ger_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ger_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ger_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for hitaj_ger under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 52 of 100 (hitaj_ptc)
Number of observations (_N) was 0, now 0.
hitaj_ptc

. *******************************************************************
> ******************
. /*       0. Program: PTC Wind subsidies        */
. *******************************************************************
> ******************
. 
. /*
> Hitaj, Claudia. 
> "Wind power development in the United States." 
> Journal of Environmental Economics and Management 65.3 (2013): 394-
> 410.
> https://www.sciencedirect.com/science/article/pii/S0095069612001003
> */
. 
. *Policy variation is at the $0.01 per kwh
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"lpm"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      .00317           .     .00317     .003
> 17
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.         
.         
.         // Adjust Values if Calculating In-Context MVPFs.
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseli
> ne_gen" {
.                 
.                 local capacity_factor = `capacity_factor_context' /
> / Land Based Wind Market Report - Capacity Factor in Table 34 (2007
> ). 
.                 local average_size = 1.65 // in MW frrom https://pu
> bs.usgs.gov/sir/2011/5036/sir2011-5036.pdf on Page 3.
.                 local current_ptc = 0.015 * (${cpi_`dollar_year'}/$
> {cpi_1992}) // Enacted in 1992 and inflation adjusted
.                         *PTC is roughly $15 per MWh in 1992 dollars
>  and is inflation adjusted during the sample period
. 
.         }

.         
.         // Calculate weighted average over the sample period for th
> e in-context LCOE
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("wind_lcoe")
(5 vars, 25 obs)

.                 keep if Year >= 2000 & Year <= ${policy_year} // On
> ly have capacity additions data starting in 1999
(17 observations deleted)

.                 gen ptc_nominal = .
(8 missing values generated)

.                 gen lcoe_nominal = LCOE

.                 qui sum Year

.                 forvalues y = `r(min)'(1)`r(max)' {
  2.                         replace ptc_nominal = 15 * (${cpi_`y'}/$
> {cpi_1992}) if Year == `y'
  3.                         replace lcoe_nominal = LCOE * (${cpi_`y'
> }/${cpi_2022}) if Year == `y'
  4.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 replace ptc_nominal = 0 if Year == 2000 | Year == 2
> 002 | Year == 2004 | Year == 2010 // expired in those years        
>   
(3 real changes made)

.                 collapse (mean) LCOE ptc_nominal lcoe_nominal [aw=c
> apacity_additions]

.                 local avg_lcoe = (LCOE[1] * (${cpi_2007}/${cpi_2022
> }))/1000

.                 local avg_ptc = ptc_nominal[1]/1000

.                 local avg_nominal_lcoe = lcoe_nominal[1]/1000

.         restore

.         
.         if "${lcoe_scaling}" == "yes" {
.                 local lcoe = ${scalar} * `lcoe'
.         }

. 
.         if "${subsidy_loop}" == "yes" {
.                 local current_ptc = ${fed_sub_loop}
.         }

. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         local cum_sales = 93924 / `average_size' // 742,689 (2020) 
> or 93,924 (2007), world numbers. Available in replication package o
> f cited paper (lcoe_learning_data_wind).
.         local marg_sales = 19967 / `average_size' // 92,490 for (20
> 20) or 19,967 (2007) , world numbers. Available in replication pack
> age of cited paper (lcoe_learning_data_wind).
.         local lcoe = `avg_lcoe'
. }

. 
. 
. *Getting the elasticity -- From Hitaj 2013 (Table A1).
. local pos_cap = 612

. local zero_cap = 20908

. local semie_paper = -`lpm'/(`pos_cap'/(`pos_cap' + `zero_cap'))

. 
. *Discount the flow of LCOE and PTC to the present. 
. local capital_discount = 0.0280 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. *In-Context (for elasticity)
. local lcoe_discounted_incontext = `avg_nominal_lcoe' + ((`avg_nomin
> al_lcoe')/`capital_discount') * (1 - (1/(1+`capital_discount')^(`li
> fetime' - 1)))

. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. local ptc_incontext = `avg_ptc' + ((`avg_ptc')/`ptc_discount_rate')
>  * (1 - (1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio_incontext = `ptc_discounted' / (`lcoe_discounted_incont
> ext' - `ptc_incontext')

. 
. *2020 (for Semie)
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. local ptc_2020 = `current_ptc' + ((`current_ptc')/`ptc_discount_rat
> e') * (1 - (1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. *Get elasticity w.r.t cost using in-context ratio
. local epsilon_cost_curve = `semie_paper' / `ratio_incontext'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon_cost_curve' > 0 {
.         local epsilon_cost_curve = - 0.00001
. }

. 
. local semie = `semie_paper' * ((`lcoe_discounted_incontext' - `ptc_
> incontext') / (`lcoe_discounted' - `ptc_2020'))

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         local semie = `semie_paper'
. }

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. *Constant Semie
. if "${constant_semie}" == "yes" {
.         local ratio_adjusted = `ptc_discounted' / (`lcoe_discounted
> ' - `ptc_2020')
.         local semie = `semie_paper'
.         local epsilon_cost_curve = `semie_paper' / `ratio_adjusted'
. }

. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("hitaj_ptc") marg_sales(`marg_sales') cum_sales(`cu
> m_sales') prod_cost(`prod_cost') epsilon(`epsilon_cost_curve') farm
> er_theta(`farmer_theta') subsidy_max(`subsidy_max') current_ptc(`cu
> rrent_ptc')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Hitaj PTC"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004j.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004k.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004l.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ptc_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ptc_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ptc_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hitaj_ptc_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for hitaj_ptc under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 53 of 100 (hughes_csi)
Number of observations (_N) was 0, now 0.
hughes_csi

. *******************************************************************
> ******************
. /*       0. Program: California Solar Initiative (CSI) solar subsid
> ies              */
. *******************************************************************
> ******************
. 
. /*
> Hughes, Jonathan E., and Molly Podolefsky. 
> "Getting green with solar subsidies: evidence from the California s
> olar initiative." 
> Journal of the Association of Environmental and Resource Economists
>  2, no. 2 (2015): 235-275.
> *https://www.journals.uchicago.edu/doi/full/10.1086/681131?casa_tok
> en=tMBjHRJhuP8AAAAA%3AGqm_xAxaHPR8iF_BuMJZX_pMjWnYGqw1VkZEUAaLwj9DL
> P8kJGCA5pOULqJcTIdvIPeMFCRgKZhFbg
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: hughes_csi no uncorrect
> ed_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"markup"' `"semie_est"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .46           .        .46        .
> 46

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .963           .       .963       .9
> 63
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.                 if "${spec_type}" == "baseline"{
.                         local dollar_year = ${policy_year}
.                 }

.                 
.                 if "${spec_type}" == "current"{
.                         local dollar_year = ${current_year}
.                 }

.         restore

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local system_capacity = ${system_capacity} // KW

.                 local annual_output = ${output} / (`system_capacity
> ' * 1000) // KWh per Year per Watt (KW * 1000)

.                 local lifetime = ${lifetime}

.                 local marginal_val = ${marginal_val}

.                 local federal_subsidy = 0.26 // Percent of Cost Sub
> sidized

.                 local cost_per_watt_baseline = ${cost_per_watt} * (
> ${cpi_`dollar_year'} / ${cpi_2022}) // Expressed in 2022 dollars in
> itially.

.         restore

.         
.         if "${subsidy_loop}" == "yes" {
.                 local federal_subsidy = ${fed_sub_loop}
.         }

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************    
.         ** Cost assumptions
.         local pre_cost_per_watt = ${cost_per_watt} * (${cpi_`dollar
> _year'} / ${cpi_2022})

.         local cost_per_watt = `pre_cost_per_watt' * (1 - `federal_s
> ubsidy')

.         local avg_state_rebate = 0 // Assuming no average state reb
> ate.

.         local avg_fed_rebate = `pre_cost_per_watt' * `federal_subsi
> dy'

.         
.         local system_capacity_paper = (5.68*1192 + 5.19*1804)/(1192
> +1804) // kW, weighted average installations across three utilities
>  (Table 3)

.         
.         local state_rebate_paper = ((1.21*1192 + 1.72*1804)/(1192+1
> 804)) * (${cpi_${policy_year}}/${cpi_2009}) // weighted average sta
> te rebate Table 3

.         
.         local cost_per_watt_paper = (((42990*1192 + 39224*1804)/(11
> 92+1804))/(`system_capacity_paper'*1000) * (${cpi_${policy_year}}/$
> {cpi_2009})) // $/W, weighted average total system cost (Table 3) &
>  Assuming dollar year is from middle of sample (2009)

.         
.         if "${spec_type}" == "baseline" {
.                 local federal_subsidy = 0.3
.                 local system_capacity = `system_capacity_paper'
.                 
.                 local annual_output = 7477 / (`system_capacity' * 1
> 000) // Inputting California values & baseline size from https://pv
> watts.nrel.gov/pvwatts.php
.                 
.                 local avg_state_rebate = `state_rebate_paper'
.                 local pre_cost_per_watt = `cost_per_watt_paper'
.                 
.                 local avg_fed_rebate = (`avg_state_rebate' + `pre_c
> ost_per_watt') * `federal_subsidy'
.                 
.                 local cost_per_watt = `pre_cost_per_watt' - `avg_fe
> d_rebate' - `avg_state_rebate'
.         }

.         
. //      local cost_in_context = `cost_per_watt_paper' - `state_reba
> te_paper' - ((`cost_per_watt_paper' + `state_rebate_paper') * 0.3)
. 
.         local cost_in_context = `cost_per_watt_paper' - `state_reba
> te_paper' - ((`cost_per_watt_paper') * 0.3)

.         
.         if "${spec_type}" == "baseline_gen" {
.                 local federal_subsidy = 0.3
.                 local pre_cost_per_watt = 5.40 * (${cpi_`dollar_yea
> r'}/${cpi_2022}) // NREL 2012
.                 
.                 local cost_per_watt = `pre_cost_per_watt' * (1-`fed
> eral_subsidy')
.                 local avg_fed_rebate = `pre_cost_per_watt' * `feder
> al_subsidy'
.         }

.         
.         *Calculating the Elasticity
. //      local semie_paper = -1 * (`daily_install_rate_increase' / 1
> 00) * 10 // Converting from 10 cent change to $1 change
.         
.         local semie_paper = -1 * (exp(`semie_est' * 0.1) - 1) * 10

.         
.         local e_demand = (`semie_paper' * `cost_in_context') * (1/0
> .778)

. 
.         local semie = `e_demand'/`cost_per_watt'

.         local pass_through = ${solar_passthrough}

.         
.         if "${spec_type}" == "baseline" {
.                 local semie = `semie_paper'
.                 local pass_through = 0.778
.         }

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. * learning by doing
. local cum_sales = (713918 * 1000)/`system_capacity' // 71391800 MW,
>  as of 2020; 176,113.39 MW, as of 2014

. local marg_sales = (128050.40 * 1000)/`system_capacity' // 128050.4
> 0 MW, in 2020; 39,541.25 MW, in 2014

. 
. if `dollar_year' == ${policy_year} {
.         local cum_sales = (101645.45 * 1000)/`system_capacity'
.         local marg_sales = (29440.00 * 1000)/`system_capacity'  
. }

. 
. solar, policy_year(${policy_year}) spec(${spec_type}) semie(`semie'
> ) replacement(`replacement') p_name("hughes_csi") marg_sales(`marg_
> sales') cum_sales(`cum_sales') annual_output(`annual_output') syste
> m_capacity(`system_capacity') pre_cost_per_watt(`pre_cost_per_watt'
> ) avg_state_rebate(`avg_state_rebate') e_demand(`e_demand') pass_th
> rough(`pass_through') farmer_theta(`farmer_theta') federal_subsidy(
> `federal_subsidy')
(4 vars, 8 obs)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'
(12 vars, 162 obs)
Global Benefits: 4.299228578327845
Local Benefits: .6306279782445949
Global Rebound: .9304632009687753
Local Rebound: .1235185966699313
Dynamic Price: 0
Dynamic Enviro: 0
Producer Loss: .5350410260223094
WTP_cc: 31036.96119031667
1.5953334

.  
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004m.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004n.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004o.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hughes_csi_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hughes_csi_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hughes_csi_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hughes_csi_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for hughes_csi under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 54 of 100 (hybrid_cr)
Number of observations (_N) was 0, now 0.
hybrid_cr

. *******************************************************************
> ******************
. /*       0. Program: Federal Hybrid Vehicle Income Tax Credit      
>       */
. *******************************************************************
> ******************
. 
. /*
> Beresteanu, Arie, and Shanjun Li. 
> "Gasoline prices, government support, and the demand for hybrid veh
> icles in the United States." 
> International Economic Review 52, no. 1 (2011): 161-182.
> * https://onlinelibrary-wiley-com.libproxy.mit.edu/doi/epdf/10.1111
> /j.1468-2354.2010.00623.x
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: hybrid_cr no uncorrecte
> d_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local hev_cf = "${hev_cf}"

. if "`hev_cf'" == "muehl" | "`hev_cf'" == "new_car" {
.         local veh_lifespan_type = "car"
. }

. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"hybrid_increase"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .1975           .      .1975      .19
> 75
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. Hybrid and Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         ** cleanest counterfactual 
.         * just 2006 so no need for averaging
.         keep if year == ${run_year}
(21 observations deleted)

.         qui sum mpg_N if year == ${run_year}

.         local mpg_N_${run_year} = r(mean)

.         qui sum mpg

.         local hev_mpg = r(mean)

.         qui sum mpg_cf

.         local hev_cf_mpg = r(mean)

. restore

. 
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("fuel_economy_1975_2022")

.         qui sum RealWorldMPG if RegulatoryClass == "All" & ModelYea
> r == "2006"

.         local base_mpg2006 = r(mean)

.         qui sum RealWorldMPG if RegulatoryClass == "All" & ModelYea
> r == "2020"

.         local base_mpg2020 = r(mean)

. restore

. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                         
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                         
.         keep if year==${run_year}
(56 observations deleted)

.                 
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.         
.         if "${spec_type}" == "baseline" {
.                 qui import excel "${assumptions}/evs/processed/stat
> e_level_gas_tax_rates", first clear
.                 keep tax2006 state
.                 replace tax2006 = tax2006 * (${cpi_${dollar_year}} 
> / ${cpi_2006})
.                 keep if state == "Colorado" | state == "Georgia" | 
> state == "New York" | state == "Ohio" | state == "Pennsylvania" | s
> tate == "Iowa" | state == "Nevada" | state == "Arkansas" | state ==
>  "Connecticut" | state == "Wisconsin" | state == "Florida" | state 
> == "New Mexico" | state == "Tennessee" | state == "Arizona" | state
>  == "Missouri" | state == "Texas" | state == "California" | state =
> = "Washington"
.                 merge 1:1 state using "${assumptions}/evs/processed
> /pop_by_state_2000_2019", keep(match)
.                 keep pop2006 state tax2006
.                 
.                 egen N_states = total(pop2006)
.                 egen weighted_avg_states = total(pop2006 * tax2006)
.                 replace weighted_avg_states = weighted_avg_states /
>  N_states
.                 sum weighted_avg_states
.                 local tax_rate = r(mean) / 100
. 
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if year == 2006
.                 * Beresteanu and Li 2011 look at the HEV federal ta
> x credit for Q1 2006 through Q4 2006
. 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) // no state-level gas price data so just gonna keep u
> sing national numbers
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
. 
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes.
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. Hybrid Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs") // same as BEVs

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. HEV Battery Capacity Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         ** just 2006, so no averaging
.         keep if year == ${run_year}
(21 observations deleted)

.         qui sum batt_cap

.         local batt_cap = r(mean)

. restore

. 
. ****************************************************
. /*                  3e. HEV Price Data            */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/hev_data", clear

.         * just 2006, so no averaging
.         qui sum msrp if year == 2006

.         local elas_msrp = r(mean)

.         keep if year == ${run_year}
(21 observations deleted)

.         qui sum msrp

.         local msrp = r(mean) * (${cpi_`dollar_year'} / ${cpi_${run_
> year}})

. restore

. 
. ****************************************************
. /*               3f. Population Data              */
. ****************************************************
. preserve

.         ** avg across states
.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/pop_by_state_2000
> _2019", clear
.                 qui sum pop2006 if state == "New York"
.                 local NY_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "New Mexico"
.                 local NM_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Georgia"
.                 local GA_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Ohio"
.                 local OH_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Colorado"
.                 local CO_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Iowa"
.                 local IA_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Connecticut"
.                 local CT_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Texas"
.                 local TX_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Pennsylvania"
.                 local PA_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Nevada"
.                 local NV_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Arkansas"
.                 local AR_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Wisconsin"
.                 local WI_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Florida"
.                 local FL_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Tennessee"
.                 local TN_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Arizona"
.                 local AZ_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Missouri"
.                 local MO_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "California"
.                 local CA_pop_2006 = r(mean)
.                 qui sum pop2006 if state == "Washington"
.                 local WA_pop_2006 = r(mean)
.                 keep if inlist(state, "New York", "New Mexico", "Ge
> orgia", "Ohio", "Colorado", "Iowa", "Connecticut", "Texas", "Pennsy
> lvania") ///
>                                 | inlist(state, "Nevada", "Arkansas
> ", "Wisconsin", "Florida", "Tennessee", "Arizona", "Missouri", "Cal
> ifornia", "Washington")
.                 collapse (sum) pop2006
.                 qui sum pop2006
.                 local total_pop2006 = r(mean)
.         }

. restore

. 
. ****************************************************
. /* 3g. EV and ICE Age-State-Level VMT Data */
. ****************************************************
. local ub = `lifetime'

. local states NY NM GA OH CO IA CT TX PA NV AR WI FL TN AZ MO CA WA

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ev_vmt_by_state_b
> y_age", clear // survey data combines hybrids and BEVs
.                 keep if inlist(state, "NY", "NM", "GA", "OH", "CO",
>  "IA", "CT", "TX", "PA") ///
>                                 | inlist(state, "NV", "AR", "WI", "
> FL", "TN", "AZ", "MO", "CA", "WA")
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         replace population = ``s'_pop_2006' if s
> tate == "`s'" 
  3.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N 
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local hev_miles_traveled`y' = weighted_a
> vg[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ev_vmt_by_age", c
> lear
.                 local ub = `lifetime'
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local hev_miles_traveled`y' = vmt[`y']
  3.                 }
.         }

. restore

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ice_vmt_by_state_
> by_age", clear
.                 keep if inlist(state, "NY", "NM", "GA", "OH", "CO",
>  "IA", "CT", "TX", "PA") ///
>                                 | inlist(state, "NV", "AR", "WI", "
> FL", "TN", "AZ", "MO", "CA", "WA")
.                 keep state age vmt_by_state_age
.                 gen population = .
.                 foreach s of local states{
  2.                         replace population = ``s'_pop_2006' if s
> tate == "`s'"
  3.                 }
.                 bysort age: egen N = total(population)
.                 by age: egen weighted_avg = total(vmt_by_state_age 
> * population)
.                 replace weighted_avg = weighted_avg / N
. 
.                 local ub = `lifetime'
.                 duplicates drop age weighted_avg, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = weighted_a
> vg[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ice_vmt_by_age", 
> clear
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt[`y']
  3.                 }
.         }       

. restore

. 
. ** fixing HEVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local hev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/all_cells_batt_costs_comb
> ined", clear

.         * just 2006, so no averaging
.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum prod_cost_2018

.         local prod_cost = r(mean)

.         local batt_per_kwh_cost = `prod_cost'

. restore

. 
. ****************************************************
. /* 3h. Subsidy Levels */
. ****************************************************
. ** State Subsidy
. 
. local elas_avg_state_subsidy = (2011 * 465 + 1037 * 173) / (465 + 1
> 73) // from Table 3 of Gallagher and Muehlegger (2011)

. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local avg_state_subsidy = `elas_avg_state_subsidy'
. }

. else{
.         local avg_fed_subsidy = 0
.         local avg_state_subsidy = 0 // no states offer normal hybri
> d subsidies in 2020
. }

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$
. local subsidy = 2276

. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 2276 // in 2006$, Table 11 column 2 for
>  2006
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 2276 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'} / ${c
> pi_${policy_year}})

. local avg_subsidy = `adj_rebate_cost'

. local elas_avg_subsidy = `rebate_cost' // federal subsidy, always w
> ant this in the policy year's dollars

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_fed_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_fed_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. ** adjust semi-elasticity to be for $1 of subsidy instead of $2,276
. local semie_paper = `hybrid_increase'

. local semie = `hybrid_increase' / `subsidy' // this is the in-conte
> xt semi-elasticity

. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_state_subsidy' - 0.5 
> * `elas_avg_subsidy'

. local epsilon = -`semie' * `net_elas_msrp'

. di in red "the net msrp for the elasticity is `net_elas_msrp'"
the net msrp for the elasticity is 22873.54526474334

. 
. local net_msrp = `msrp' - `avg_subsidy' - `avg_state_subsidy'

. local total_subsidy = `avg_subsidy' + `avg_state_subsidy'

. if "`4'" != "baseline"{
.         local semie = -`epsilon' / `net_msrp'
. }

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie'
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `semie' * `avg_subsidy'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * no utility company producer surplus for HEVs
. 
. * intermediate rebound effect calculations for Latex
. 
. local per_diff_cost_driving = ((`consumer_price' / `hev_mpg') - (`c
> onsumer_price' / `hev_cf_mpg')) / (`consumer_price' / `hev_cf_mpg')

. local hev_rebound = `per_diff_cost_driving' * -0.221

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. * no utility fiscal externality for HEVs
. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' * (1 / `hev_cf_mpg' - 1 / `hev_mp
> g')) * `tax_rate') / ((1 + `discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = -`beh_response' * (${hybrid_cf_gas_fis
> c_ext_`dollar_year'} - ${`hev_cf'_cf_gas_fisc_ext_`dollar_year'}) 
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local state_fisc_ext = `beh_response' * `avg_state_subsidy'

. local avg_state_subsidy_n = `avg_state_subsidy' / `net_msrp'

. local avg_subsidy_n = `avg_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. 
. if `marg_mvpf' == 1{
.         local total_cost0 = `program_cost' + `gas_fisc_ext' + `stat
> e_fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost0 = `program_cost' + `gas_fisc_ext' + `stat
> e_fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = 1

. 
. * marginal and inframarginal consumers
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         * producers
.         if "`4'" == "baseline"{
.                 local tot_gal_cf = ${`hev_cf'_gal_2006}
.                 local tot_gal_hy = ${hybrid_gal_2006}
.                 local gas_markup = ${nominal_gas_markup_2006}
.                 local tot_gal = `tot_gal_cf' - `tot_gal_hy'
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' * (1/`hev_cf_mpg' - 1/`hev_mp
> g')) * (`producer_price' - `producer_mc')) / ((1 + `discount')^(`y'
>  - 1))) // positive
  3.                 }
.         }
.         
.         else{
.                 local tot_gal_cf = ${`hev_cf'_gal_`dollar_year'} //
>  for Latex
.                 local tot_gal_hy = ${hybrid_gal_`dollar_year'} // f
> or Latex
.                 local tot_gal = `tot_gal_cf' - `tot_gal_hy' // for 
> Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * (${hybrid_wtp_p
> rod_s_`dollar_year'} - ${`hev_cf'_wtp_prod_s_`dollar_year'})
.         }
. }

. 
. *no utility producer surplus for HEVs
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' + `wtp_prod_s'
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' + `wtp_prod_s'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a hybrid vehicle
. 
. ** now using Aidan's cleanly calculated externality values 
. ** no separate baseline mode needed because it's just one year
. local hev_gas_consumed_year_one = `hev_miles_traveled1' / `hev_mpg'
>  // for Latex

. local total_hev_damages_glob = ${hybrid_cf_damages_glob_`dollar_yea
> r'} - ${yes_hev_rbd_glob_`dollar_year'} // for Latex

. local total_hev_damages_glob_n = `total_hev_damages_glob' / `net_ms
> rp' // for Latex

. local total_hev_damages_loc_n = ${hybrid_cf_damages_loc_`dollar_yea
> r'} / `net_msrp' // for Latex

. local hev_first_damages_g = ${hybrid_first_damages_g_2020} // for L
> atex

. 
. local wtp_yes_hev_local = -`beh_response' * ${hybrid_cf_damages_loc
> _`dollar_year'} // with rebound

. local wtp_yes_hev_rbd_loc = -`beh_response' * ${yes_hev_rbd_loc_`do
> llar_year'}

. local wtp_yes_hev_loc_no_rbd = `wtp_yes_hev_local' - `wtp_yes_hev_r
> bd_loc' // for Latex

. 
. local wtp_yes_hev_global_tot = -`beh_response' * `total_hev_damages
> _glob' // no rebound

. local wtp_yes_hev_rbd_glob_tot = -`beh_response' * ${yes_hev_rbd_gl
> ob_`dollar_year'}

. 
. local wtp_yes_hev_g = `wtp_yes_hev_global_tot' * ((1 - ${USShareFut
> ureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}))

. local wtp_yes_hev_rbd_glob = `wtp_yes_hev_rbd_glob_tot' * ((1 - ${U
> SShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureS
> CC}))

. 
. local q_carbon_yes_hev = -`beh_response' * ${hybrid_cf_carbon_`doll
> ar_year'}

. local q_carbon_yes_hev_mck = ${hybrid_cf_carbon_`dollar_year'}

. 
. local wtp_soc_rbd = `wtp_yes_hev_rbd_glob' + `wtp_yes_hev_rbd_loc'

. 
. 
. local yes_hev_local_ext = `wtp_yes_hev_local' / `beh_response'

. local yes_hev_global_ext_tot = `wtp_yes_hev_global_tot' / `beh_resp
> onse'

. local wtp_yes_hev = `wtp_yes_hev_loc_no_rbd' + `wtp_yes_hev_g'

. 
. 
. local yes_hev_ext = `wtp_yes_hev' / `beh_response'

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. local wtp_no_ice_local = `beh_response' * ${`hev_cf'_cf_damages_loc
> _`dollar_year'}

. local wtp_no_ice_global_tot = `beh_response' * ${`hev_cf'_cf_damage
> s_glob_`dollar_year'}

. local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USShareFutur
> eSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}))

. 
. local ice_gas_consumed_year_one = `ice_miles_traveled1' / `hev_cf_m
> pg' // for Latex

. local total_ice_damages_glob = `wtp_no_ice_global_tot' / `beh_respo
> nse' // for Latex

. local total_ice_damages_glob_n = `total_ice_damages_glob' / `net_ms
> rp' // for Latex

. local total_ice_damages_loc = `wtp_no_ice_local' / `beh_response' /
> / for Latex

. local total_ice_damages_loc_n = `total_ice_damages_loc' / `net_msrp
> ' // for Latex

. local total_damages_loc_n = `total_hev_damages_loc_n' + `total_ice_
> damages_loc_n' // for Latex

. 
. local q_carbon_no_ice = `beh_response' * ${`hev_cf'_cf_carbon_`doll
> ar_year'}

. local q_carbon_no_ice_mck = ${`hev_cf'_cf_carbon_`dollar_year'}

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions
. 
. local relevant_scc = ${sc_CO2_`dollar_year'}

. 
. local batt_emissions = 214 + 20 // from Table 9 of Pipitone et al. 
> (2021)

. 
. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_hev' + `wtp_no_ice' - `batt_man_ext'

. local wtp_glob = `wtp_yes_hev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_hev_loc_no_rbd' + `wtp_no_ice_local'

. 
. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_hev_local')
>  / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_h
> ev_global_tot' - `batt_man_ext_tot') / `beh_response'

. 
. local enviro_ext = `local_enviro_ext' + `global_enviro_ext_tot'

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.         ** --------------------- COST CURVE --------------------- *
> *
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`enviro_ext')
.         local dyn_enviro = `r(enviro_mvpf)'
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`local_enviro_ext')
.         local dyn_enviro_local = `r(enviro_mvpf)'
. 
.         cost_curve_masterfile, demand_elas(`epsilon') discount_rate
> (`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(cons
> tant_`global_enviro_ext_tot')
.         local dyn_enviro_global_tot = `r(enviro_mvpf)'
.         local dyn_enviro_global = `dyn_enviro_global_tot' * ((1 - $
> {USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutur
> eSCC}))
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost'
.                 local env_cost_wtp = `dyn_enviro' * `program_cost' 
> // same as local plus global_tot
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost'
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost'
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost'
. 
.                 local env_cost_wtp = `env_cost_wtp_l' + `env_cost_w
> tp_g' // switching to not include the piece of the global dynamic e
> nviro that will go to the FE
. 
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_hev'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_hev_mck'

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_hev_gl
> obal_tot' + `env_cost_wtp_global_tot' + `batt_man_ext_tot') * ${USS
> hareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost0' + `fisc_ext_lr' + `gas_corp_fisc_e
> '

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`hev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${hybrid_cf_gas_savings_`dollar_year'})
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_savings' + `wtp_soc_rb
> d' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_hev_local' + `wtp_no_ic
> e_local' + `env_cost_wtp_l' + `wtp_savings'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_hev_global_tot' + `wtp_no_ice_global_tot' + `env_c
> ost_wtp_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_hev_global_to
> t' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot') + 0.9 * `
> cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. 
. 
. local hev_price = 28359.08333 // from KBB, look at spreadsheet

. local ice_price = 27012.5 // from KBB, look at spreadsheet

. 
. local lifetime_hev_gas_cost = ${hybrid_cf_gas_savings_2020} - ${hyb
> rid_wtp_prod_s_2020} - 0.08 * ${hybrid_cf_gas_savings_2020} - ${hyb
> rid_cf_gas_fisc_ext_2020}

. di in red "hev gas cost is `lifetime_hev_gas_cost'"
hev gas cost is 4007.879397475849

. local lifetime_ice_gas_cost = ${muehl_cf_gas_savings_2020} - ${mueh
> l_wtp_prod_s_2020} - 0.08 * ${muehl_cf_gas_savings_2020} - ${muehl_
> cf_gas_fisc_ext_2020}

. di in red "ice gas cost is `lifetime_ice_gas_cost'"
ice gas cost is 4154.109255862792

. 
. 
. local resource_cost = `hev_price' + `lifetime_hev_gas_cost' - `ice_
> price' - `lifetime_ice_gas_cost'

. di in red "resource cost is `resource_cost'"
resource cost is 1200.353471613056

. local q_carbon_yes_hev_mck = ${hybrid_cf_carbon_2020} + ((214 + 20)
>  * 0.001) - ${hybrid_rbd_CO2_2020}

. 
. local q_carbon_no_ice_mck = ${muehl_cf_carbon_2020}

. 
. local q_carbon_mck = `q_carbon_no_ice_mck' - `q_carbon_yes_hev_mck'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_prod_s_`1' = `wtp_prod_s'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global state_fisc_ext_`1' = `state_fisc_ext'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_ep = round(`epsilon', 0.001)

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1'= `wtp_loc'

. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_hev_`1' = `wtp_yes_hev'

. global wtp_yes_hev_local_`1' = `wtp_yes_hev_local'

. global wtp_yes_hev_g_`1' = `wtp_yes_hev_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_soc_rbd env_cost
> _wtp cost_wtp wtp_prod_s WTP_cc

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob", "wtp_loc", "wtp
> _soc_rbd", "env_cost_wtp", "cost_wtp", "wtp_prod_s", "WTP_cc"

. 
. global cost_comps_`1' program_cost state_fisc_ext beh_fisc_ext gas_
> fisc_ext gas_corp_fisc_e fisc_ext_lr total_cost

. global cost_comps_`1'_commas "program_cost", "state_fisc_ext", "beh
> _fisc_ext", "gas_fisc_ext", "gas_corp_fisc_e", "fisc_ext_lr", "tota
> l_cost"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Env.""' 3 `""Local" "
> Env.""' 4 `"Rebound"' 5 `""Dynamic" "Env.""' 6 `""Dynamic" "Price""
> ' 7 `""Gasoline" "Producers""' 8 `"Total WTP"' 10 `""Program" "Cost
> ""' 11 `""State" "Subsidy""' 12 `""Federal" "Subsidy""' 13 `""Gas" 
> "Tax""' 14 `""Profits" "Tax""' 15 `""Climate" "FE""' 16 `""Govt" "C
> ost""' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 7

. global cost_color_start_`1' = 10

. global color_group5_`1' = 15

. 
. 
. 
. 
. 
. global `1'_name "Hybrid Credit"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. di in red "Main Estimates"
Main Estimates

. di "`4'"
current

. di `wtp_cons'
1

. di `wtp_marg'
0

. di `wtp_inf'
0

. di `wtp_prod_s'
-.00413521

. di `wtp_yes_hev'
-.52752481

. di `wtp_no_ice'
.55219792

. di `wtp_soc'
.02204569

. di `env_cost_wtp'
0

. di `cost_wtp'
0

. di `WTP_cc'
1.00109

. di `program_cost'
1

. di `beh_fisc_ext'
0

. di `fed_fisc_ext'


. di `gas_fisc_ext'
.00397235

. di `fisc_ext_lr'
-.00049457

. di `total_cost'
1.0023785

. di in red "End of Main Estimates"
End of Main Estimates

. 
. di in red "Cost Curve Inputs"
Cost Curve Inputs

. di `epsilon'
-1.9848529

. di `discount'
.02

. di `farmer_theta'
-.421

. di `batt_cost'
267.32618

. di `msrp'
33463.66

. di `prod_cost'
267.32618

. di `batt_per_kwh_cost'
176.53246

. di `batt_cap'
1.4690013

. di `fixed_cost_frac'
.99201145

. di `marg_sales'
167700

. di `cum_sales'
917708.31

. di `enviro_ext'
175.89558

. di in red "End of Cost Curve Inputs"
End of Cost Curve Inputs

. 
. di in red "Behavioral Fiscal Externality Inputs"
Behavioral Fiscal Externality Inputs

. di `semie'
.00005931

. di `avg_subsidy'
0

. di `adj_rebate_cost'
2922.8981

. di `rebate_cost'
2276

. di ${cpi_`dollar_year'}
258.846

. di ${cpi_${policy_year}}
201.558

. di in red "End of Fiscal Externality Inputs"
End of Fiscal Externality Inputs

. 
. if "${latex}" == "yes"{
.         if "`hev_cf'" == "muehl" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp total_subsidy tot
> al_hev_damages_glob hev_first_damages_g wtp_yes_hev_g wtp_no_ice_gl
> obal_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac ice_g
> as_consumed_year_one total_hev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc total_hev_damages_loc_n total_damages_loc_n ///
>                                         avg_state_subsidy avg_state
> _subsidy_n state_fisc_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax
> _rate fisc_ext_lr ///
>                                         total_cost MVPF semie_paper
>  epsilon hev_mpg hev_gas_consumed_year_one per_diff_cost_driving he
> v_rebound ///
>                                         wtp_yes_hev_loc_no_rbd batt
> _damages_n batt_man_ext hev_cf_mpg gas_corp_fisc_e avg_subsidy_n
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "ice_gas_consu
> med_year_one", "hev_gas_consumed_year_one", "avg_subsidy") ///
>                         | inlist("`i'", "tot_gal", "total_subsidy")
>  {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_state_subsidy
> ", "total_subsidy", "hev_mpg", "hev_cf_mpg") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie", "env_cost
> _wtp", "gas_corp_fisc_e"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
. 
.         }
. 
.         if "`hev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004p.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004q.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004r.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hybrid_cr_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hybrid_cr_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hybrid_cr_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/hybrid_cr_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for hybrid_cr under current
(9 vars, 5 obs)
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H
1
Specification 1 of 1, program 55 of 100 (ihwap_hb)
Number of observations (_N) was 0, now 0.
ihwap_hb

. *******************************************************************
> ******************
. /*       0. Program: Incentive Payments for Weatherization Program 
> - High        */
. *******************************************************************
> ******************
. 
. /*
> Peter Christensen, Paul Francisco, and Erica Myers
> Incentive Pay and Social Returns to Worker Effort in Public Program
> s: Evidence from the
> Weatherization Assistance Program, NBER Working Paper No. 31322. 
> * https://www.nber.org/system/files/working_papers/w31322/w31322.pd
> f.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ihwap_hb no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_saved"' `"energy_saved_e"' `"energy_saved_g"' `"g_saved"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .471           .       .471       .4
> 71

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0656           .      .0656      .06
> 56

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .402           .       .402       .4
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       1.623           .      1.623      1.6
> 23
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.                 
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         
.         
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import weatherization assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("WAP")
(3 vars, 7 obs)

.                 
.                 levelsof Parameter, local(levels)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local marginal_valuation = ${val_given}

.                 local prop_marginal = ${marginal_prop}

.                 local retrofit_lifespan = ${retrofit_lifespan}

.         restore

.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************
. 
.         local bonus_cost = 283 * (${cpi_`dollar_year'}/${cpi_2017})

.         local contractor_surplus = 99 * (${cpi_`dollar_year'}/${cpi
> _2017})

.         local retrofit_cost = 9655 * (${cpi_`dollar_year'}/${cpi_20
> 17}) // Table 10

.         local kwhs_per_mmbtu = 293.07107

.         
. ***********************************
. /* 4. Intermediate Calculations */
. ***********************************
. *Energy Reduction
. local kwh_reduced_annual = (`e_saved' + `energy_saved_e') * 12 * `k
> whs_per_mmbtu'

. local mmbtu_reduced_annual = (`g_saved' + `energy_saved_g') * 12 //
>  Energy saved corresponds to the impact of the bonus payment

. 
. local kwh_reduced_marginal = ((`e_saved' * `prop_marginal') +  `ene
> rgy_saved_e') * 12 * `kwhs_per_mmbtu'

. local mmbtu_reduction_marginal = ((`g_saved' * `prop_marginal') + `
> energy_saved_g') * 12

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. local r_ng = `r(r_ng)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = (1 - `prop_marginal') * `retrofit_cost'

. local marginal = `prop_marginal' * `marginal_valuation' * `retrofit
> _cost'

. local wtp_consumers = `marginal' + `inframarginal' + `contractor_su
> rplus'

. 
. *Producers
. 
. local prod_annual = ((`kwh_reduced_marginal' * ${producer_surplus_`
> dollar_year'_${State}} * `r') + (`mmbtu_reduction_marginal' * `r_ng
> ' *       ${psurplus_mmbtu_`dollar_year'_${State}}))

.                 
. local corporate_loss = `prod_annual' + ((`prod_annual'/`discount') 
> * (1 - (1/(1+`discount')^(`retrofit_lifespan' - 1))))

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

.         
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local savings_annual = ((`kwh_reduced_marginal' * ${kwh_pri
> ce_`dollar_year'_${State}}) + (`mmbtu_reduction_marginal' * ${ng_pr
> ice_`dollar_year'_${State}}))
.                 
.         local c_savings = `savings_annual' + (`savings_annual'/`dis
> count') * (1 - (1/(1+`discount')^(`retrofit_lifespan' - 1)))
. }

. 
. local contractor_wtp = `contractor_surplus'

. 
. * Social Costs
. dynamic_grid `kwh_reduced_annual', starting_year(`dollar_year') lif
> etime(`retrofit_lifespan') discount_rate(`discount') ef("`replaceme
> nt'") type("uniform") geo("${State}") grid_specify("yes") model("${
> grid_model}")

. local local_pollutants = `prop_marginal' * `r(local_enviro_ext)'

. local global_pollutants = (`r(global_enviro_ext)' + (${global_mmbtu
> _`dollar_year'} * `mmbtu_reduction_marginal') + ((${global_mmbtu_`d
> ollar_year'} * `mmbtu_reduction_marginal')/`discount') * (1 - (1/(1
> +`discount')^(`retrofit_lifespan' - 1))))

. 
. local carbon = `r(carbon_content)' * `r' * `prop_marginal'

. 
. local q_carbon = `carbon' + ((${global_mmbtu_`dollar_year'} * `mmbt
> u_reduction_marginal' * `retrofit_lifespan' * `r_ng')/${sc_CO2_`dol
> lar_year'})

. 
. local rebound_local = `local_pollutants' * (1-`r')

. 
. local rebound_global = (((`r(global_enviro_ext)' * (1-`r')) + ((${g
> lobal_mmbtu_`dollar_year'} * `mmbtu_reduction_marginal') + ((${glob
> al_mmbtu_`dollar_year'} * `mmbtu_reduction_marginal')/`discount') *
>  (1 - (1/(1+`discount')^(`retrofit_lifespan' - 1)))) * (1 - `r_ng')
> )) * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. 
. * Social benefits from reduced carbon 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' + `contrac
> tor_wtp' - `corporate_loss' + `c_savings'

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings' + `contractor_
> wtp'

. local WTP_USFut  =  ${USShareFutureSSC}  * (`global_pollutants' - `
> rebound_global')

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `bonus_cost' + `retrofit_cost'

. 
. local annual_fe_t = ((`kwh_reduced_marginal' * ${government_revenue
> _`dollar_year'_${State}}  * `r') + (`mmbtu_reduction_marginal' * ${
> govrev_mmbtu_`dollar_year'_${State}} * `r_ng'))

. 
. local fisc_ext_t = `annual_fe_t' + (`annual_fe_t'/`discount') * (1 
> - (1/(1+`discount')^(`retrofit_lifespan' - 1)))

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. 
. local energy_savings = ((`kwh_reduced_annual' * `energy_cost') + `m
> mbtu_reduced_annual' * `ng_cost') + (((`kwh_reduced_annual' * `ener
> gy_cost') + `mmbtu_reduced_annual' * `ng_cost') / `discount') * (1 
> - (1 / (1 + `discount')^(`retrofit_lifespan' - 1)))

. 
. local nudge_cost = `program_cost'

. di in red "nudge cost is `nudge_cost'"
nudge cost is 10494.45599520236

. di in red "energy savings are `energy_savings'"
energy savings are 3772.063622165604

. 
. local resource_cost = `nudge_cost' - `energy_savings'

. local nudge_price = `program_cost'

. local kwh_reduc = `kwh_reduced_annual' * `retrofit_lifespan'

. local mmtu_reduc = `mmbtu_reduced_annual' * `retrofit_lifespan'

. 
. local q_carbon_mck = `r(carbon_content)' + ((${global_mmbtu_`dollar
> _year'} * `mmbtu_reduced_annual' * `retrofit_lifespan') / ${sc_CO2_
> `dollar_year'})

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `carbon' + ((${global_mmbtu_`dollar_year'} * `mm
> btu_reduction_marginal' * `retrofit_lifespan' * `r_ng')/${sc_CO2_`d
> ollar_year'})

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global wtp_marg_`1' = `marginal' 

. global wtp_inf_`1' = `inframarginal'

. global wtp_ctr_`1' = `contractor_surplus'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global wtp_soc_`1' = `wtp_society'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `global_pollutants'

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global'

. 
. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf c_savings wtp_ctr wtp_prod wt
> p_glob wtp_loc wtp_r_loc wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "c_savings", "wt
> p_ctr", "wtp_prod"

. global wtp_comps_`1'_commas2 "wtp_glob" ,"wtp_loc", "wtp_r_loc", "w
> tp_r_glob", "WTP"

. 
. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Illinois Weatherization + High Bonus"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Savings"' 4 
> `"Contractors"' 5 `"Producers"' 6 `""Global" "Enviro""' 7 `""Local"
>  "Enviro""' 8 `""Rebound" "Local""' 9 `""Rebound" "Global""' 10 `"T
> otal WTP"' 12 `""Program" "Cost""' 13 `""FE" "Subsidies""' 14 `""FE
> " "Taxes""' 15 `""FE" "Long-Run""' 16 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 5

. global color_group2_`1' = 7

. global color_group3_`1' = 9

. global cost_color_start_`1' = 12

. global color_group4_`1' = 9

. global color_group5_`1' = 15

. 
. global normalize_`1' = 1

. 
. 
. di `total_cost'
10651.666

. di `WTP'
11391.177

. 
. di `inframarginal'
5097.805

. di `marginal'
2548.9025

. di `wtp_society'
4738.6899

. di `MVPF'
1.0694268

. di `CE'


. 
. di `carbon_only_benefit'


. 
. di `fiscal_externality'


. di `program_cost'
10494.456

. di `corporate_loss'
1098.764

. di `global_pollutants' + `local_pollutants'
5630.1337

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004s.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004t.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004u.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_hb_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_hb_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_hb_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_hb_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for ihwap_hb under current
(9 vars, 5 obs)
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H
1
Specification 1 of 1, program 56 of 100 (ihwap_lb)
Number of observations (_N) was 0, now 0.
ihwap_lb

. *******************************************************************
> ******************
. /*       0. Program: Incentive Payments for Weatherization Program 
> - Low        */
. *******************************************************************
> ******************
. 
. /*
> Peter Christensen, Paul Francisco, and Erica Myers
> Incentive Pay and Social Returns to Worker Effort in Public Program
> s: Evidence from the
> Weatherization Assistance Program, NBER Working Paper No. 31322. 
> * https://www.nber.org/system/files/working_papers/w31322/w31322.pd
> f.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ihwap_lb no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_saved"' `"energy_saved_e"' `"energy_saved_g"' `"g_saved"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .471           .       .471       .4
> 71

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0338           .      .0338      .03
> 38

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .353           .       .353       .3
> 53

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       1.623           .      1.623      1.6
> 23
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         
.         
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import weatherization assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("WAP")
(3 vars, 7 obs)

.                 
.                 levelsof Parameter, local(levels)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local marginal_valuation = ${val_given}

.                 local prop_marginal = ${marginal_prop}

.                 local retrofit_lifespan = ${retrofit_lifespan}

.         restore

.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************
. 
.         local bonus_cost = 114 * (${cpi_`dollar_year'}/${cpi_2017})

.         local contractor_surplus = 13 * (${cpi_`dollar_year'}/${cpi
> _2017})

.         local retrofit_cost = 9655 * (${cpi_`dollar_year'}/${cpi_20
> 17}) // Table 10

.         local kwhs_per_mmbtu = 293.07107 // conversion rate

.         
. ***********************************
. /* 4. Intermediate Calculations */
. ***********************************
. *Energy Reduction
. local kwh_reduced_annual = (`e_saved' + `energy_saved_e') * 12 * `k
> whs_per_mmbtu'

. local mmbtu_reduced_annual = (`g_saved' + `energy_saved_g') * 12 //
>  Energy saved corresponds to the impact of the bonus payment

. 
. local kwh_reduced_marginal = ((`e_saved' * `prop_marginal') +  `ene
> rgy_saved_e') * 12 * `kwhs_per_mmbtu'

. local mmbtu_reduction_marginal = ((`g_saved' * `prop_marginal') + `
> energy_saved_g') * 12

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. local r_ng = `r(r_ng)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = (1 - `prop_marginal') * `retrofit_cost'

. local marginal = `prop_marginal' * `marginal_valuation' * `retrofit
> _cost'

. local wtp_consumers = `marginal' + `inframarginal' + `contractor_su
> rplus'

. 
. *Producers
. 
. local prod_annual = ((`kwh_reduced_marginal' * ${producer_surplus_`
> dollar_year'_${State}} * `r') + (`mmbtu_reduction_marginal' * `r_ng
> ' *       ${psurplus_mmbtu_`dollar_year'_${State}}))

.                 
. local corporate_loss = `prod_annual' + ((`prod_annual'/`discount') 
> * (1 - (1/(1+`discount')^(`retrofit_lifespan' - 1))))

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

.         
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local savings_annual = ((`kwh_reduced_marginal' * ${kwh_pri
> ce_`dollar_year'_${State}}) + (`mmbtu_reduction_marginal' * ${ng_pr
> ice_`dollar_year'_${State}}))
.                 
.         local c_savings = `savings_annual' + (`savings_annual'/`dis
> count') * (1 - (1/(1+`discount')^(`retrofit_lifespan' - 1)))
. }

. 
. local contractor_wtp = `contractor_surplus'

. 
. * Social Costs
. dynamic_grid `kwh_reduced_annual', starting_year(`dollar_year') lif
> etime(`retrofit_lifespan') discount_rate(`discount') ef("`replaceme
> nt'") type("uniform") geo("${State}") grid_specify("yes") model("${
> grid_model}")

. local local_pollutants = `prop_marginal' * `r(local_enviro_ext)'

. local global_pollutants = (`r(global_enviro_ext)' + (${global_mmbtu
> _`dollar_year'} * `mmbtu_reduction_marginal') + ((${global_mmbtu_`d
> ollar_year'} * `mmbtu_reduction_marginal')/`discount') * (1 - (1/(1
> +`discount')^(`retrofit_lifespan' - 1))))

. 
. local carbon = `r(carbon_content)' * `r' * `prop_marginal'

. 
. local q_carbon = `carbon' + ((${global_mmbtu_`dollar_year'} * `mmbt
> u_reduction_marginal' * `retrofit_lifespan' * `r_ng')/${sc_CO2_`dol
> lar_year'})

. 
. local rebound_local = `local_pollutants' * (1-`r')

. 
. local rebound_global = (((`r(global_enviro_ext)' * (1-`r')) + ((${g
> lobal_mmbtu_`dollar_year'} * `mmbtu_reduction_marginal') + ((${glob
> al_mmbtu_`dollar_year'} * `mmbtu_reduction_marginal')/`discount') *
>  (1 - (1/(1+`discount')^(`retrofit_lifespan' - 1)))) * (1 - `r_ng')
> )) * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. 
. * Social benefits from reduced carbon 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' + `contrac
> tor_wtp' - `corporate_loss' + `c_savings'

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings' + `contractor_
> wtp'

. local WTP_USFut  =  ${USShareFutureSSC}  * (`global_pollutants' - `
> rebound_global')

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `bonus_cost' + `retrofit_cost'

. 
. local annual_fe_t = ((`kwh_reduced_marginal' * ${government_revenue
> _`dollar_year'_${State}}  * `r') + (`mmbtu_reduction_marginal' * ${
> govrev_mmbtu_`dollar_year'_${State}} * `r_ng'))

. 
. local fisc_ext_t = `annual_fe_t' + (`annual_fe_t'/`discount') * (1 
> - (1/(1+`discount')^(`retrofit_lifespan' - 1)))

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. 
. local energy_savings = ((`kwh_reduced_annual' * `energy_cost') + `m
> mbtu_reduced_annual' * `ng_cost') + (((`kwh_reduced_annual' * `ener
> gy_cost') + `mmbtu_reduced_annual' * `ng_cost') / `discount') * (1 
> - (1 / (1 + `discount')^(`retrofit_lifespan' - 1)))

. 
. local nudge_cost = `program_cost'

. di in red "nudge cost is `nudge_cost'"
nudge cost is 10315.99321967518

. di in red "energy savings are `energy_savings'"
energy savings are 3599.120103799023

. 
. local resource_cost = `nudge_cost' - `energy_savings'

. local nudge_price = `program_cost'

. local kwh_reduc = `kwh_reduced_annual' * `retrofit_lifespan'

. local mmtu_reduc = `mmbtu_reduced_annual' * `retrofit_lifespan'

. 
. local q_carbon_mck = `r(carbon_content)' + ((${global_mmbtu_`dollar
> _year'} * `mmbtu_reduced_annual' * `retrofit_lifespan') / ${sc_CO2_
> `dollar_year'})

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `carbon' + ((${global_mmbtu_`dollar_year'} * `mm
> btu_reduced_annual' * `retrofit_lifespan' * `prop_marginal') / ${sc
> _CO2_`dollar_year'})

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global wtp_marg_`1' = `marginal' 

. global wtp_inf_`1' = `inframarginal' 

. global wtp_ctr_`1' = `contractor_surplus'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global wtp_soc_`1' = `wtp_society'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `global_pollutants'

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global'

. 
. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf c_savings wtp_ctr wtp_prod wt
> p_glob wtp_loc wtp_r_loc wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "c_savings", "wt
> p_ctr", "wtp_prod"

. global wtp_comps_`1'_commas2 "wtp_glob" ,"wtp_loc", "wtp_r_loc", "w
> tp_r_glob", "WTP"

. 
. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Illinois Weatherization + Low Bonus"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Savings"' 4 
> `"Contractors"' 5 `"Producers"' 6 `""Global" "Enviro""' 7 `""Local"
>  "Enviro""' 8 `""Rebound" "Local""' 9 `""Rebound" "Global""' 10 `"T
> otal WTP"' 12 `""Program" "Cost""' 13 `""FE" "Subsidies""' 14 `""FE
> " "Taxes""' 15 `""FE" "Long-Run""' 16 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 5

. global color_group2_`1' = 7

. global color_group3_`1' = 9

. global cost_color_start_`1' = 12

. global color_group4_`1' = 9

. global color_group5_`1' = 15

. 
. global normalize_`1' = 1

. 
. 
. di `total_cost'
10462.163

. di `WTP'
11115.695

. 
. di `inframarginal'
5097.805

. di `marginal'
2548.9025

. di `wtp_society'
4499.4388

. di `MVPF'
1.0624662

. di `CE'


. 
. di `carbon_only_benefit'


. 
. di `fiscal_externality'


. di `program_cost'
10315.993

. di `corporate_loss'
1044.1788

. di `global_pollutants' + `local_pollutants'
5343.4769

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004v.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004w.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00004x.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_lb_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_lb_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_lb_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_lb_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for ihwap_lb under current
(9 vars, 5 obs)
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State         G             I
emissions_~r  ef_region     description   H
1
Specification 1 of 1, program 57 of 100 (ihwap_nb)
Number of observations (_N) was 0, now 0.
ihwap_nb

. *******************************************************************
> ******************
. /*       0. Program: Incentive Payments for Weatherization Program 
> - No Bonus        */
. *******************************************************************
> ******************
. 
. /*
> Peter Christensen, Paul Francisco, and Erica Myers
> Incentive Pay and Social Returns to Worker Effort in Public Program
> s: Evidence from the
> Weatherization Assistance Program, NBER Working Paper No. 31322.
> * https://www.nber.org/system/files/working_papers/w31322/w31322.pd
> f.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ihwap_nb no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_saved"' `"g_saved"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .471           .       .471       .4
> 71

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       1.623           .      1.623      1.6
> 23
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Policy Specific Assumptions */
.         ****************************************************
. 
.         local retrofit_cost = 9655

.         local kwhs_per_mmbtu = 293.07107

.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Energy Reduction
. local kwh_reduction_annual = `e_saved' * 12 * `kwhs_per_mmbtu'

. local mmbtu_reduction_annual = `g_saved' * 12

. 
. weatherization_ado non-marginal, policy_year(${policy_year}) inflat
> ion_year(2017) spec(${emissions_factor}) geo(${State}) kwh_reduced(
> `kwh_reduction_annual') mmbtu_reduced(`mmbtu_reduction_annual') pro
> gram_cost(`retrofit_cost') replacement(`replacement') policy("ihwap
> _nb")
(3 vars, 7 obs)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'
(12 vars, 162 obs)

. di `r(MVPF)'
.98018274

. 
. ****************
. /* 5. Outputs */
. ****************
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. global wtp_soc_`1' = `r(wtp_society)'

. global wtp_marg_`1' = `r(marginal)' 

. global wtp_inf_`1' = `r(inframarginal)' 

. global c_savings_`1' = `r(c_savings)'

. global wtp_glob_`1' = `r(global_pollutants)'

. global wtp_loc_`1' = `r(local_pollutants)'

. global total_cost_`1' = `r(total_cost)'

. global wtp_prod_`1' = `r(corporate_loss)'

. global wtp_r_loc_`1' = `r(rebound_local)'

. global wtp_r_glob_`1' = `r(rebound_global)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global p_spend_`1' = `r(policy_spending)'

. global q_CO2_`1' = `r(q_carbon)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Illinois Weatherization"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000050.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000051.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000052.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_nb_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_nb_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_nb_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ihwap_nb_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for ihwap_nb under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 58 of 100 (india_cs)
Number of observations (_N) was 0, now 0.
india_cs

. *******************************************************************
> *************
. /*  0. Program: India Cookstoves                   */
. *******************************************************************
> *************
. /*
> Rema Hanna, Esther Duflo, and Michael Greenstone
> "Up in Smoke: The Influence of Household Behavior
> on the Long-Run Impact of Improved Cooking Stoves"
> https://www.aeaweb.org/articles?id=10.1257/pol.20140008
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"wood_change_1"' `"wood_change_2"' `"wood_change_3"' `"wood_change_4
> "'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .022           .       .022       .0
> 22

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.156           .      -.156      -.1
> 56

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.235           .      -.235      -.2
> 35

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .18           .        .18        .
> 18
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local prop_infra = 0.0618/0.6823 // 6% of control group and
>  68% of treatment group got stoves (Table 3)

.                 
.         *To get the carbon emissions per wood cookstove in this stu
> dy, I take the amount of wood used in the last meal of 3.373 kg (Co
> ntrol group mean in Table 7) and multiply by number of meals cooked
>  in a week with a traditional stove 12.61 (Table 1) and multiply by
>  52 weeks. Then I multiply the emissions factor (grams of CO2/kg of
>  wood) of 1590 (the midpoint estimate from this paper: https://www.
> sciencedirect.com/science/article/abs/pii/S0961953402000727. I then
>  divide by 1000000 to go from grams to tons of CO2. The final resul
> t is in the middle of the range (2-6 tons) estimated by the EPA: ht
> tps://www.epa.gov/indoor-air-quality-iaq/household-energy-and-clean
> -air)
.         
.         local cookstove_emissions = (3.373 * 12.61 * 52 * 1590)/100
> 0000 // tons of CO2 per cookstove

.         
.         local cookstove_externality = `cookstove_emissions' * ${sc_
> CO2_`dollar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year
> }})

.         
.         forvalues i = 1(1)4 {
  2.                 di `wood_change_`i''
  3.                 local per_change_wood_`i' = `wood_change_`i'' / 
> 3.373 // Converting level change to percent change
  4.         }
.022
-.156
-.235
.18

.         
.         local subsidy = 12.50 * (${cpi_`dollar_year'}/${cpi_${polic
> y_year}}) // Each cookstove costs gov 12.50

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = `subsidy' * `prop_infra'

. local wtp_marg = `subsidy' * (1 - `prop_infra') * 0.5

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. *The treatment effect is the difference between control and treatme
> nt, so it already takes into account inframarginality
. 
. local global_pollutants = (`cookstove_externality' * `per_change_wo
> od_1') + ((`cookstove_externality' * `per_change_wood_2')/(1 + `dis
> count')) + ((`cookstove_externality' * `per_change_wood_3')/(1 + `d
> iscount')^2) + ((`cookstove_externality' * `per_change_wood_4')/(1 
> + `discount')^3)

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = (`cookstove_emissions' * `wood_change_1') + (`cook
> stove_emissions' * `wood_change_2') + (`cookstove_emissions' * `woo
> d_change_3') + (`cookstove_emissions' * `wood_change_4')

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `subsidy'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. // else if (`WTP' < 0 & `total_cost' > 0) {
. //      local MVPF = -99999 // negative infinity
. // }
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
-2.2788933

. di `total_cost'
13.221532

. di `WTP'
-30.130462

. di `wtp_cons'
6.8161

. di `local_pollutants'
0

. di `global_pollutants'
-37.668094

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
-37.668094

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
-30.130462

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
-.3727769

. 
. di `per_change_wood_2'
-.04624963

. di `cookstove_externality' * `per_change_wood_1'
4.4268575

. di `cookstove_externality' * `per_change_wood_2'
-31.390444

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000053.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000054.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000055.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_cs_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_cs_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_cs_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_cs_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for india_cs under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 59 of 100 (india_offset)
Number of observations (_N) was 0, now 0.
india_offset

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000056.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000057.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000058.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_offset_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_offset_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_offset_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/india_offset_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for india_offset under current
(3 vars, 5 obs)
spec_type    policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  description
1
Specification 1 of 1, program 60 of 100 (jet_fuel)
Number of observations (_N) was 0, now 0.
jet_fuel

. *******************************************************************
> ******************
. /*       1. Program: Jet fuel taxes                                
>                                               */
. *******************************************************************
> ******************
. 
. /*Fukui, Hideki and Miyoshi, Chikage. 
> "The impact of aviation fuel tax on fuel consumption and carbon emi
> ssions: The case of the US airline industry."
> Transportation Research Part D: Transport and Environment 50 (Janua
> ry 2017): 234--253.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: jet_fuel no uncorrected
> _vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_jet_fuel"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.166           .      -.166      -.1
> 66
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. global value_local_jet_fuel     no

. 
. 
. ****************************************************
. /* 4. Calculate Annual Emissions per Gallon of Jet Fuel */
. ****************************************************
. preserve 

. 
.         * Save local emissions and markup for later.
.         import excel "${policy_assumptions}", first clear sheet("av
> iation_local_emissions")
(5 vars, 2 obs)

.         tempfile local_damages

.         save "`local_damages'", replace         
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005b.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005b.tmp saved
    as .dta format

.         
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear        

.         qui sum pct_markup if year == `dollar_year'

.         local pct_markup = r(mean)

.         
.                 
.         * Save upstream emissions for later. 
.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Externalities/gasoline_vehicle_externalities_no_ethanol_${scc_i
> nd_name}_${dr_ind_name}.dta", clear

.                 keep if year == `dollar_year'
(32 observations deleted)

.         
.         ds *upstream*
wtp_upst~CO2  wtp_upstr~CO  wtp_upstr~25  global_VOC~m  local_CO_u~m
wtp_upstre~4  wtp_upstre~3  wtp_upst~SO2  local_VOC_~m
wtp_upstr~2O  wtp_upstre~x  wtp_upstre~C  global_CO_~m

.         foreach var in `r(varlist)' {
  2.                 di in red "var is `var'"
  3.                 local name_ind = substr("`var'", 1, 3)
  4.                 di in red "name index is `name_ind'"
  5.                 if "`name_ind'" == "wtp" {
  6.                         
.                         local `var' = `var'
  7.                         
.                 }
  8.                 
.                 else {
  9.                         
.                         local name_ind = substr("`var'", 1, strlen(
> "`var'") - strlen("_upstream"))
 10.                         local name_ind = substr("`name_ind'", st
> rpos("`name_ind'", "_") + 1, .) + "_" + substr("`name_ind'", 1, str
> pos("`name_ind'", "_") - 1)
 11.                         
.                         local wtp_upstream_`name_ind' = `var'
 12.                                                 
.                 }
 13.         
.         }
var is wtp_upstream_CO2
name index is wtp
var is wtp_upstream_CH4
name index is wtp
var is wtp_upstream_N2O
name index is wtp
var is wtp_upstream_CO
name index is wtp
var is wtp_upstream_NH3
name index is wtp
var is wtp_upstream_NOx
name index is wtp
var is wtp_upstream_PM25
name index is wtp
var is wtp_upstream_SO2
name index is wtp
var is wtp_upstream_VOC
name index is wtp
var is global_VOC_upstream
name index is glo
var is local_VOC_upstream
name index is loc
var is global_CO_upstream
name index is glo
var is local_CO_upstream
name index is loc

.         
.         * Calculate average state tax on jet fuel.
.         import excel "${policy_assumptions}", first clear sheet("st
> ate_jet_fuel_taxes")
(3 vars, 51 obs)

.                 replace rate = "0" if rate == "X"
(15 real changes made)

.                 destring rate, replace
rate: all characters numeric; replaced as double

.         collapse (mean) rate [aw = consumption]

.                 local state_avg_jet_fuel_tax = rate // Add to feder
> al tax rate.

. 
.         
.         * Calculate total annual gallons of jet fuel consumed. 
.         import excel "${policy_assumptions}", first clear sheet("av
> iation_prices")
(5 vars, 29 obs)

. 
.         sum jet_fuel_price if year == `dollar_year'

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
jet_fuel_p~e |          1       1.099           .      1.099      1.0
> 99

.                 local consumer_price = r(mean)

.         sum jet_fuel_tax if year == `dollar_year'

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
jet_fuel_tax |          1        .219           .       .219       .2
> 19

.                 local tax_rate = r(mean) + `state_avg_jet_fuel_tax'
>  // NOT inflation adjusting since fuel taxes typically not indexed.

.                 
.         
.         *  Want to Consider Local Emissions.
.         replace jet_fuel_quantity = jet_fuel_quantity * 1000 * 42  
>      
variable jet_fuel_quantity was long now double
(29 real changes made)

.         replace aviation_gas_quantity = aviation_gas_quantity * 100
> 0 * 42
variable aviation_gas_quantity was int now long
(29 real changes made)

.         // Both denoted in thousands of barrels produced for a give
> n year. Converting to total gallons.
.         
.         gen jet_fuel_share = jet_fuel_quantity / (jet_fuel_quantity
>  + aviation_gas_quantity)

.         
.         merge 1:1 year using "`local_damages'", keep(3) nogen

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                                 2  
    -----------------------------------------

.         if "${spec_type}" == "baseline" {
.                 keep if year == 2014 // Closest year in NEI to base
> line year.
.         }       

.         if "${spec_type}" == "current" {
.                 keep if year == `dollar_year'
(1 observation deleted)
.         }

.                         
.         ds *_st
aviation_C~t  aviation_N~t  aviation_P~t  aviation_V~t

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = ((`var'*0.907185)/jet_fuel_quantity
> ) * jet_fuel_share
  3.         
.                 // 1. Converting from short tons to metric tons. Al
> l 5 local pollutants reported in short tons. 
.                 // 2. Divide by gallons of jet fuel consumed to get
>  avg. emissions per gallon burned
.                 // 3. Assuming emissions b/w aviation gas and jet f
> uel proportional to gallons consumed. Multiply by share jet fuel.
.                 local newname = substr("`var'", 1, strlen("`var'") 
> - 3)
  4.                 rename `var' `newname'_mt
  5.                 
.         }
variable aviation_CO_st was long now double
(1 real change made)
variable aviation_NOx_st was long now double
(1 real change made)
variable aviation_PM25_st was int now float
(1 real change made)
variable aviation_VOC_st was long now double
(1 real change made)

.                 
.         * Social Costs. 
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.                 
.                 local social_cost_`g' = ${sc_`g'_`dollar_year'} * (
> ${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.         }       

.         
.         local md_u SO2 PM25 NOx VOC NH3 CO

.         foreach p of local md_u  {
  2.                 
.                 local social_cost_`p'_uw = ${md_`p'_`dollar_year'_u
> nweighted} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year}})
  3.                 
.         }

. 
.         
.         * Calculate WTP for In-Air Pollution
.         drop *quantity

.         ds aviation_*
aviation_C~t  aviation_N~t  aviation_P~t  aviation_V~t

.         foreach var in `r(varlist)' {
  2.                 
.                 local unit_check = substr("`var'", (strlen("`var'")
>  - 1), .)
  3.                         assert "`unit_check'" == "mt"
  4.                         
.                 local p_name = substr(substr("`var'", 10, .), 1, st
> rpos(substr("`var'", 10, .), "_") - 1)
  5.                         
.                 if "`p_name'" == "VOC" | "`p_name'" == "CO" {
  6.                         
.                         gen wtp_`p_name'_local = `var'*`social_cost
> _`p_name'_uw'
  7.                         gen wtp_`p_name'_global = `var'*(${`p_na
> me'_gwp}*`social_cost_CO2')
  8. 
.                 }                       
  9.                 else {
 10.                         
.                         if !inlist("`p_name'", "CH4", "N2O") {
 11.                 
.                                 gen wtp_`p_name' = `var' * `social_
> cost_`p_name'_uw'
 12.                                 
.                         }
 13.                         else {
 14.                                 
.                                 gen wtp_`p_name' = `var' * `social_
> cost_`p_name''                       
 15.                                 
.                         }
 16.                         
.                 }
 17.                 
.                 drop `var'
 18.                 
.         }

.                         
.         * Add Upstream Emissions on top of In-Air Emissions. 
.         ds wtp*
wtp_CO_local  wtp_NOx       wtp_VOC_lo~l
wtp_CO_glo~l  wtp_PM25      wtp_VOC_gl~l

.         foreach var in `r(varlist)' {
  2.                 
.                 local p = substr("`var'", 5, .)
  3.                 di in red "p is `p'"
  4.                 di in red "wtp upstream `p' is `wtp_upstream_`p'
> '"
  5.                         
.                 replace `var' = `var' + `wtp_upstream_`p''
  6.                         
.         }
p is CO_local
wtp upstream CO_local is .0001613966585663
(1 real change made)
p is CO_global
wtp upstream CO_global is .0000860469869688
(1 real change made)
p is NOx
wtp upstream NOx is .0033320091126371
(1 real change made)
p is PM25
wtp upstream PM25 is .0049924066488946
(1 real change made)
p is VOC_local
wtp upstream VOC_local is .0033169971601534
(1 real change made)
p is VOC_global
wtp upstream VOC_global is .0004901913697356
(1 real change made)

.         
.         gen wtp_CO2 = ((9752.236 / 1000000) * `social_cost_CO2')  +
>  `wtp_upstream_CO2'

.         gen wtp_SO2 = (((600 * 0.00305672062)/1000000) * `social_co
> st_SO2_uw') + `wtp_upstream_SO2' 

.         
.         /* 1 ppm =  Assume 600ppm, and assume density of 807.5 kg/m
> ^3 for jet fuel.
>         https://lae.mit.edu/2012/03/01/study-released-on-the-costs-
> and-benefits-of-desulfurizing-jet-fuel/ */
.         
.         gen wtp_N2O = `wtp_upstream_N2O'

.         gen wtp_CH4 = `wtp_upstream_CH4'

.         gen wtp_NH3 = `wtp_upstream_NH3'

.         
.         if "${value_local_jet_fuel}" == "no" {
.                 
.                 replace wtp_CO_local = `wtp_upstream_CO_local'
(1 real change made)
.                 replace wtp_CO_global = `wtp_upstream_CO_global'
(1 real change made)
.                 replace wtp_NOx = `wtp_upstream_NOx'
(1 real change made)
.                 replace wtp_PM25 = `wtp_upstream_PM25'
(1 real change made)
.                 replace wtp_VOC_local = `wtp_upstream_VOC_local'
(1 real change made)
.                 replace wtp_VOC_global = `wtp_upstream_VOC_global'
(1 real change made)
.                 replace wtp_SO2 = `wtp_upstream_SO2'
(1 real change made)
.                 
.         }       

.         
. 
.         local soc_l = wtp_CO_local + wtp_VOC_local + wtp_NOx + wtp_
> PM25 + wtp_SO2 + wtp_NH3

.         local soc_g = wtp_CO_global + wtp_VOC_global + wtp_CO2 + wt
> p_CH4 + wtp_N2O

.         
.         di in red `wtp_upstream_CO_local' + `wtp_upstream_CO_global
> ' + `wtp_upstream_NOx' + `wtp_upstream_PM25' + `wtp_upstream_VOC_lo
> cal' + `wtp_upstream_VOC_global' + `wtp_upstream_SO2' + `wtp_upstre
> am_CO2' + `wtp_upstream_CH4' + `wtp_upstream_N2O' + `wtp_upstream_N
> H3'
.2311338

.         
.         di in red `soc_l' + wtp_CO_global + wtp_VOC_global + wtp_CH
> 4 + wtp_N2O + `wtp_upstream_CO2'
.2311338

.         
.         di in red (`soc_l' + (`soc_g'* (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))))/`consumer_price'
1.8864542

.                 
.         di in red ((9752.236 / 1000000) * `social_cost_CO2')    
1.8821815

.                 
.         ds wtp*
wtp_CO_local  wtp_PM25      wtp_CO2       wtp_CH4
wtp_CO_glo~l  wtp_VOC_lo~l  wtp_SO2       wtp_NH3
wtp_NOx       wtp_VOC_gl~l  wtp_N2O

.         egen sum_check = rowtotal( `r(varlist)' )

.                 assert round(`soc_l' + `soc_g', 0.1) == round(sum_c
> heck, 0.1)

.                         drop sum_check  

.                 
. restore

.         
. ****************************************************
. /* 5. Calculate Components */
. ****************************************************
. local semi_e_demand_jet_tax = `e_demand_jet_fuel'/`consumer_price'

. 
. 
. local wtp_soc_g = `soc_g' * `semi_e_demand_jet_tax'

.                                         
. local wtp_soc_l = `soc_l' * `semi_e_demand_jet_tax' 

. 
.         local wtp_soc = `wtp_soc_l' + `wtp_soc_g'

. 
.         
. local semi_e_producer_prices_tax = 0 // Assuming = 0.

. local wtp_consumers = 1 + (1 +`tax_rate')*`semi_e_producer_prices_t
> ax'

. 
. * Producers
. local wtp_producers = -(`consumer_price'*`pct_markup')*`semi_e_dema
> nd_jet_tax'*(1 - ${gasoline_effective_corp_tax})

. //      assert `wtp_producers' >= 0
. local fisc_ext_prod = (`consumer_price'*`pct_markup')*`semi_e_deman
> d_jet_tax'*(${gasoline_effective_corp_tax})

. //      assert `fisc_ext_prod' <= 0
. 
.         
. if "${value_profits}" == "no" {
.         
.         local wtp_producers = 0 // Includes utilities and gas compa
> nies' profits. 
.         local fisc_ext_prod = 0
.         
. }

. 
. local total_WTP = `wtp_consumers' + (`wtp_soc_g'* (1 - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC}))) + `wtp_soc_l' + `wtp_producer
> s'        

. 
. local WTP_USPres = `wtp_consumers' + `wtp_producers' + `wtp_soc_l' 

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1-(${USShareFutureSSC})) * `wtp_soc_g' 

. 
. **************************
. /* 6. MVPF Calculations */
. **************************
. local program_cost = 1

. local fiscal_externality_tax = (`tax_rate' * `semi_e_demand_jet_tax
> ') + `fisc_ext_prod'

. 
. local fiscal_externality_subsidy = 0

. local fiscal_externality_lr = -`wtp_soc_g' * ${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}

. 
. local total_cost = `program_cost' + `fiscal_externality_tax' + `fis
> cal_externality_lr' + `fiscal_externality_subsidy' 

. 
. local p_spend = `program_cost' + `fiscal_externality_tax'

. local MVPF = `total_WTP'/`total_cost'

. 
. ****************************************
. /* 7. Cost-Effectiveness Calculations */
. ****************************************
. local q_carbon_mck = ((`wtp_soc_g') / ${sc_CO2_`dollar_year'}) / `s
> emi_e_demand_jet_tax'

. di in red "consumer price is `consumer_price'"
consumer price is 1.099

. local jet_fuel_markup = `consumer_price'*`pct_markup'

. di in red "jet fuel markup is `jet_fuel_markup'"
jet fuel markup is .2979547939123659

. di in red "tax rate is `tax_rate'"
tax rate is .2546289438691715

. local resource_cost = 0.92 * `consumer_price' - `jet_fuel_markup' -
>  `tax_rate'

. di in red "resource cost is `resource_cost'"
resource cost is .4584962622184626

. 
. local resource_ce = -`resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is -42.26757794788696

. di in red "consumer price is `consumer_price'"
consumer price is 1.099

. di in red "carbon is `q_carbon_mck'"
carbon is .0108474694902972

. 
. local resource_cost = -`consumer_price'

. local gov_carbon = `wtp_soc_g' / ${sc_CO2_`dollar_year'}

. 
. 
. **************************
. /* 8. Output */
. **************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = `wtp_soc_l' + (`wtp_soc_g' * (1 - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC})))

. global wtp_loc_`1' = `wtp_soc_l'

. global wtp_glob_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})))

. 
. global wtp_cons_`1' = `wtp_consumers'

. 
. global wtp_prod_s_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fiscal_externality_tax'

. global fisc_ext_s_`1' = `fiscal_externality_subsidy'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global q_CO2_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'}) * -1

. global q_CO2_no_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'}) * -1

. global q_CO2_mck_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'})/`sem
> i_e_demand_jet_tax'

. global q_CO2_mck_no_`1' = ((`wtp_soc_g')/${sc_CO2_`dollar_year'})/`
> semi_e_demand_jet_tax'

. global resource_cost_`1' = `consumer_price'

. global cost_wtp_`1' = -0

. global env_cost_wtp_`1' = -0    

. global env_cost_wtp_local_`1' = -0

. global env_cost_wtp_global_`1' = -0

. 
. global wtp_prod_`1' = `wtp_producers'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semi_e_demand_jet_tax'

. 
. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. 
. di in red `tax_rate'* `semi_e_demand_jet_tax'
-.03846079

. di in red `consumer_price'
1.099

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000059.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005a.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005b.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/jet_fuel_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/jet_fuel_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/jet_fuel_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/jet_fuel_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for jet_fuel under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 61 of 100 (k_gas_15_22)
Number of observations (_N) was 0, now 0.
k_gas_15_22

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /* Kilian, Lutz, and Xiaoqing Zhou. (Elasticity for January 2015 th
> rough March 2022)
> "Heterogeneity in the Pass-Through from Oil to Gasoline: A New Inst
> rument for Estimating the Price Elasticity of Gasoline."
> Federal Reserve Bank of Dallas Working Paper 2301 (January 2023)
> * https://www.dallasfed.org/-/media/documents/research/papers/2023/
> wp2301.pdf
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: k_gas_15_22 no uncorrec
> ted_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.198           .      -.198      -.1
> 98

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.         
. global wtp_soc_rbd_`1' = 0.00000000001

. global wtp_soc_rbd_local_`1' = 0.00000000000000000001

. global wtp_soc_rbd_global_`1' = 0.00000000000000000001

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. global wtp_lbd_`1' = `r(lbd_wtp)'

. global cost_lbd_`1' = `r(lbd_cost)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr w
> tp_soc_rbd env_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "wtp_soc_rbd", "env_cost_wtp", "cost_wtp", "wtp_p
> rod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 "Rebound" 6 `""Dynamic" "Env""' 7 `""Dynamic
> " "Price""' 8 `""Gasoline" "Producers" "' 9 `"Utilities"' 10 `""Tot
> al" "WTP""' 12 `""Program" "Cost""' 13 `"Taxes"' 14 `" "Subsidies" 
> "' 15 `" "Climate" "FE" "' 16 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 7

. global color_group4_`1' = 9

. global cost_color_start_`1' = 12

. global color_group5_`1' = 15

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Kilian
>  and Zhou 2023 (2015–2022 Estimate))"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. global note_`1' = `"Publication: Kilian and Zhou 2023 (2015–2022 Es
> timate)" "Global Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Des
> cription: Gasoline Price of $`r(consumer_price_return)' (`dollar_ye
> ar' dollars). `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005c.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005d.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005e.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_15_22_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_15_22_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_15_22_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_15_22_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for k_gas_15_22 under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 62 of 100 (k_gas_89_14)
Number of observations (_N) was 0, now 0.
k_gas_89_14

. *******************************************************************
> ******************
. /*       0. Program: Gas taxes                                     
>                                      */
. *******************************************************************
> ******************
. 
. /* Kilian, Lutz, and Xiaoqing Zhou. (Elasticity for January 1989 th
> rough December 2014)
> "Heterogeneity in the Pass-Through from Oil to Gasoline: A New Inst
> rument for Estimating the Price Elasticity of Gasoline."
> Federal Reserve Bank of Dallas Working Paper 2301 (January 2023)
> * https://www.dallasfed.org/-/media/documents/research/papers/2023/
> wp2301.pdf
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: k_gas_89_14 no uncorrec
> ted_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.314           .      -.314      -.3
> 14

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Kilian
>  and Zhou 2023 (1989–2014 Estimate))"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. 
. global note_`1' = `"Publication: Kilian and Zhou 2023 (1989–2014 Es
> timate)" "Global Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Des
> cription: Gasoline Price of $`r(consumer_price_return)' (`dollar_ye
> ar' dollars). `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005f.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005g.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005h.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_89_14_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_89_14_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_89_14_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/k_gas_89_14_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for k_gas_89_14 under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 63 of 100 (levin_gas)
Number of observations (_N) was 0, now 0.
levin_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Levin, Laurence, Matthew S. Lewis, and Frank A. Wolak. 
> "High frequency evidence on the demand for gasoline." 
> American Economic Journal: Economic Policy 9, no. 3 (2017): 314-47.
>  */
. *https://www.aeaweb.org/articles?id=10.1257/pol.20140093
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: levin_gas no uncorrecte
> d_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.295           .      -.295      -.2
> 95

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

. global `1'_name "Gasoline Tax (Price Elasticity from Coglianese et 
> al. 2017)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Levin, Lewis, and Wolak 2017" "Glo
> bal Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gas
> oline Price of $`r(consumer_price_return)' (`dollar_year' dollars).
>  `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005i.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005j.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005k.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/levin_gas_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/levin_gas_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/levin_gas_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/levin_gas_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for levin_gas under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 64 of 100 (li_gas)
Number of observations (_N) was 0, now 0.
li_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /* Li, Shanjun, Joshua Linn, and Erich Muehlegger. 
> "Gasoline taxes and consumer behavior." 
> American Economic Journal: Economic Policy 6, no. 4 (2014): 302-42.
>  */
. *https://www.aeaweb.org/articles?id=10.1257/pol.6.4.302
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: li_gas no uncorrected_v
> JK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.323           .      -.323      -.3
> 23

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Li, Li
> nn, and Muehlegger 2014)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Li, Linn, and Muehlegger 2014" "Gl
> obal Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Ga
> soline Price of $`r(consumer_price_return)' (`dollar_year' dollars)
> . `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005l.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005m.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005n.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/li_gas_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/li_gas_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/li_gas_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/li_gas_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for li_gas under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 65 of 100 (manzan_gas)
Number of observations (_N) was 0, now 0.
manzan_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Manzan, Sebastiano, and Dawit Zerom. 
> "A semiparametric analysis of gasoline demand in the United States 
> reexamining the impact of price." 
> Econometric Reviews 29, no. 4 (2010): 439-468. */
. *https://www.tandfonline.com/doi/pdf/10.1080/07474930903562320
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: manzan_gas no uncorrect
> ed_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.355           .      -.355      -.3
> 55

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Manzan
>  and Zerom 2010)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. global note_`1' = `"Publication: Manzan and Zerom 2010" "Global Ass
> umptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline P
> rice of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_no
> te_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005o.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005p.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005q.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/manzan_gas_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/manzan_gas_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/manzan_gas_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/manzan_gas_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for manzan_gas under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 66 of 100 (metcalf_ptc)
Number of observations (_N) was 0, now 0.
metcalf_ptc

. **************************************************
. /*       0. Program: PTC Wind subsidies              */
. **************************************************
. 
. /*
> Metcalf, Gilbert E. 
> "Investment in energy infrastructure and the tax code." 
> Tax policy and the economy 24.1 (2010): 1-34.
> 
> https://www.journals.uchicago.edu/doi/full/10.1086/649826
> */
. 
. *Policy variation is at the $0.01 per kwh
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"elas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -1.3           .       -1.3       -1
> .3

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.                 local dollar_year = ${policy_year}
.         }

. if "`4'" == "current"{
.                 local dollar_year = ${current_year}
.         }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.         
.         
.         // Adjust Values if Calculating In-Context MVPFs.
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseli
> ne_gen" {
.                 
.                 local capacity_factor = `capacity_factor_context' /
> / Land Based Wind Market Report - Capacity Factor in Table 34 (2007
> ). 
.                 local average_size = 1.65 // in MW frrom https://pu
> bs.usgs.gov/sir/2011/5036/sir2011-5036.pdf on Page 3.
.                 local current_ptc = 0.015 * (${cpi_`dollar_year'}/$
> {cpi_1992}) // Enacted in 1992 and inflation adjusted
.                         *PTC is roughly $15 per MWh in 1992 dollars
>  and is inflation adjusted during the sample period
.         }

.         
.         // Calculate weighted average over the sample period for th
> e in-context LCOE
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("wind_lcoe")
(5 vars, 25 obs)

.                 keep if Year >= 2000 & Year <= ${policy_year} // On
> ly have capacity additions data starting in 1999
(17 observations deleted)

.                 gen ptc_nominal = .
(8 missing values generated)

.                 gen lcoe_nominal = LCOE

.                 qui sum Year

.                 forvalues y = `r(min)'(1)`r(max)' {
  2.                         replace ptc_nominal = 15 * (${cpi_`y'}/$
> {cpi_1992}) if Year == `y'
  3.                         replace lcoe_nominal = LCOE * (${cpi_`y'
> }/${cpi_2022}) if Year == `y'
  4.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 replace ptc_nominal = 0 if Year == 2000 | Year == 2
> 002 | Year == 2004 | Year == 2010 // expired in those years
(3 real changes made)

.                 collapse (mean) LCOE ptc_nominal lcoe_nominal [aw=c
> apacity_additions]

.                 local avg_lcoe = (LCOE[1] * (${cpi_2007}/${cpi_2022
> }))/1000

.                 local avg_ptc = ptc_nominal[1]/1000

.                 local avg_nominal_lcoe = lcoe_nominal[1]/1000

.         restore

.         
.         if "${lcoe_scaling}" == "yes" {
.                 local lcoe = ${scalar} * `lcoe'
.         }

.         
.         if "${subsidy_loop}" == "yes" {
.                 local current_ptc = ${fed_sub_loop}
.         }

. 
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020) or 93,9
> 24 (2007), world numbers. Available in replication package of cited
>  paper (lcoe_learning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020) or 1
> 9,967 (2007) , world numbers. Available in replication package of c
> ited paper (lcoe_learning_data_wind).

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         local cum_sales = 93924 / `average_size' // 742,689 (2020) 
> or 93,924 (2007), world numbers. Available in replication package o
> f cited paper (lcoe_learning_data_wind).
.         local marg_sales = 19967 / `average_size' // 92,490 for (20
> 20) or 19,967 (2007) , world numbers. Available in replication pack
> age of cited paper (lcoe_learning_data_wind).
.         local lcoe = `avg_lcoe'
. }

. 
. *Getting the elasticity
. local epsilon = `elas'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0280  // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280  // https://www.nrel.gov/docs/fy24
> osti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. if "${constant_semie}" == "yes" {
.         local lcoe_incontext = `avg_lcoe' + ((`avg_lcoe')/`capital_
> discount') * (1 - (1/(1+`capital_discount')^(`lifetime' - 1)))
.         local ratio_incontext = `ptc_discounted'/ `lcoe_incontext'
.         local ic_scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_
> incontext'/`avg_lcoe')
.         local semie = (`epsilon' / (`avg_lcoe' * (1 - (`avg_ptc' * 
> 100 * `ratio_incontext')))) * 0.01 * `ic_scale_factor'
.         local epsilon = (`semie' * (`lcoe' * (1 - (`current_ptc' * 
> 100 * `ratio')))) / (0.01 * `ic_scale_factor')
. }

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         local lcoe_incontext = `avg_lcoe' + ((`avg_lcoe')/`capital_
> discount') * (1 - (1/(1+`capital_discount')^(`lifetime' - 1)))
.         local ratio_incontext = `ptc_discounted'/ `lcoe_incontext'
.         local ic_scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_
> incontext'/`avg_lcoe')
.         local semie = (`epsilon' / (`avg_lcoe' * (1 - (`avg_ptc' * 
> 100 * `ratio_incontext')))) * 0.01 * `ic_scale_factor'
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("metcalf_ptc") marg_sales(`marg_sales') cum_sales(`
> cum_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta(
> `farmer_theta') subsidy_max(`subsidy_max') current_ptc(`current_ptc
> ')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Metcalf PTC"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005r.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005s.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005t.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/metcalf_ptc_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/metcalf_ptc_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/metcalf_ptc_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/metcalf_ptc_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for metcalf_ptc under current
(6 vars, 5 obs)
spec_type     policy_year   ef_region
emissions_~r  run_year      State

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   ef_region
emissions_~r  run_year      State
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   ef_region
emissions_~r  run_year      State
1
Specification 1 of 1, program 67 of 100 (muehl_efmp)
Number of observations (_N) was 0, now 0.
muehl_efmp

. *******************************************************************
> ******************
. /*       0. Program: California Low-Income Electric Vehicle Subsidy
>             */
. *******************************************************************
> ******************
. 
. /*
> Muehlegger, Erich, and David S. Rapson. 
> "Subsidizing low-and middle-income adoption of electric vehicles: Q
> uasi-experimental evidence from California." 
> Journal of Public Economics 216 (2022): 104752.
> * https://www.sciencedirect.com/science/article/abs/pii/S0047272722
> 001542
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: muehl_efmp no uncorrect
> ed_vJK current

. ********************************
. /* 0.5. Robustness Check Toggles */
. ********************************
. local marg_mvpf = 1

. local non_marg_mvpf = 0

. 
. local s_0 = 0

. local s_1 = 1

. local s_bar = 0

. 
. local new_cost_curve = 1

. local old_cost_curve = 0

. 
. local dynamic_grid = 1

. local static_grid = 0

. 
. local want_rebound = 1

. 
. local elec_dem_elas = -0.190144

. local elec_sup_elas = 0.7806420154513118

. 
. local bev_cf = "${bev_cf}"

. local veh_lifespan_type = substr("${bev_cf}", strpos("${bev_cf}", "
> _") + 1, .)

. 
. local simplified_wf = 0

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow  
. 
. levelsof estimate, local(estimates)
`"epsilon"' `"farmer_theta"' `"pass_through"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         2.1           .        2.1        2
> .1

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .85           .        .85        .
> 85
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. local pass_through = 0.85

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. global run_year = ${run_year}

. local dollar_year = ${dollar_year}

. 
. ****************************************************
. /* 3a. EV Counterfactual Vehicle Fuel Economy Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         forvalues y = 2015(1)2018{
  2.                 qui sum total_sales if year == `y'
  3.                 local total_sales`y' = r(mean)
  4.         }

.         if "`4'" == "baseline"{
.                 keep if year >= 2015 & year <= 2018
.                 forvalues y = 2015(1)2018{
  2.                         qui sum total_sales if year == `y'
  3.                         local total_sales`y' = r(mean)
  4.                         qui sum cf_mpg if year == `y'
  5.                         local cf_mpg_`y' = r(mean)
  6.                 }
.                 local ev_cf_mpg = (`total_sales2015' * `cf_mpg_2015
> ' + `total_sales2016' * `cf_mpg_2016' + `total_sales2017' * `cf_mpg
> _2017' + `total_sales2018' * `cf_mpg_2018') ///
>                                                         / (`total_s
> ales2015' + `total_sales2016' + `total_sales2017' + `total_sales201
> 8')
.         }

.         else{
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum cf_mpg
.                 local ev_cf_mpg = r(mean)
.         }

. restore

. 
. ****************************************************
. /* 3b. Gas Price and Tax Data */
. ****************************************************
. 
. 
. preserve

.         use "${gas_fleet_emissions}/fleet_year_final", clear

.         keep if fleet_year==${run_year}
(1 observation deleted)

.         
.         qui ds *_gal

.         foreach var in `r(varlist)' {
  2.                 replace `var' = `var'/1000000
  3.                 * Converting from grams per gallon to metric ton
> s per gallon.
.                 qui sum `var'
  4.                 local `var' = r(mean)
  5.         }
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

. restore

. 
. preserve

.         use "${user_specific_assumptions}/files_v${user_name}/Gasol
> ine Prices, Markups, and Taxes/gas_data_final", clear

.                         
.         gen real_gas_price = gas_price*(${cpi_${dollar_year}} / ind
> ex) 

.         gen real_tax_rate = avg_tax_rate*(${cpi_${dollar_year}} / i
> ndex)

.         gen real_markup = markup * (${cpi_${dollar_year}} / index)

.                         
.         keep if year==${run_year}
(56 observations deleted)

.                 
.         local consumer_price = real_gas_price 

.         * Consumer price = includes taxes. 
.         local tax_rate = real_tax_rate

.         local markup = real_markup

.                 
.         if "${spec_type}" == "baseline" {
.                 qui import excel "${assumptions}/evs/processed/stat
> e_level_gas_tax_rates", first clear
.                 keep tax2015 tax2016 tax2017 tax2018 state
.                 replace tax2015 = tax2015 * (${cpi_${dollar_year}} 
> / ${cpi_2015})
.                 replace tax2016 = tax2016 * (${cpi_${dollar_year}} 
> / ${cpi_2016})
.                 replace tax2017 = tax2017 * (${cpi_${dollar_year}} 
> / ${cpi_2017})
.                 replace tax2018 = tax2018 * (${cpi_${dollar_year}} 
> / ${cpi_2018})
.                 keep if state == "California"
.                 merge m:1 state using "${assumptions}/evs/processed
> /pop_by_state", keep(match)
.                 gen N = pop2015 + pop2016 + pop2017 + pop2018
.                 gen weighted_avg = pop2015 * tax2015 + pop2016 * ta
> x2016 + pop2017 * tax2017 + pop2018 * tax2018
.                 replace weighted_avg = weighted_avg / N
.                 sum weighted_avg 
.                 local tax_rate = r(mean) / 100
. 
.                 use "${gas_price_data}/gas_data_monthly", clear
.                 keep if inrange(year, 2015, 2018) // end year being
>  2018 is sus, based on pg. 3 of paper
.                 drop if year == 2015 & month < 6
.                 * Muehlegger and Rapson 2022 look at BEV rebates fo
> r Q3 2015 through Q4 2018. (uncertain about end date)
.                 * Calculate gas price for 2015 using only 6 months 
> in 2015 sample. 
. 
.                 gen real_gas_price = gas_price * (${cpi_${dollar_ye
> ar}} / index) // no state-level gas price data so just gonna keep u
> sing national numbers
.                 gen real_markup = markup * (${cpi_${dollar_year}} /
>  index)
. 
.                 collapse (mean) real*  [aw=gas_consumption]
.                 assert _n == 1
.                 local consumer_price = real_gas_price 
.                 * Consumer price = includes taxes.
.                 local markup = real_markup
.         }       

. restore

. 
. ****************************************************
. /* 3c. EV Specific Assumptions */
. ****************************************************
. preserve

.         qui import excel "${policy_assumptions}", first clear sheet
> ("evs")

.                 
.         levelsof Parameter, local(levels)
`"corporate_tax"' `"ng_public"' `"utility_profit"' `"utility_public"'
>  `"val_given"' `"vehicle_avg_lifetime"' `"vehicle_car_lifetime"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.                 
.         local val_given = ${val_given}

.         local lifetime = ${vehicle_`veh_lifespan_type'_lifetime}

. restore

. 
. ****************************************************
. /* 3d. EV Energy Consumption Data */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         if "`4'" == "baseline"{
.                 forvalues y = 2015(1)2018{
  2.                         qui sum avg_kwh_per_mile if year == `y'
  3.                         local kwh_per_mile`y' = r(mean)
  4.                         qui sum avg_batt_cap if year == `y'
  5.                         local batt_cap`y' = r(mean)
  6.                 }
. 
.                 local kwh_per_mile = (`total_sales2015' * `kwh_per_
> mile2015' + `total_sales2016' * `kwh_per_mile2016' + `total_sales20
> 17' * `kwh_per_mile2017' + `total_sales2018' * `kwh_per_mile2018') 
> ///
>                                                         / (`total_s
> ales2015' + `total_sales2016' + `total_sales2017' + `total_sales201
> 8')
.                 local batt_cap = (`total_sales2015' * `batt_cap2015
> ' + `total_sales2016' * `batt_cap2016' + `total_sales2017' * `batt_
> cap2017' + `total_sales2018' * `batt_cap2018') ///
>                                                         / (`total_s
> ales2015' + `total_sales2016' + `total_sales2017' + `total_sales201
> 8')
.         }

.         else{
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_kwh_per_mile
.                 local kwh_per_mile = r(mean)
.                 qui sum avg_batt_cap
.                 local batt_cap = r(mean)
.         }

. restore

. 
. 
. ****************************************************
. /*                  3e. EV Price Data             */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/kwh_msrp_batt_cap.dta", c
> lear

.         forvalues y = 2015(1)2018{
  2.                 replace avg_msrp = avg_msrp * (${cpi_2015} / ${c
> pi_`y'}) if year == `y'
  3.                 qui sum avg_msrp if year == `y'
  4.                 local msrp`y' = r(mean)
  5.         }
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)

.         * calculating fixed price in paper's sample period for use 
> in calculating a constant elasticity
.         local elas_msrp = (`total_sales2015' * `msrp2015' + `total_
> sales2016' * `msrp2016' + `total_sales2017' * `msrp2017' + `total_s
> ales2018' * `msrp2018') ///
>                                         / (`total_sales2015' + `tot
> al_sales2016' + `total_sales2017' + `total_sales2018')

.         if "`4'" == "baseline"{
.                 local msrp = `elas_msrp'
.         }

.         else{
.                 use "${assumptions}/evs/processed/kwh_msrp_batt_cap
> .dta", clear
.                 keep if year == ${run_year}
(9 observations deleted)
.                 qui sum avg_msrp
.                 local msrp = r(mean) * (${cpi_`dollar_year'} / ${cp
> i_${run_year}})
.         }

. restore

. 
. ****************************************************
. /* 3f. EV and ICE Age-State-Level VMT Data */
. ****************************************************
. local ub = `lifetime'

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ev_vmt_by_state_b
> y_age", clear
.                 keep if state == "CA"
.                 keep state age vmt_by_state_age
. 
.                 local ub = `lifetime'
.                 duplicates drop age vmt_by_state_age, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ev_miles_traveled`y' = vmt_by_stat
> e_age[`y']
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ev_vmt_by_age", c
> lear
.                 local ub = `lifetime'
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ev_miles_traveled`y' = vmt[`y']
  3.                 }
.         }

. restore

. 
. preserve

.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/ice_vmt_by_state_
> by_age", clear
.                 keep if state == "CA"
.                 keep state age vmt_by_state_age
. 
.                 local ub = `lifetime'
.                 duplicates drop age vmt_by_state_age, force
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt_by_sta
> te_age[`y'] * ${EV_VMT_car_adjustment}
  3.                 }
.         }

.         else{
.                 use "${assumptions}/evs/processed/ice_vmt_by_age", 
> clear
.                 duplicates drop age vmt, force

Duplicates in terms of age vmt

(0 observations are duplicates)
.                 sort age
.                 forvalues y = 1(1)`ub'{
  2.                         local ice_miles_traveled`y' = vmt[`y'] *
>  ${EV_VMT_car_adjustment}
  3.                 }
.         }       

. restore

. 
. ** Fixing EVs vmt at same levels as ICE
. forvalues y = 1(1)`ub'{
  2.         local ev_miles_traveled`y' = `ice_miles_traveled`y''
  3. }

. 
. ****************************************************
. /* 3g. Population Data */
. ****************************************************
. preserve

.         ** avg over policy's time period (2015-2018) for baseline
.         if "`4'" == "baseline"{
.                 use "${assumptions}/evs/processed/pop_by_state_2000
> _2019", clear
.                 forvalues y = 2015(1)2018{
  2.                         qui sum pop`y' if state == "California"
  3.                         local CA_pop_`y' = r(mean)
  4.                 }
.         }

. restore

. 
. ****************************************************
. /* 3h. Cost Curve */
. ****************************************************
. preserve

.         use "${assumptions}/evs/processed/battery_sales_combined", 
> clear

.         keep if year == `dollar_year'
(31 observations deleted)

.         qui sum cum_sales

.         local cum_sales = r(mean)

.         qui sum marg_sales

.         local marg_sales = r(mean)              

. restore

. 
. preserve

.         use "${assumptions}/evs/processed/cyl_batt_costs_combined",
>  clear

.         if "`4'" == "baseline"{
.                 forvalues y = 2015(1)2018{
  2.                         qui sum prod_cost_2018 if year == `y'
  3.                         local prod_cost`y' = r(mean)
  4.                 }
.                 local prod_cost = (`total_sales2015' * `prod_cost20
> 15' + `total_sales2016' * `prod_cost2016' + `total_sales2017' * `pr
> od_cost2017' + `total_sales2018' * `prod_cost2018') ///
>                                                 / (`total_sales2015
> ' + `total_sales2016' + `total_sales2017' + `total_sales2018')
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

.         else{
.                 keep if year == `dollar_year'
(31 observations deleted)
.                 qui sum prod_cost_2018
.                 local prod_cost = r(mean)
.                 local batt_per_kwh_cost = `prod_cost' * (${cpi_2020
> } / ${cpi_2018})
.         }

. restore

. 
. ****************************************************
. /* 3i. Subsidy Levels */
. ****************************************************
. preserve

.         ** Federal Subsidy
. 
.         use "${assumptions}/evs/processed/bev_fed_subsidy_data", cl
> ear

.         keep if year >= 2015 & year <= 2018
(8 observations deleted)

.         egen N = total(subsidy_N)

.         egen weighted_avg = total(subsidy_weighted_avg * subsidy_N)

.         replace weighted_avg = weighted_avg / N
(4 real changes made)

.         qui sum weighted_avg

.         local elas_avg_fed_subsidy = r(mean)

. 
.         if "`4'" == "baseline"{
.                 local avg_fed_subsidy = `elas_avg_fed_subsidy'
.         }

.         else{
.                 use "${assumptions}/evs/processed/bev_fed_subsidy_d
> ata", clear
.                 keep if year == ${run_year}
(11 observations deleted)
.                 qui sum subsidy_weighted_avg
.                 local avg_fed_subsidy = r(mean)
. 
.                 local avg_state_subsidy = 604.27 // see NST-EST2023
> -POP spreadsheet
.         }

.         if "${ev_fed_subsidy}" != ""{
.                 if ${ev_fed_subsidy} != -1 {
.                         local avg_fed_subsidy = ${ev_fed_subsidy}
.                 }
.         }

. restore

. 
. ****************************************************
. /* 4. Set local assumptions unique to this policy */
. ****************************************************
. ** Cost assumptions:
. * Program costs - US$
. if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1){
.         local rebate_cost = 9000 // Average subsidy (cf. text p. 8)
. }

. else if `s_0' == 1{
.         local rebate_cost = 0
. }

. else if `s_bar' == 1{
.         local rebate_cost = 9000 / 2
. }

. local adj_rebate_cost = `rebate_cost' * (${cpi_`dollar_year'} / ${c
> pi_${policy_year}})

. local avg_subsidy = `adj_rebate_cost'

. local elas_avg_subsidy = `rebate_cost' // state subsidy, always wan
> t this in the policy year's dollars

. 
. if "`4'" != "baseline"{
.         if (`s_1' == 1 & `marg_mvpf' == 1) | (`non_marg_mvpf' == 1)
> {
.                 local avg_subsidy = `avg_state_subsidy'
.         }
.         else if `s_0' == 1{
.                 local avg_subsidy = 0
.         }
.         else if `s_bar' == 1{
.                 local avg_subsidy = `avg_state_subsidy' / 2
.         }
. }

. 
. ****************************************************
. /*          5. Intermediate Calculations          */
. ****************************************************
. 
. local net_elas_msrp = `elas_msrp' - `elas_avg_fed_subsidy' - 0.5 * 
> `elas_avg_subsidy'

. local epsilon = -`epsilon' // make it negative for the cost curve

. 
. local net_msrp = `msrp' - `avg_subsidy' - `avg_fed_subsidy'

. local total_subsidy = `avg_subsidy' + `avg_fed_subsidy'

. local semie = -`epsilon' / `net_msrp' // the negative sign makes th
> is value positive

. 
. if `marg_mvpf' == 1{
.         local beh_response = `semie' * `pass_through'
. }

. else if `non_marg_mvpf' == 1{
.         local beh_response = `semie' * `avg_subsidy'
. }

. 
. * oil producers
. local producer_price = `consumer_price' - `tax_rate'

. local producer_mc = `producer_price' - `markup'

. 
. * utility companies
. if "`4'" == "baseline"{
.         local util_gov_revenue = (`CA_pop_2015'* ${government_reven
> ue_2015_CA} + `CA_pop_2016'* ${government_revenue_2016_CA} + `CA_po
> p_2017'* ${government_revenue_2017_CA} + `CA_pop_2018'* ${governmen
> t_revenue_2018_CA}) ///
>                                                                 / (
> `CA_pop_2015' + `CA_pop_2016' + `CA_pop_2017' + `CA_pop_2018')
.         local util_producer_surplus = (`CA_pop_2015'* ${producer_su
> rplus_2015_CA} + `CA_pop_2016'* ${producer_surplus_2016_CA} + `CA_p
> op_2017'* ${producer_surplus_2017_CA} + `CA_pop_2018'* ${producer_s
> urplus_2018_CA}) ///
>                                                                 / (
> `CA_pop_2015' + `CA_pop_2016' + `CA_pop_2017' + `CA_pop_2018')
. }

. 
. else{
.         local util_gov_revenue ${government_revenue_`dollar_year'_$
> {State}}
.         local util_producer_surplus ${producer_surplus_`dollar_year
> '_${State}}
. }

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. * Program cost
. if `marg_mvpf' == 1{
.         local program_cost = 1
. }

. else if `non_marg_mvpf' == 1{
.         local program_cost = (1 + `beh_response') * `avg_subsidy'
. }

. 
. local utility_fisc_ext = 0

. forvalues y = 1(1)`ub'{
  2.         local utility_fisc_ext = `utility_fisc_ext' + (`beh_resp
> onse' * `ev_miles_traveled`y'' * `kwh_per_mile' * `util_gov_revenue
> ') / ((1 + `discount')^(`y' - 1)) // gain in profit tax from highte
> r utility profits + gain in gov revenue since 28% of utilities are 
> publicly owned
  3. }

. 
. if "`4'" == "baseline"{
.         local gas_fisc_ext = 0
.         forvalues y = 1(1)`ub'{
  2.                 local gas_fisc_ext = `gas_fisc_ext' + ((`beh_res
> ponse' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * `tax_rate') / ((
> 1+`discount')^(`y' - 1)))
  3.         }
. }

. else{
.         local gas_fisc_ext = `beh_response' * ${`bev_cf'_cf_gas_fis
> c_ext_`dollar_year'}
.         local tax_rate = ${nominal_gas_tax_`dollar_year'} // for La
> tex
. }

. 
. 
. local fed_fisc_ext = `beh_response' * `avg_fed_subsidy'

. local avg_fed_subsidy_n = `avg_fed_subsidy' / `net_msrp'

. 
. local beh_fisc_ext = `semie' * `avg_subsidy'

. 
. if `marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `fed_fisc_ext' + `beh_fisc_ext'
. }

. else if `non_marg_mvpf' == 1{
.         local total_cost = `program_cost' - `utility_fisc_ext' + `g
> as_fisc_ext' + `fed_fisc_ext'
. }

. 
. 
. *************************
. /* 7. WTP Calculations */
. *************************
. 
. * consumers
. local wtp_cons = `pass_through'

. * dealers/car manufacturers
. local wtp_deal = (1 - `pass_through')

. 
. * marginal and inframarginal consumers/dealers (?)
. local wtp_marg = 0.5 * `beh_response' * `avg_subsidy'

. local wtp_inf = `avg_subsidy'

. 
. local wtp_prod_u = 0

. local wtp_prod_s = 0

. 
. if "${value_profits}" == "yes"{
. 
.         if "`4'" == "baseline"{
.                 local tot_gal = (${`bev_cf'_gal_2015} * `total_sale
> s2015' + ${`bev_cf'_gal_2016} * `total_sales2016' + ${`bev_cf'_gal_
> 2017} * `total_sales2017' + ${`bev_cf'_gal_2018} * `total_sales2018
> ') ///
>                                                                    
>        / (`total_sales2015' + `total_sales2016' + `total_sales2017'
>  + `total_sales2018') // for Latex
.                 local gas_markup = (${nominal_gas_markup_2015} * ($
> {cpi_${dollar_year}} / ${cpi_2015}) * `total_sales2015' + ${nominal
> _gas_markup_2016} * (${cpi_${dollar_year}} / ${cpi_2016}) * `total_
> sales2016' + ${nominal_gas_markup_2017} * (${cpi_${dollar_year}} / 
> ${cpi_2017}) * `total_sales2017' + ${nominal_gas_markup_2018} * (${
> cpi_${dollar_year}} / ${cpi_2018}) * `total_sales2018') ///
>                                                                    
>        / (`total_sales2015' + `total_sales2016' + `total_sales2017'
>  + `total_sales2018') // for Latex
. 
.                 local wtp_prod_s = 0
.                 forvalues y = 1(1)`ub'{
  2.                         local wtp_prod_s = `wtp_prod_s' + ((`beh
> _response' * (`ice_miles_traveled`y'' / `ev_cf_mpg') * (`producer_p
> rice' - `producer_mc')) / ((1 + `discount')^(`y' - 1))) // positive
  3.                 }
.         }
. 
.         else{
.                 local tot_gal = ${`bev_cf'_gal_`dollar_year'} // fo
> r Latex
.                 local gas_markup = ${nominal_gas_markup_`dollar_yea
> r'} // for Latex
. 
.                 local wtp_prod_s = `beh_response' * ${`bev_cf'_wtp_
> prod_s_`dollar_year'} 
. 
.         }
. 
.         * producers - utilities
.         local wtp_prod_u = 0
.         local tot_kwh = 0
. 
.         forvalues y = 1(1)`ub'{
  2.                 local tot_kwh = `tot_kwh' + (`ev_miles_traveled`
> y'' * `kwh_per_mile') // for Latex
  3.                 local wtp_prod_u = `wtp_prod_u' + ((`beh_respons
> e' * (`ev_miles_traveled`y'' * `kwh_per_mile') * `util_producer_sur
> plus') / ((1 + `discount')^(`y' - 1)))
  4.         }
. }

. 
. ** take out the corporate effective tax rate
. local total_wtp_prod_s = `wtp_prod_s'

. local wtp_prod_s = `total_wtp_prod_s' * (1 - 0.21)

. local gas_corp_fisc_e = `total_wtp_prod_s' * 0.21

. 
. local profits_fisc_e = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. if `marg_mvpf' == 1{
.         local wtp_private = `wtp_cons' + `wtp_deal' - `wtp_prod_s' 
> + `wtp_prod_u'
. }

. else if `non_marg_mvpf' == 1{
.         local wtp_private = `wtp_marg' + `wtp_inf' - `wtp_prod_s' +
>  `wtp_prod_u'
. }

. 
. 
. * learning by doing
. local prod_cost = `prod_cost' * (${cpi_`dollar_year'} / ${cpi_2018}
> ) // data is in 2018USD

. 
. local batt_cost = `prod_cost' * `batt_cap'

. local batt_frac = `batt_cost' / `msrp'

. 
. local fixed_cost_frac = 1 - `batt_frac'

. 
. local car_theta = `farmer_theta' * `batt_frac'

. 
. 
. ** Externality and WTP for driving a battery electric vehicle
. 
. if "`4'" == "baseline"{
. 
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         
.         *** dynamic grid stuff
.         local kwh_used `ev_miles_traveled1' * `kwh_per_mile'
.         local end_year = `dollar_year' + `ub' - 1
.         local i = 1
.         forvalues y = `dollar_year'(1)`end_year'{
  2.                 dynamic_split_grid `kwh_used', starting_year(`do
> llar_year') ext_year(`y') discount_rate(`discount') ef(${replacemen
> t}) geo("${State}") type("uniform") grid_specify("yes") model(${gri
> d_model})
  3.                 if `i' == 1{
  4.                         local ev_first_damages_g = `r(global_env
> iro_ext)' // for Latex
  5.                 }
  6.                 local i = `i' + 1
  7.                 local kwh_used `ev_miles_traveled`i'' * `kwh_per
> _mile'
  8.                 local local_benefit = `local_benefit' + `r(local
> _enviro_ext)'
  9.                 local global_benefit = `global_benefit' + `r(glo
> bal_enviro_ext)'
 10. 
.                 local carbon_content = `carbon_content' + `r(carbon
> _content)'
 11.                 local q_carbon_yes_ev = -`beh_response' * `carbo
> n_content'
 12.                 local q_carbon_yes_ev_mck = -`carbon_content'
 13.         }
.         local total_bev_damages_glob = `global_benefit' // for Late
> x
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -`local_benefit' / `net_msr
> p' // for Latex
. 
.         local wtp_yes_ev_local = -`beh_response' * `local_benefit'
.         local wtp_yes_ev_global_tot = -`beh_response' * `global_ben
> efit'
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         ** need US-wide stuff for scaling cost curve outputs
.         local us_wtp_yes_ev_local = -`beh_response' * ${yes_ev_dama
> ges_local_no_r_`dollar_year'}
.         local us_wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev
> _damages_global_no_r_`dollar_year'} 
.         local us_wtp_yes_ev_g = `us_wtp_yes_ev_global_tot' * ((1 - 
> ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutu
> reSCC}))
.         local us_wtp_yes_ev = `us_wtp_yes_ev_local' + `us_wtp_yes_e
> v_g'
. }

. 
. ** now using Aidan's cleanly calculated externality values
. else{
.         local kwh_used_year_one = `ev_miles_traveled1' * `kwh_per_m
> ile' // for Latex
.         local total_bev_damages_glob = ${yes_ev_damages_global_no_r
> _`dollar_year'} // for Latex
.         local total_bev_damages_glob_n = `total_bev_damages_glob' /
>  `net_msrp' // for Latex
.         local total_bev_damages_loc_n = -${yes_ev_damages_local_no_
> r_`dollar_year'} / `net_msrp' // for Latex
.         if "${latex}" == "yes"{
.                 local ev_first_damages_g = ${ev_first_damages_g_202
> 0} // for Latex
.         }
.         
.         local wtp_yes_ev_local = -`beh_response' * ${yes_ev_damages
> _local_no_r_`dollar_year'}
.         local wtp_yes_ev_global_tot = -`beh_response' * ${yes_ev_da
> mages_global_no_r_`dollar_year'}
.         local wtp_yes_ev_g = `wtp_yes_ev_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local q_carbon_yes_ev = -`beh_response' * ${yes_ev_carbon_c
> ontent_`dollar_year'}
.         local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_`dolla
> r_year'}
. }

. 
. local yes_ev_local_ext = `wtp_yes_ev_local' / `beh_response'

. local yes_ev_global_ext_tot = `wtp_yes_ev_global_tot' / `beh_respon
> se'

. 
. local wtp_yes_ev = `wtp_yes_ev_local' + `wtp_yes_ev_g'

. 
. local yes_ev_ext = `wtp_yes_ev' / `beh_response'

. 
. ** Calculating the gallons used in the first year of a vehicle's li
> fetime for Latex
. preserve

. 
.         if "`4'" == "baseline"{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 forvalues y = 2015(1)2018{
  2.                         qui sum `bev_cf'_mpg if year == `y'
  3.                         local cf_mpg_`y' = `r(mean)'
  4. 
.                         local gas_consumed_year_one_`y' = `vmt_age_
> 1' / `cf_mpg_`y''
  5.                 }
. 
.                 local gas_consumed_year_one = (`gas_consumed_year_o
> ne_2015' * `total_sales2015' + `gas_consumed_year_one_2016' * `tota
> l_sales2016' + `gas_consumed_year_one_2017' * `total_sales2017' + `
> gas_consumed_year_one_2018' * `total_sales2018') ///
>                                                                    
>        / (`total_sales2015' + `total_sales2016' + `total_sales2017'
>  + `total_sales2018')
. 
.         }

. 
.         else{
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vmt_dist_car.dta", clear
.                 qui sum vmt_avg_car if age == 1
.                 local vmt_age_1 = `r(mean)'
. 
.                 use "${user_specific_assumptions}/files_v${user_nam
> e}/Vehicle Lifetime Damages/vehicles_${scc_ind_name}_${dr_ind_name}
> _rbd_${hev_cf}.dta", clear
.                 qui sum `bev_cf'_mpg if year == 2020
.                 local cf_mpg_2020 = `r(mean)'
. 
.                 local gas_consumed_year_one = `vmt_age_1' / `cf_mpg
> _2020'
.         }

. 
. restore

. 
. ** Externality and WTP for driving an ICE vehicle
. 
. if "`4'" == "baseline"{
.         local wtp_no_ice_local = `beh_response' * ((${`bev_cf'_cf_d
> amages_loc_2015} * `total_sales2015' + ${`bev_cf'_cf_damages_loc_20
> 16} * `total_sales2016' + ${`bev_cf'_cf_damages_loc_2017} * `total_
> sales2017' + ${`bev_cf'_cf_damages_loc_2018} * `total_sales2018') /
> //
>                                                                    
>                               / (`total_sales2015' + `total_sales20
> 16' + `total_sales2017' + `total_sales2018'))
. 
.         local wtp_no_ice_global_tot = `beh_response' * ((${`bev_cf'
> _cf_damages_glob_2015} * `total_sales2015' + ${`bev_cf'_cf_damages_
> glob_2016} * `total_sales2016' + ${`bev_cf'_cf_damages_glob_2017} *
>  `total_sales2017' + ${`bev_cf'_cf_damages_glob_2018} * `total_sale
> s2018') ///
>                                                                    
>                               / (`total_sales2015' + `total_sales20
> 16' + `total_sales2017' + `total_sales2018'))
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / (`
> beh_response') // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / (`beh_re
> sponse') // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
. 
.         local q_carbon_no_ice = `beh_response' * ((${`bev_cf'_cf_ca
> rbon_2015} * `total_sales2015' + ${`bev_cf'_cf_carbon_2016} * `tota
> l_sales2016' + ${`bev_cf'_cf_carbon_2017} * `total_sales2017' + ${`
> bev_cf'_cf_carbon_2018} * `total_sales2018') / (`total_sales2015' +
>  `total_sales2016' + `total_sales2017' + `total_sales2018'))
.         local q_carbon_no_ice_mck = `q_carbon_no_ice' / `beh_respon
> se'
. 
.         
.         ** need US-wide stuff for scaling cost curve outputs
.         local us_wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_
> damages_loc_`dollar_year'}
.         local us_wtp_no_ice_global_tot = `beh_response' * ${`bev_cf
> '_cf_damages_glob_`dollar_year'} 
.         local us_wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${U
> SShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureS
> CC}))
.         local us_wtp_no_ice = `us_wtp_no_ice_local' + `us_wtp_no_ic
> e_g'
. }

. else{
.         local wtp_no_ice_local = `beh_response' * ${`bev_cf'_cf_dam
> ages_loc_`dollar_year'}
.         local wtp_no_ice_global_tot = `beh_response' * ${`bev_cf'_c
> f_damages_glob_`dollar_year'}
.         local wtp_no_ice_g = `wtp_no_ice_global_tot' * ((1 - ${USSh
> areFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}
> ))
. 
.         local total_ice_damages_glob = `wtp_no_ice_global_tot' / `b
> eh_response' // for Latex
.         local total_ice_damages_glob_n = `total_ice_damages_glob' /
>  `net_msrp' // for Latex
.         local total_ice_damages_loc = `wtp_no_ice_local' / `beh_res
> ponse' // for Latex
.         local total_ice_damages_loc_n = `total_ice_damages_loc' / `
> net_msrp' // for Latex
.         local total_damages_loc_n = `total_bev_damages_loc_n' + `to
> tal_ice_damages_loc_n' // for Latex
. 
.         local q_carbon_no_ice = `beh_response' * ${`bev_cf'_cf_carb
> on_`dollar_year'}
.         local q_carbon_no_ice_mck = ${`bev_cf'_cf_carbon_`dollar_ye
> ar'}
. }

. 
. local no_ice_local_ext = `wtp_no_ice_local' / `beh_response'

. local no_ice_global_ext_tot = `wtp_no_ice_global_tot' / `beh_respon
> se'

. 
. local wtp_no_ice = `wtp_no_ice_local' + `wtp_no_ice_g'

. 
. if "`4'" == "baseline"{
.         local us_wtp_local = `us_wtp_yes_ev_local' + `us_wtp_no_ice
> _local'
.         local us_wtp_g = `us_wtp_yes_ev_g' + `us_wtp_no_ice_g'
. }

. 
. local no_ice_ext = `wtp_no_ice' / `beh_response'

. 
. *** Battery manufacturing emissions, 59.5 kg CO2eq/kWh for NMC111 b
> atteries ***
. 
. * Averaging the SCC for 2015-2018
. if "`4'" == "baseline"{
.         local relevant_scc = (${sc_CO2_2015} * `total_sales2015' + 
> ${sc_CO2_2016} * `total_sales2016' + ${sc_CO2_2017} * `total_sales2
> 017' + ${sc_CO2_2018} * `total_sales2018') ///
>                                                                    
>        / (`total_sales2015' + `total_sales2016' + `total_sales2017'
>  + `total_sales2018')
. }

. else{
.         local relevant_scc = ${sc_CO2_`dollar_year'}
. }

. 
. local batt_emissions = 59.5 * `batt_cap' // for Latex

. 
. local batt_damages = `batt_emissions' * 0.001 * `relevant_scc'

. local batt_damages_n = (`batt_emissions' * 0.001 * `relevant_scc') 
> / `net_msrp'

. 
. local batt_man_ext = `batt_emissions' * 0.001 * `beh_response' * `r
> elevant_scc' * ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (
> 1 - ${USShareGovtFutureSCC}))

. 
. local batt_man_ext_tot = `batt_emissions' * 0.001 * `beh_response' 
> * `relevant_scc'

. 
. local wtp_soc = `wtp_yes_ev' + `wtp_no_ice' - `batt_man_ext'

. 
. local us_wtp_g = `us_wtp_g' - `batt_man_ext' // nothing location sp
> ecific for battery emissiosn, so the externality is the same for th
> e in-context estimate and the US-wide 2011-14 estimate 

. local wtp_glob = `wtp_yes_ev_g' + `wtp_no_ice_g' - `batt_man_ext'

. local wtp_loc = `wtp_yes_ev_local' + `wtp_no_ice_local'

. 
. if "`4'" == "baseline"{
.         local us_wtp_soc = `us_wtp_yes_ev' + `us_wtp_no_ice'
. }

. 
. if `want_rebound' == 1{
.         ** rebound effect
.         local rbd_coeff = (1 / (1 - (`elec_dem_elas'/`elec_sup_elas
> ')))
.         local wtp_soc_rbd =  -(1 - `rbd_coeff') * `wtp_yes_ev'
.         local wtp_soc_rbd_l = -(1 - `rbd_coeff') * `wtp_yes_ev_loca
> l'
.         local wtp_soc_rbd_global_tot = -(1 - `rbd_coeff') * `wtp_ye
> s_ev_global_tot'
.         local wtp_soc_rbd_g = -(1 - `rbd_coeff') * `wtp_yes_ev_g'
.         
.         local q_carbon_rbd = -(1 - `rbd_coeff') * `q_carbon_yes_ev'
.         local q_carbon_rbd_mck = -(1 - `rbd_coeff') * `q_carbon_yes
> _ev_mck'
.         
.     * Adding the rebound effect to the utility producer WTP
.     local wtp_private = `wtp_private' - (1 - `rbd_coeff') * `wtp_pr
> od_u'
.         local wtp_prod_u = `rbd_coeff' * `wtp_prod_u' 
. 
.         * Adding the rebound effect to the utility fiscal externali
> ty
.         local total_cost = `total_cost' + (1 - `rbd_coeff') * `util
> ity_fisc_ext'
.         local utility_fisc_ext =  `utility_fisc_ext' - (1 - `rbd_co
> eff') * `utility_fisc_ext' // rebound makes the utility fe smaller
.     
. }

. 
. local local_enviro_ext = (`wtp_no_ice_local' + `wtp_yes_ev_local') 
> / `beh_response'

. local global_enviro_ext_tot = (`wtp_no_ice_global_tot' + `wtp_yes_e
> v_global_tot') / `beh_response'

. 
. 
. local enviro_ext = `wtp_soc' / `beh_response'

. local enviro_ext_l = `wtp_loc' / `beh_response'

. local enviro_ext_g = `wtp_glob' / `beh_response'

. 
. if "`4'" == "baseline"{
.         local us_enviro_ext = `us_wtp_soc' / `beh_response'
.         local us_enviro_ext_l = `us_wtp_local' / `beh_response'
.         local us_enviro_ext_g = `us_wtp_g' / `beh_response'
. }

. 
. local prod_cost = `prod_cost' * `batt_cap' // cost of a battery in 
> a car as opposed to cost per kWh

. 
. * learning-by-doing
. 
. *temporary solution -> if bootstrap gets a positive elasticity, har
> dcode epsilon
. if `epsilon' > 0{
.         local epsilon = -0.001
. }

. 
. 
. local dyn_enviro_global_tot = 0

. local env_cost_wtp_global_tot = 0

. local cost_wtp = 0

. local env_cost_wtp = 0

. local env_cost_wtp_l = 0

. local env_cost_wtp_g = 0

. local dyn_price = 0

. 
. if "${lbd}" == "yes"{
.         local lbd_cf = ("`bev_cf'" == "new_car")
.         ** --------------------- COST CURVE --------------------- *
> *
.         if "`4'" == "baseline"{
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> /// 
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_l
> ocal) ///
>                                                            start_ye
> ar(`dollar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${
> EV_VMT_car_adjustment})
.                 local dyn_enviro_local = `r(enviro_mvpf)' * (`envir
> o_ext_l' / `us_enviro_ext_l')
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_g
> lobal) ///
>                                                            start_ye
> ar(`dollar_year') scc(${scc_import_check}) new_car(`lbd_cf') vmt(${
> EV_VMT_car_adjustment})
.                 local dyn_enviro_global_tot = `r(enviro_mvpf)' * (`
> enviro_ext_g' / `us_enviro_ext_g')
.                 local dyn_enviro_global = `dyn_enviro_global_tot' *
>  ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareG
> ovtFutureSCC}))
.         }
.         else{
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_l
> ocal) ///
>                                                            scc(${sc
> c_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_car_adjustment}) ev
> _grid(${ev_grid})
.                 local dyn_enviro_local = `r(enviro_mvpf)'
. 
.                 cost_curve_masterfile, demand_elas(`epsilon') disco
> unt_rate(`discount') farmer(`farmer_theta') fcr(`fixed_cost_frac') 
> ///
>                                                            curr_pro
> d(`marg_sales') cum_prod(`cum_sales') price(`net_msrp') enviro(ev_g
> lobal) ///
>                                                            scc(${sc
> c_import_check}) new_car(`lbd_cf') vmt(${EV_VMT_car_adjustment}) ev
> _grid(${ev_grid})
.                 local dyn_enviro_global_tot = `r(enviro_mvpf)'
.                 local dyn_enviro_global = `dyn_enviro_global_tot' *
>  ((1 - ${USShareFutureSSC}) + ${USShareFutureSSC} * (1 - ${USShareG
> ovtFutureSCC}))
.         }
. 
.         if `marg_mvpf' == 1{
.                 local dyn_price = `r(cost_mvpf)'
.                 local cost_wtp = `r(cost_mvpf)' * `program_cost' * 
> 0.85 // pass-through
.                 local env_cost_wtp = (`dyn_enviro_local' + `dyn_env
> iro_global') * `program_cost' * 0.85 // pass-through
.                 local env_cost_wtp_l = `dyn_enviro_local' * `progra
> m_cost' * 0.85
.                 local env_cost_wtp_global_tot = `dyn_enviro_global_
> tot' * `program_cost' * 0.85
.                 local env_cost_wtp_g = `dyn_enviro_global' * `progr
> am_cost' * 0.85
.         }
.         else if `non_marg_mvpf' == 1{
.                 local cost_wtp = (`r(cost_mvpf)' * `program_cost') 
> / (1 + `beh_response')
.                 local env_cost_wtp = (`r(enviro_mvpf)' * `program_c
> ost') / (1 + `beh_response')
.         }
. }

. 
. local q_carbon = `q_carbon_no_ice' + `q_carbon_yes_ev' + `q_carbon_
> rbd'

. local q_carbon_no = `q_carbon'

. local q_carbon_cost_curve = `dyn_enviro_global_tot' / ${sc_CO2_`dol
> lar_year'}

. local q_carbon_cost_curve_mck = `q_carbon_cost_curve' / `beh_respon
> se'

. local q_carbon_mck = `q_carbon_no_ice_mck' + `q_carbon_yes_ev_mck' 
> + `q_carbon_rbd_mck'

. local q_carbon = `q_carbon' + `q_carbon_cost_curve'

. 
. 
. ********** Long-Run Fiscal Externality **********
. 
. local fisc_ext_lr = -1 * (`wtp_no_ice_global_tot' + `wtp_yes_ev_glo
> bal_tot' + `wtp_soc_rbd_global_tot' + `env_cost_wtp_global_tot' + `
> batt_man_ext_tot') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local total_cost = `total_cost' + `fisc_ext_lr' + `gas_corp_fisc_e'

. 
. ************************************************
. 
. if "${value_savings}" == "yes" & "`4'" == "current" {
.         
.         local wtp_savings = `beh_response' * (${`bev_cf'_cf_gas_sav
> ings_`dollar_year'} - ${yes_ev_savings_`dollar_year'}) 
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_soc' + `wtp_soc_rbd' + `wtp_saving
> s' // not including learning-by-doing

. local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'

. 
. // Quick Decomposition
. 
. /* Assumptions:
> 
>         - wtp_private, cost_wtp -> US Present
>         - wtp_soc, env_cost_wtp -> US Future & Rest of the World
> 
> */
. 
. local WTP_USPres = `wtp_private' + `wtp_yes_ev_local' + `wtp_no_ice
> _local' + `env_cost_wtp_l' + `wtp_soc_rbd_l'

. local WTP_USFut = (${USShareFutureSSC} * (1 - ${USShareGovtFutureSC
> C})) * (`wtp_yes_ev_global_tot' + `wtp_no_ice_global_tot' + `env_co
> st_wtp_global_tot' + `wtp_soc_rbd_global_tot') + 0.1 * `cost_wtp'

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`wtp_yes_ev_global_tot
> ' + `wtp_no_ice_global_tot' + `env_cost_wtp_global_tot' + `wtp_soc_
> rbd_global_tot') + 0.9 * `cost_wtp'

. 
. **************************
. /* 8. MVPF Calculations */
. **************************
. 
. local MVPF = `WTP_cc' / `total_cost'

. local MVPF_no_cc = `WTP' / `total_cost'

. 
. ****************************************
. /* 9. Cost-Effectiveness Calculations */
. ****************************************
. local avg_lcoe = ${energy_cost}

. local energy_cost = `avg_lcoe'

. 
. local lifetime_energy_cost = 0

. forvalues y = 1(1)`ub'{
  2.         local lifetime_energy_cost = `lifetime_energy_cost' + (`
> ev_miles_traveled`y'' * `kwh_per_mile' * `energy_cost') / ((1 + `di
> scount')^(`y' - 1))
  3. }

. 
. 
. 
. local purchase_price_diff = 8166 * (${cpi_2020} / ${cpi_2023}) // f
> rom vin diesel

. 
. local lifetime_gas_cost = ${clean_car_cf_gas_savings_2020} - ${clea
> n_car_wtp_prod_s_2020} - 0.08 * ${clean_car_cf_gas_savings_2020} - 
> ${clean_car_cf_gas_fisc_ext_2020}

. 
. local resource_cost = `purchase_price_diff' + `lifetime_energy_cost
> ' - `lifetime_gas_cost'

. di in red "resource cost is `resource_cost'"
resource cost is 6634.205877497263

. 
. local q_carbon_yes_ev_mck = -${yes_ev_carbon_content_2020} - (59.5 
> * `batt_cap' * 0.001) - ${yes_ev_rbd_CO2_2020} // need to remove th
> e rebound effect

. 
. local q_carbon_no_ice_mck = ${clean_car_cf_carbon_2020}

. 
. local q_carbon_mck = `q_carbon_yes_ev_mck' + `q_carbon_no_ice_mck'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `semie' * `q_carbon_mck' + (1 - `rbd_coeff') * `
> semie' * `q_carbon_mck'

. 
. *****************
. /* 10. Outputs */
. *****************
. 
. global MVPF_`1' = `MVPF'

. global MVPF_no_cc_`1' = `MVPF_no_cc'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global WTP_cc_`1' = `WTP_cc'

. global enviro_mvpf_`1' = `dyn_enviro_global_tot'

. global cost_mvpf_`1' = `dyn_price'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. global wtp_cons_`1' = `wtp_cons'

. global wtp_deal_`1' = `wtp_deal'

. global wtp_prod_s_`1' = -`wtp_prod_s'

. global wtp_prod_u_`1' = `wtp_prod_u'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global utility_fisc_ext_`1' = -`utility_fisc_ext'

. global gas_fisc_ext_`1' = `gas_fisc_ext'

. global beh_fisc_ext_`1' = `beh_fisc_ext'

. global state_fisc_ext_`1' = 0

. global fed_fisc_ext_`1' = `fed_fisc_ext'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global gas_corp_fisc_e_`1' = `gas_corp_fisc_e'

. global `1'_`4'_ep = round(`epsilon', 0.001)

. 
. global profits_fisc_e_`1' = `gas_corp_fisc_e' - `utility_fisc_ext'

. 
. global wtp_soc_`1' = `wtp_soc'

. global wtp_glob_`1' = `wtp_glob' 

. global wtp_loc_`1'= `wtp_loc'

. 
. global wtp_no_ice_`1' = `wtp_no_ice'

. global wtp_no_ice_local_`1' = `wtp_no_ice_local'

. global wtp_no_ice_g_`1' = `wtp_no_ice_g'

. 
. global wtp_yes_ev_`1' = `wtp_yes_ev'

. global wtp_yes_ev_local_`1' = `wtp_yes_ev_local'

. global wtp_yes_ev_g_`1' = `wtp_yes_ev_g'

.         
. global wtp_soc_rbd_`1' = `wtp_soc_rbd'

. global wtp_soc_rbd_l_`1' = `wtp_soc_rbd_l'

. global wtp_soc_rbd_g_`1' = `wtp_soc_rbd_g'

. 
. global env_cost_wtp_`1' = `env_cost_wtp'

. global env_cost_wtp_l_`1' = `env_cost_wtp_l'

. global env_cost_wtp_g_`1' = `env_cost_wtp_g'

. 
. global cost_wtp_`1' = `cost_wtp'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global c_savings_`1' = `wtp_savings'

. 
. global gov_carbon_`1' = `gov_carbon'

. global q_CO2_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. global semie_`1' = `semie'

. global pass_through_`1' = `pass_through'

. 
. global transfer_`1' = `wtp_cons' + `wtp_deal'

. global enviro_wtp_`1' = `wtp_glob' + `wtp_loc' + `wtp_soc_rbd'

. global cost_curve_`1' = `env_cost_wtp' + `cost_wtp'

. global profits_`1' = `wtp_prod_u' + -`wtp_prod_s'

. global subsidies_`1' = `beh_fisc_ext' + `fed_fisc_ext'

. global taxes_`1' = `gas_fisc_ext' + `gas_corp_fisc_e' - `utility_fi
> sc_ext'

. 
. global wtp_ev_g_w_r_`1' = ${wtp_yes_ev_g_`1'} + ${wtp_soc_rbd_g_`1'
> } // ((${yes_ev_damages_global_no_r_`dollar_year'} * (1 - (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})))) * `beh_response' * -1

. 
. global wtp_local_w_r_`1' = (${wtp_loc_`1'} + `wtp_soc_rbd_l') // ($
> {`bev_cf'_cf_damages_loc_`dollar_year'} - ${yes_ev_damages_local_`d
> ollar_year'}) * `beh_response'

. global wtp_batt_`1' = -`batt_man_ext'

. 
. global batt_damages_`1' = `batt_damages'

. global batt_damages_n_`1' = `batt_damages_n'

. 
. 
. ** for waterfall charts
. 
. if `simplified_wf' == 1{
.         global wtp_comps_`1' transfer enviro_wtp cost_curve profits
>  WTP_cc
.         global wtp_comps_`1'_commas "transfer", "enviro_wtp", "cost
> _curve", "profits", "WTP_cc"
. 
.         global cost_comps_`1' program_cost subsidies taxes fisc_ext
> _lr total_cost
.         global cost_comps_`1'_commas "program_cost", "subsidies", "
> taxes", "fisc_ext_lr", "total_cost"
. 
.         global `1'_xlab 1 `"Transfer"' 2 `"Environment"' 3 `"Learni
> ng-by-Doing"' 4 `"Profits"' 5 `"Total WTP"' 7 `""Program" "Cost""' 
> 8 `"Subsidies"' 9 `"Taxes"' 10 `""Climate" "FE""' 11 `""Govt" "Cost
> ""' ///
> 
.         *color groupings
.         global color_group1_`1' = 1
.         global color_group2_`1' = 2
.         global color_group3_`1' = 3
.         global color_group4_`1' = 4
.         global cost_color_start_`1' = 7
.         global color_group5_`1' = 10
. }

. 
. if `marg_mvpf' == 1 & `want_rebound' == 1 & `simplified_wf' == 0{
.         
.         global wtp_comps_`1' wtp_cons wtp_deal wtp_no_ice_g wtp_yes
> _ev_g wtp_soc_rbd_g wtp_batt wtp_local_w_r env_cost_wtp cost_wtp wt
> p_prod_s wtp_prod_u WTP_cc
.         
.         global wtp_comps_`1'_commas "wtp_cons", "wtp_deal", "wtp_no
> _ice_g", "wtp_yes_ev_g", "wtp_soc_rbd_g", "wtp_batt", "wtp_local_w_
> r", "env_cost_wtp", "cost_wtp"    
.         global wtp_comps_`1'_commas2 "wtp_prod_s", "wtp_prod_u", "W
> TP_cc"
.         
.         global cost_comps_`1' program_cost beh_fisc_ext fed_fisc_ex
> t gas_fisc_ext profits_fisc_e fisc_ext_lr total_cost
.         global cost_comps_`1'_commas "program_cost", "beh_fisc_ext"
> , "fed_fisc_ext", "gas_fisc_ext", "profits_fisc_e", "fisc_ext_lr", 
> "total_cost"
. 
. 
. 
.         global `1'_xlab 1 `"Consumers"' 2 `"Dealers"' 3 "Gasoline" 
> 4 "Grid" 5 "Rebound" 6 "Batteries" ///
>                                         7 `""Env" "Local""' 8 `""Dy
> namic" "Env.""' 9 `""Dynamic" "Price""' 10 `""Gasoline" "Producers"
> "' 11 `"Utilities"' ///
>                                         12 `""Total" "WTP""' 14 `""
> Program" "Cost""' 15 `""State" "Subsidy""' 16 `""Federal" "Subsidy"
> "' ///
>                                         17 `""Gas" "Tax""' 18 `""Pr
> ofits" "Tax""' 19 `""Climate" "FE""' 20 `""Govt" "Cost""' 
. 
.         *color groupings
.         global color_group1_`1' = 2
.         global color_group2_`1' = 7
.         global color_group3_`1' = 9
.         global color_group4_`1' = 11
.         global cost_color_start_`1' = 14
.         global color_group5_`1' = 19
.         
.         
. //      global wtp_comps_`1' wtp_cons wtp_deal wtp_glob wtp_loc wtp
> _soc_rbd env_cost_wtp cost_wtp wtp_prod_s wtp_prod_u WTP_cc
. //      global wtp_comps_`1'_commas "wtp_cons", "wtp_deal", "wtp_gl
> ob", "wtp_loc", "wtp_soc_rbd", "env_cost_wtp", "wtp_prod_s", "wtp_p
> rod_u"
. //      global wtp_comps_`1'_commas2 "cost_wtp", "WTP_cc"
. //
. //      global cost_comps_`1' program_cost beh_fisc_ext fed_fisc_ex
> t gas_fisc_ext profits_fisc_e fisc_ext_lr total_cost
. //      global cost_comps_`1'_commas "program_cost", "beh_fisc_ext"
> , "fed_fisc_ext", "gas_fisc_ext", "profits_fisc_e", "fisc_ext_lr", 
> "total_cost"
. //
. //      global `1'_xlab 1 `"Consumers"' 2 `"Dealers"' 3 `""Global" 
> "Env.""' 4 `""Local" "Env.""' 5 `"Rebound"' 6 `""Dynamic" "Env.""' 
> 7 `""Dynamic" "Price""' 8 `""Gasoline" "Producers""' 9 `"Utilities"
> ' 10 `"Total WTP"' 12 `""Program" "Cost""' 13 `""State" "Subsidy""'
>  14 `""Federal" "Subsidy""' 15 `""Gas" "Tax""' 16 `""Profits" "Tax"
> "' 17 `""Climate" "FE""' 18 `""Govt" "Cost""' ///
. //
. //      *color groupings
. //      global color_group1_`1' = 2
. //      global color_group2_`1' = 5
. //      global color_group3_`1' = 7
. //      global color_group4_`1' = 9
. //      global cost_color_start_`1' = 12
. //      global color_group5_`1' = 17
. }

. 
. 
. global `1'_name "California Enhanced Fleet Modernization Program"

. 
. 
. 
. // Stuff for the description
. if `marg_mvpf' == 1{
.         local mvpf_def "Marginal"
.         if `s_0' == 1{
.                 local s_def "s_0"
.         }
.         if `s_1' == 1{
.                 local s_def "s_1"
.         }
.         if `s_bar' == 1{
.                 local s_def "s_bar"
.         }
. }

. if `non_marg_mvpf' == 1{
.         local mvpf_def "Non-Marginal"
.         local s_def "N/A"
. }

. if `new_cost_curve' == 1{
.         local cc_def "Dynamic Battery Fraction"
. }

. if `old_cost_curve' == 1{
.         local cc_def "Fixed Battery Fraction"
. }

. 
. local y_ub = `WTP_cc' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. 
. if "${latex}" == "yes"{
.         if "`bev_cf'" == "clean_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs semie msrp net_msrp kwh_per_mile tota
> l_subsidy kwh_used_year_one total_bev_damages_glob ev_first_damages
> _g wtp_yes_ev_g wtp_no_ice_global_tot ///
>                                         wtp_no_ice_g wtp_glob wtp_l
> oc wtp_soc_rbd marg_sales cum_sales batt_frac fixed_cost_frac gas_c
> onsumed_year_one total_bev_damages_glob_n ///
>                                         total_ice_damages_glob_n to
> tal_ice_damages_loc total_ice_damages_loc_n batt_per_kwh_cost batt_
> cap env_cost_wtp cost_wtp ///
>                                         tot_gal gas_markup wtp_prod
> _s WTP_cc tot_kwh util_producer_surplus wtp_prod_u total_bev_damage
> s_loc_n total_damages_loc_n ///
>                                         avg_state_subsidy avg_fed_s
> ubsidy avg_state_subsidy_n avg_fed_subsidy_n fed_fisc_ext state_fis
> c_ext avg_subsidy beh_fisc_ext gas_fisc_ext tax_rate utility_fisc_e
> xt util_gov_revenue fisc_ext_lr ///
>                                         total_cost MVPF epsilon sem
> ie_paper EV_increase ep_avg_subsidy net_elas_msrp ev_cf_mpg avg_sub
> sidy_n batt_emissions batt_damages_n batt_man_ext
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'.sty
> ", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "msrp", "net_msrp", "marg_
> sales", "cum_sales", "batt_per_kwh_cost", "tot_kwh", "gas_consumed_
> year_one", "avg_subsidy", "net_elas_msrp") | inlist("`i'", "tot_gal
> ", "avg_state_subsidy") {
 10.                                 local `original' = trim("`: disp
> lay %8.0gc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "avg_fed_subsidy",
>  "total_subsidy", "ep_avg_subsidy") {
 13.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 14.                         }
 15.                         else if inlist("`i'", "semie"){
 16.                                 local `original' = trim("`: disp
> lay %5.4fc ``original'''")
 17.                         }
 18.                         else{
 19.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 20.                         }
 21.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 22.                         di "`command'"
 23.                         file write myfile "`command'" _n
 24.                         
.                 }
.                 file close myfile
. 
.         }
. 
.         if "`bev_cf'" == "new_car" & ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output with dirty counterfactual
.                 local outputs MVPF
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/BEVandHEVAppendices/macros_`1'_`4'_dir
> ty_cf.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'_
> dirty_cf}" _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         
.                         local `original' = trim("`: display %5.3fc 
> ``original'''")
 10.                         
.                         local command = "\newcommand{\\`newname'`1'
> `4'dirtycf}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
(1 real change made)
gas_fisc_ext
(1 real change made)
(1 real change made)
fed_fisc_ext
(1 real change made)
(1 real change made)
state_fisc_ext
(1 real change made)
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
(1 real change made)
wtp_yes_ev
(1 real change made)
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
(1 real change made)
wtp_no_ice_local
(1 real change made)
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
(1 real change made)
wtp_yes_ev_g
(1 real change made)
(1 real change made)
wtp_no_ice_g
(1 real change made)
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
(1 real change made)
enviro_wtp
(1 real change made)
(1 real change made)
cost_curve
(1 real change made)
(1 real change made)
profits
(1 real change made)
(1 real change made)
subsidies
(1 real change made)
(1 real change made)
taxes
(1 real change made)
(1 real change made)
wtp_batt
(1 real change made)
(1 real change made)
wtp_local_w_r
(1 real change made)
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005u.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005v.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005w.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/muehl_efmp_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/muehl_efmp_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/muehl_efmp_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/muehl_efmp_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for muehl_efmp under current
(4 vars, 5 obs)
spec_type    policy_year  run_year     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  run_year     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  run_year     description
1
Specification 1 of 1, program 68 of 100 (mx_deforest)
Number of observations (_N) was 0, now 0.
mx_deforest

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00005x.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000060.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000061.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/mx_deforest_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/mx_deforest_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/mx_deforest_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/mx_deforest_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for mx_deforest under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 69 of 100 (ne_solar)
Number of observations (_N) was 0, now 0.
ne_solar

. *******************************************************************
> ******************
. /*       0. Program: Northeast solar rebate              */
. *******************************************************************
> ******************
. 
. /*
> Crago, Christine Lasco, and Ilya Chernyakhovskiy. 
> "Are policy incentives for solar power effective? Evidence from res
> idential installations in the Northeast." 
> Journal of Environmental Economics and Management 81 (2017): 132-15
> 1.
> *https://www.sciencedirect.com/science/article/pii/S009506961630299
> 6?casa_token=9dmKVCBFHjIAAAAA:9p28uehNsbo1E5HZwqdOZw169o_9I2j0C0EPN
> KRdrl5vQUmGulaD1-o2qwmaOFvrNdDvz2YibQ
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: ne_solar no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"markup"' `"pass_through"' `"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .46           .        .46        .
> 46

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .156           .       .156       .1
> 56

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.472           .      -.472      -.4
> 72
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.                 if "${spec_type}" == "baseline"{
.                         local dollar_year = ${policy_year}
.                 }

.                 
.                 if "${spec_type}" == "current"{
.                         local dollar_year = ${current_year}
.                 }

.         restore

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local annual_output = ${output} / (`system_capacity
> ' * 1000)

.                 local federal_subsidy = 0.26

.                 local cost_per_watt_baseline = ${cost_per_watt} * (
> ${cpi_`dollar_year'} / ${cpi_2022})

.         restore

.         
.         if "${subsidy_loop}" == "yes" {
.                 local federal_subsidy = ${fed_sub_loop}
.         }

.         
.         *Getting weighted average of cost per watt from 2010-2012
.         *Installations: https://www.seia.org/solar-industry-researc
> h-data
.         *Cost per Watt: https://www.nrel.gov/solar/market-research-
> analysis/solar-installed-system-cost.html
.         
.         local cost_per_watt_context = (((8.70 * 667.40) + (7.66 * (
> 975.20-667.40)) + (5.40 * (1472.90 - 975.20))) / (1472.90)) * (${cp
> i_2008} / ${cpi_2022})

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************
. 
.         ** Cost assumptions
.         local pre_cost_per_watt = ${cost_per_watt} * (${cpi_`dollar
> _year'} / ${cpi_2022})

.         local cost_per_watt = `pre_cost_per_watt' * (1 - `federal_s
> ubsidy')

.         local avg_state_rebate = 0

.         local avg_fed_rebate = `pre_cost_per_watt' * `federal_subsi
> dy'

.         local pass_through = ${solar_passthrough}

. 
.         
.         if "${spec_type}" == "baseline" {
.                 local federal_subsidy = 0.3
.                 local system_capacity =  5 // kW, Average system ca
> pacity (pg 142)
.                 local annual_output =  1200/1000 // kWh/W
.                 
.                 local avg_state_rebate = 1.13 * (${cpi_${policy_yea
> r}}/${cpi_2008}) // Table 9 - assuming it is in 2008$ (in between t
> he sample years 2005-2012) 
. 
.                 local pre_cost_per_watt = (((8.70 * 667.40) + (7.66
>  * (975.20-667.40)) + (5.40 * (1472.90 - 975.20))) / (1472.90)) * (
> ${cpi_${policy_year}} / ${cpi_2022}) - `avg_state_rebate'
.                 
.                 local avg_fed_rebate = (`pre_cost_per_watt' + `avg_
> state_rebate')  * `federal_subsidy'
.                 local cost_per_watt = `pre_cost_per_watt' - (`avg_f
> ed_rebate')
.                 
.                 local pass_through = 1 - 0.156
.         }

.         
.         local cost_in_context = `cost_per_watt_context' * (1-0.3) -
>  (1.13)

. //      local cost_in_context = 4 * (1-0.3) - (1.13)
. 
.         
.         if "${spec_type}" == "baseline_gen" {
.                 local federal_subsidy = 0.3
.                 local system_capacity = ${system_capacity}
.                 local annual_output =  ${output} / (`system_capacit
> y' * 1000)
.                 local pre_cost_per_watt = 5.40 * (${cpi_`dollar_yea
> r'}/${cpi_2022}) // NREL 2012
.                 local avg_state_rebate = 0
. 
.                 local cost_per_watt = `pre_cost_per_watt' * (1-`fed
> eral_subsidy')
.                 local avg_fed_rebate = `pre_cost_per_watt' * `feder
> al_subsidy'
.         }

. 
.         local e_demand = (`semie' * `cost_in_context') * (1/(1 - 0.
> 156)) // scale the elasticity by 1 over the in-context pass through
>  rate

. 
.         local semie = `e_demand' / `cost_per_watt' // In-Context th
> e cost per watt and cost in context are the same

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. * learning by doing
. local cum_sales = (713918 * 1000)/`system_capacity' // 71391800 MW,
>  as of 2020; 176,113.39 MW, as of 2014

. local marg_sales = (128050.40 * 1000)/`system_capacity' // 128050.4
> 0 MW, in 2020; 39,541.25 MW, in 2014

. 
. if `dollar_year' == ${policy_year} {
.         local cum_sales = (101645.45 * 1000)/`system_capacity'
.         local marg_sales = (29440.00 * 1000)/`system_capacity' 
. }

. 
. solar, policy_year(${policy_year}) spec(${spec_type}) semie(`semie'
> ) replacement(`replacement') p_name("ne_solar") marg_sales(`marg_sa
> les') cum_sales(`cum_sales') annual_output(`annual_output') system_
> capacity(`system_capacity') pre_cost_per_watt(`pre_cost_per_watt') 
> avg_state_rebate(`avg_state_rebate') e_demand(`e_demand') pass_thro
> ugh(`pass_through') farmer_theta(`farmer_theta') federal_subsidy(`f
> ederal_subsidy')
(4 vars, 8 obs)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'
(12 vars, 162 obs)
Global Benefits: 1.219785368700804
Local Benefits: .1789229781439797
Global Rebound: .2639928019592912
Local Rebound: .0350449328839916
Dynamic Price: 0
Dynamic Enviro: 0
Producer Loss: .1518028649340894
WTP_cc: 13927.25439153199
1.3088106

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000062.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000063.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000064.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ne_solar_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ne_solar_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ne_solar_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ne_solar_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for ne_solar under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 70 of 100 (nicolini_eu)
Number of observations (_N) was 0, now 0.
nicolini_eu

. **************************************************
. /*       0. Program: Renewables Nicoloini              */
. **************************************************
. 
. /*
> Marcella Nicolini, Massimo Tavoni,
> "Are renewable energy subsidies effective? Evidence from Europe"
> Renewable and Sustainable Energy Reviews 74 (2017): 412-423
> https://www.sciencedirect.com/science/article/pii/S1364032116310905
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -.1705908           .  -.1705908  -.17059
> 08

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.                 local dollar_year = ${policy_year}
.         }

. if "`4'" == "current"{
.                 local dollar_year = ${current_year}
.         }

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.                 preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.                 
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. *Getting the elasticity
. local epsilon = `e_demand'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. *For Semie
. local capital_discount = 0.0397 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0673 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("nicolini_eu") marg_sales(`marg_sales') cum_sales(`
> cum_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta(
> `farmer_theta') subsidy_max(`subsidy_max') current_ptc(`current_ptc
> ')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Nicolini (EU)"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000065.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000066.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000067.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nicolini_eu_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nicolini_eu_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nicolini_eu_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nicolini_eu_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for nicolini_eu under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 71 of 100 (nudge_ger)
Number of observations (_N) was 0, now 0.
nudge_ger

. *******************************************************************
> ******************
. /*       0. Program: Electricity Nudge - Germany         */
. *******************************************************************
> ******************
. 
. /*
> Social Norms and Energy Conservation Beyond the US
> Mark A. Andor, Andreas Gerster, Jörg Peters, Christoph M. Schmidt
> 
> https://www.sciencedirect.com/science/article/abs/pii/S009506962030
> 0747
> 
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"kwh_change"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      .00719           .     .00719     .007
> 19
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         *Emissions numbers from: Table 1
.         
.         local tons_per_gram = .0000011023

.         
.         *Do not have reliable non-CO2 numbers for Germany grid, so 
> I am using CO2eq instead
.         local SO2_per_kwh = 0

.         local NOx_per_kwh = 0

.         
.         local CO2_per_kwh = ${sc_CO2_`dollar_year'} * (${cpi_`dolla
> r_year'}/${cpi_2020}) * 486 * `tons_per_gram'

.                                 
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
.         local baseline_kwh = 3304 // Using German average from tabl
> e 1 instead of sample average

.         local annual_kwh_change = `baseline_kwh' * `kwh_change'

.         
.         local nudge_number = 4 // They send out 4 nudges

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_inf = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Using CO2eq

. 
. local global_pollutants = `annual_kwh_change' * `CO2_per_kwh' * `r'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = ((`kwh_change' * `CO2_per_kwh')/(1/`tons_per_gram'
> )) * `r'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = 1 * `nudge_number' * (${cpi_`dollar_year'}/${c
> pi_2009}) // Alcott estimates that the cost of mailing and printing
>  1 HER is approximately $1 in 2009

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Electricity Nudge - Germany"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
.32488052

. di `total_cost'
4.7950798

. di `WTP'
1.557828

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
1.9751074

. di `rebound_global'
.38685645

. di `rebound_local'
0

. di `wtp_society'
1.588251

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
1.557828

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.04333915

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000068.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000069.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006a.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_ger_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_ger_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_ger_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_ger_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for nudge_ger under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 72 of 100 (nudge_qatar)
Number of observations (_N) was 0, now 0.
nudge_qatar

. *******************************************************************
> ******************
. /*       0. Program: Electricity Nudge - Qatar         */
. *******************************************************************
> ******************
. 
. /*
> THE POWER TO CONSERVE: A FIELD EXPERIMENT ON ELECTRICITY USE IN QAT
> AR
> Omar Al-Ubaydli, Alecia W. Cassidy, Anomitro Chatterjee, Ahmed Khal
> ifa, Michael K. Price
> 
> http://www.nber.org/papers/w31931
> 
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"kwh_change"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .038           .       .038       .0
> 38
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         *Emissions numbers from: https://www.statista.com/statistic
> s/1302666/qatar-emissions-intensity-from-electricity-generation/#:~
> :text=Emissions%20intensity%20from%20electricity%20generation%20in%
> 20Qatar%202011%2D2020&text=In%202020%2C%20the%20emissions%20intensi
> ty,compared%20to%20the%20previous%20year.
.         
.         local tons_per_gram = .0000011023

.         
.         *Do not have reliable non-CO2 numbers for Qatar grid, so I 
> am using CO2eq instead
.         local SO2_per_kwh = 0

.         local NOx_per_kwh = 0

.         
.         local CO2_per_kwh = ${sc_CO2_`dollar_year'} * (${cpi_`dolla
> r_year'}/${cpi_2020}) * 489.97 * `tons_per_gram'

.                                 
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
.         local baseline_kwh = 2780.67 * 12

.         local annual_kwh_change = `baseline_kwh' * `kwh_change'

.         
.         local nudge_number = 12 // They send out 12 nudges

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_inf = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Using CO2eq

. 
. local global_pollutants = `annual_kwh_change' * `CO2_per_kwh' * `r'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = ((`kwh_change' * `CO2_per_kwh')/(1/`tons_per_gram'
> )) * `r'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = 1 * `nudge_number' * (${cpi_`dollar_year'}/${c
> pi_2009}) // Alcott estimates that the cost of mailing and printing
>  1 HER is approximately $1 in 2009

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Electricity Nudge - Qatar"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
6.5291056

. di `total_cost'
12.839391

. di `WTP'
83.829737

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
106.28435

. di `rebound_global'
20.817493

. di `rebound_local'
0

. di `wtp_society'
85.466855

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
83.829737

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.87098452

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006b.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006c.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006d.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_qatar_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_qatar_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_qatar_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/nudge_qatar_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for nudge_qatar under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 73 of 100 (opower_e)
Number of observations (_N) was 0, now 0.
opower_e

. *******************************************************************
> ******************
. /*       0. Program:  Aggregated OPower Program Evaluations (Electr
> icity) */
. *******************************************************************
> ******************
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"filler_ignore"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1           0           .          0         
>  0
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. preserve

. 
.         import excel "${output_fig}/figures_data/Nudge Estimates", 
> first clear sheet("Compiled")
(21 vars, 344 obs)

. 
.         *Clean Data
.         keep Utility State State_name Census_Region Type Utilitytyp
> e Baseline Nudges_per_year ATE YearStart Treatedyears Valid Treated
>  Control SE 

.         keep if Valid == 1
(126 observations deleted)

.         destring Nudges_per_year ATE YearStart Treatedyears Treated
>  Control, replace
Nudges_per_year: all characters numeric; replaced as byte
ATE: all characters numeric; replaced as double
YearStart: all characters numeric; replaced as int
Treatedyears: all characters numeric; replaced as double
Treated: all characters numeric; replaced as long
(17 missing values generated)
Control: all characters numeric; replaced as long
(22 missing values generated)

.         replace Utilitytype = upper(Utilitytype)
(218 real changes made)

.         replace Utilitytype = "NATURAL GAS" if Utilitytype == "GAS"
(38 real changes made)

. 
.         *Replace missing treatment and control group values with gr
> oup means
.         foreach val in "MW" "NE" "W" "S"{
  2.                 qui sum Treated if Census_Region == "`val'"
  3.                 local treat_mean = `r(mean)'
  4.                 
.                 qui sum Control if Census_Region == "`val'"
  5.                 local control_mean = `r(mean)'
  6.                 
.                 replace Treated = `treat_mean' if Treated == . & Ce
> nsus_Region == "`val'"
  7.                 replace Control = `control_mean' if Control == .
>  & Census_Region == "`val'"
  8.         }
variable Treated was long now double
(17 real changes made)
variable Control was long now double
(17 real changes made)
(0 real changes made)
(5 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

.         rename YearStart policy_year

.         save "${output_fig}/figures_data/Nudge_inter_v1.dta", repla
> ce
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/5_graphs/figures_data/Nudge_inter_v1.dta saved

. restore

. 
. *Get State weights by census region
. preserve

.         import excel "${policy_assumptions}", first clear sheet("cr
> osswalk_state_region")
(5 vars, 50 obs)

.         gen state_weight = .
(50 missing values generated)

.         gen region_weight = .
(50 missing values generated)

. 
.         qui sum Population

.         local US_pop = `r(sum)'

.         foreach val in "MW" "NE" "W" "S"{
  2.                 qui sum Population if Census_Region == "`val'"
  3.                 local region_sum = `r(sum)'
  4.                         
.                 replace state_weight = Population / `region_sum' if
>  Census_Region == "`val'"
  5.                 replace region_weight = `region_sum' / `US_pop' 
> if Census_Region == "`val'"
  6.         }
(12 real changes made)
(12 real changes made)
(9 real changes made)
(9 real changes made)
(11 real changes made)
(11 real changes made)
(17 real changes made)
(17 real changes made)

.         replace state_weight = 1 if State == "US"
(1 real change made)

.         drop Population Region

. 
.         merge 1:m State using "${output_fig}/figures_data/Nudge_int
> er_v1.dta"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            39
        from master                        39  (_merge==1)
        from using                          0  (_merge==2)

    Matched                               218  (_merge==3)
    -----------------------------------------

.         keep if _merge == 3
(39 observations deleted)

.         drop _merge

. 
.         collapse (mean) Baseline ATE Nudges_per_year region_weight 
> policy_year [aw=Treated], by(Census_Region Utilitytype)

. 
.         collapse (mean) Baseline ATE Nudges_per_year policy_year [a
> w=region_weight], by(Utilitytype)

. 
.         gen reduced = Baseline * (ATE / 100) 

.         qui sum reduced if Utilitytype == "ELECTRICITY"

.         local kwh_reduced_annual = `r(mean)'

. 
.         qui sum Nudges_per_year if Utilitytype == "ELECTRICITY"

.         local nudge_number = `r(mean)'

. restore

. 
. local program_cost = 1 * `nudge_number' * (${cpi_`dollar_year'} / $
> {cpi_2009}) // Alcott estimates that the cost of mailing and printi
> ng 1 HER is approximately $1 in 2009

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = 0

. local marginal = 0

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings = `kwh_reduced_annual' * ${kwh_price_`dolla
> r_year'_${State}}
. }

. 
. *Producers
. local corporate_loss = `kwh_reduced_annual' * ${producer_surplus_`d
> ollar_year'_${State}} * `r'

. local util_producer_surplus = ${producer_surplus_`dollar_year'_${St
> ate}} // for Latex

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. local wtp_prod_n = -`corporate_loss' / `program_cost' // for Latex

. 
. * Social Costs
. dynamic_grid `kwh_reduced_annual', starting_year(`dollar_year') lif
> etime(1) discount_rate(`discount') ef("`replacement'") type("unifor
> m") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants = `r(local_enviro_ext)'

. local local_pollutants_n = `local_pollutants' / `program_cost' // f
> or Latex

. 
. local global_pollutants = `r(global_enviro_ext)'

. local wtp_glob = `global_pollutants' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_glob_n = `wtp_glob' / `program_cost' // for Latex

. local carbon = `r(carbon_content)'

. 
. local q_carbon = `carbon' * `r'

. 
. local rebound_local = `local_pollutants' * (1 - `r')

. local rebound_local_n = `rebound_local' / `program_cost'

. 
. local rebound_global = `global_pollutants' * (1 - `r')

. local wtp_r_glob = -`rebound_global' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_r_glob_n = `wtp_r_glob' / `program_cost'

. 
. local wtp_soc_rbd_n = (-`rebound_local' + `wtp_r_glob') / `program_
> cost'

. 
. * Social benefits from reduced carbon
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. local wtp_society_n = `wtp_society' / `program_cost'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. local WTP_n = `WTP' / `program_cost' // for Latex

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. local fisc_ext_t = `kwh_reduced_annual' * ${government_revenue_`dol
> lar_year'_${State}} * `r'

. local tax_rate = ${government_revenue_`dollar_year'_${State}} // fo
> r Latex

. local utility_fisc_ext = `fisc_ext_t' / `program_cost' // for Latex

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local fisc_ext_lr_n = `fisc_ext_lr' / `program_cost' // for Latex

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr' 

. local total_cost_n = `total_cost' / `program_cost' // for Latex

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${energy_cost}

. 
. local energy_savings = `kwh_reduced_annual' * `energy_cost'

. 
. local her_cost = `program_cost'

. 
. local resource_cost = `her_cost' - `energy_savings'

. local her_price = `program_cost'

. local kwh_reduc = `kwh_reduced_annual'

. 
. local q_carbon_mck = `carbon'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `r'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_consumers'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = `wtp_r_glob'

. global wtp_soc_rbd_`1' = -`rebound_local' + `wtp_r_glob'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_soc_rbd wtp_prod
>  WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "cost"

. global `1'_name "OPower HERs - Electricity"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `"Rebound"' 5 `"Producers"' 6 `"Total WTP"' 8 `""Prog
> ram" "Cost""' 9 `"Subsidies"' 10 `"Taxes"' 11 `""Climate" "FE""' 12
>  `""Govt" "Cost""' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 5

. global color_group4_`1' = 5

. global cost_color_start_`1' = 8

. global color_group5_`1' = 11

. 
. // global note_`1' = `"Publication: " "SCC: `scc'" "Description: Co
> st curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - 
> `s_def', Grid - `grid_def', Replacement - `replacement_def'," "Grid
>  Model - `grid_model_def', Electricity supply elasticity - `elec_su
> p_elas'"'
. global normalize_`1' = 1

. 
. di `MVPF'
2.5476944

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs kwh_reduced_annual wtp_glob local_pol
> lutants wtp_r_glob rebound_local wtp_society local_pollutants_n wtp
> _glob_n rebound_local_n wtp_r_glob_n wtp_soc_rbd_n wtp_society_n wt
> p_prod_n ///
>                           util_producer_surplus WTP_n tax_rate util
> ity_fisc_ext fisc_ext_lr_n MVPF total_cost_n program_cost
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         local `original' = trim("`: display %5.2fc 
> ``original'''")
 10.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006e.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006f.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006g.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_e_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_e_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_e_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_e_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for opower_e under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 74 of 100 (opower_ng)
Number of observations (_N) was 0, now 0.
opower_ng

. *******************************************************************
> ******************
. /*       0. Program:  Aggregated OPower Program Evaluations (Natura
> l Gas) */
. *******************************************************************
> ******************
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"filler_ignore"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1           0           .          0         
>  0
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. preserve

. 
.         import excel "${output_fig}/figures_data/Nudge Estimates", 
> first clear sheet("Compiled")
(21 vars, 344 obs)

. 
.         *Clean Data
.         keep Utility State State_name Census_Region Type Utilitytyp
> e Baseline Nudges_per_year ATE YearStart Treatedyears Valid Treated
>  Control SE 

.         keep if Valid == 1
(126 observations deleted)

.         destring Nudges_per_year ATE YearStart Treatedyears Treated
>  Control, replace
Nudges_per_year: all characters numeric; replaced as byte
ATE: all characters numeric; replaced as double
YearStart: all characters numeric; replaced as int
Treatedyears: all characters numeric; replaced as double
Treated: all characters numeric; replaced as long
(17 missing values generated)
Control: all characters numeric; replaced as long
(22 missing values generated)

.         replace Utilitytype = upper(Utilitytype)
(218 real changes made)

.         replace Utilitytype = "NATURAL GAS" if Utilitytype == "GAS"
(38 real changes made)

. 
.         *Replace missing treatment and control group values with gr
> oup means
.         foreach val in "MW" "NE" "W" "S"{
  2.                 qui sum Treated if Census_Region == "`val'"
  3.                 local treat_mean = `r(mean)'
  4.                 
.                 qui sum Control if Census_Region == "`val'"
  5.                 local control_mean = `r(mean)'
  6.                 
.                 replace Treated = `treat_mean' if Treated == . & Ce
> nsus_Region == "`val'"
  7.                 replace Control = `control_mean' if Control == .
>  & Census_Region == "`val'"
  8.         }
variable Treated was long now double
(17 real changes made)
variable Control was long now double
(17 real changes made)
(0 real changes made)
(5 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

.         rename YearStart policy_year

.         save "${output_fig}/figures_data/Nudge_inter_v1.dta", repla
> ce
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/5_graphs/figures_data/Nudge_inter_v1.dta saved

. restore

. 
. *Get State weights by census region
. preserve

.         import excel "${policy_assumptions}", first clear sheet("cr
> osswalk_state_region")
(5 vars, 50 obs)

.         gen state_weight = .
(50 missing values generated)

.         gen region_weight = .
(50 missing values generated)

. 
.         qui sum Population

.         local US_pop = `r(sum)'

.         foreach val in "MW" "NE" "W" "S"{
  2.                 qui sum Population if Census_Region == "`val'"
  3.                 local region_sum = `r(sum)'
  4.                         
.                 replace state_weight = Population / `region_sum' if
>  Census_Region == "`val'"
  5.                 replace region_weight = `region_sum' / `US_pop' 
> if Census_Region == "`val'"
  6.         }
(12 real changes made)
(12 real changes made)
(9 real changes made)
(9 real changes made)
(11 real changes made)
(11 real changes made)
(17 real changes made)
(17 real changes made)

.         replace state_weight = 1 if State == "US"
(1 real change made)

.         drop Population Region

. 
.         merge 1:m State using "${output_fig}/figures_data/Nudge_int
> er_v1.dta"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            39
        from master                        39  (_merge==1)
        from using                          0  (_merge==2)

    Matched                               218  (_merge==3)
    -----------------------------------------

.         keep if _merge == 3
(39 observations deleted)

.         drop _merge

. 
.         replace Baseline = Baseline * 0.1 // Therms to MMBTU
(218 real changes made)

.         collapse (mean) Baseline ATE Nudges_per_year region_weight 
> policy_year [aw=Treated], by(Census_Region Utilitytype)

. 
.         collapse (mean) Baseline ATE Nudges_per_year policy_year [a
> w=region_weight], by(Utilitytype)

. 
.         gen reduced = Baseline * (ATE / 100) 

.         qui sum reduced if Utilitytype == "NATURAL GAS"

.         local mmbtu_reduction_annual = `r(mean)'

. 
.         qui sum Nudges_per_year if Utilitytype == "NATURAL GAS"

.         local nudge_number = `r(mean)'

. restore

. 
. local program_cost = 1 * `nudge_number' * (${cpi_`dollar_year'} / $
> {cpi_2009}) // Alcott estimates that the cost of mailing and printi
> ng 1 HER is approximately $1 in 2009

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r_ng = `r(r_ng)'

.         
. *************************
. /* 5. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = 0

. local marginal = 0

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local c_savings = `mmbtu_reduction_annual' * ${ng_price_`do
> llar_year'_${State}}
. }

. 
. *Producers
. local corporate_loss = `mmbtu_reduction_annual' * ${psurplus_mmbtu_
> `dollar_year'_${State}} * `r_ng'

. local util_producer_surplus = ${psurplus_mmbtu_`dollar_year'_${Stat
> e}} // for Latex

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. local wtp_prod_n = -`corporate_loss' / `program_cost' // for Latex

. 
. * Social Costs
. local local_pollutants = 0

. local local_pollutants_n = `local_pollutants' / `program_cost' // f
> or Latex

. 
. local global_pollutants = ${global_mmbtu_`dollar_year'} * `mmbtu_re
> duction_annual'

. local wtp_glob = `global_pollutants' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_glob_n = `wtp_glob' / `program_cost' // for Latex

. local rebound_local = 0

. local rebound_local_n = `rebound_local' / `program_cost'

. 
. local rebound_global = `global_pollutants' * (1 - `r_ng')

. local wtp_r_glob = -`rebound_global' * (1 - (${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))

. local wtp_r_glob_n = `wtp_r_glob' / `program_cost'

. 
. local wtp_soc_rbd_n = (-`rebound_local' + `wtp_r_glob') / `program_
> cost'

. 
. local carbon_only_benefit = ${carbon_mmbtu_`dollar_year'} * `mmbtu_
> reduction_annual' * `r_ng'

. 
. local q_carbon = (`global_pollutants' * `r_ng') / ${sc_CO2_`dollar_
> year'} 

. 
. * Social benefits from reduced carbon
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. local wtp_soc = `wtp_glob' + `local_pollutants' - `wtp_r_glob' - `r
> ebound_local'

. local wtp_soc_n = `wtp_soc' / `program_cost'

. 
. * Total WTP
. local WTP = `wtp_consumers' + `wtp_society' - `corporate_loss' + `c
> _savings' - ((`global_pollutants' - `rebound_global') * ${USShareFu
> tureSSC} * ${USShareGovtFutureSCC})

. local WTP_n = `WTP' / `program_cost' // for Latex

. 
. // Quick decomposition
. local WTP_USPres = `wtp_consumers' + `local_pollutants' - `corporat
> e_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. 
. local fisc_ext_t = `mmbtu_reduction_annual' * ${govrev_mmbtu_`dolla
> r_year'_${State}} * `r_ng'

. local tax_rate = ${govrev_mmbtu_`dollar_year'_${State}} // for Late
> x

. local utility_fisc_ext = `fisc_ext_t' / `program_cost' // for Latex

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC} 

. local fisc_ext_lr_n = `fisc_ext_lr' / `program_cost' // for Latex

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. local total_cost_n = `total_cost' / `program_cost' // for Latex

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. 
. local energy_savings = `mmbtu_reduction_annual' * `ng_cost'

. 
. local her_cost = `program_cost'

. 
. local resource_cost = `her_cost' - `energy_savings'

. local her_price = `program_cost'

. 
. local q_carbon_mck = `global_pollutants' / ${sc_CO2_`dollar_year'} 
> // No rebound here.

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' // XX REBOUND SHOULD BE ADDED I T
> HINK

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_consumers'

. global c_savings_`1' = `c_savings'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = `wtp_r_glob'

. global wtp_soc_rbd_`1' = -`rebound_local' + `wtp_r_glob'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_soc_rbd wtp_prod
>  WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "cost"

. global `1'_name "OPower HERs - Natural Gas"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `"Rebound"' 5 `"Producers"' 6 `"Total WTP"' 8 `""Prog
> ram" "Cost""' 9 `"Subsidies"' 10 `"Taxes"' 11 `""Climate" "FE""' 12
>  `""Govt" "Cost""' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 5

. global color_group4_`1' = 5

. global cost_color_start_`1' = 8

. global color_group5_`1' = 11

. 
. // global note_`1' = `"Publication: " "SCC: `scc'" "Description: Co
> st curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - 
> `s_def', Grid - `grid_def', Replacement - `replacement_def'," "Grid
>  Model - `grid_model_def', Electricity supply elasticity - `elec_su
> p_elas'"'
. global normalize_`1' = 1

. 
. di `MVPF'
.45097851

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs mmbtu_reduction_annual wtp_glob local
> _pollutants wtp_r_glob rebound_local wtp_society local_pollutants_n
>  wtp_glob_n rebound_local_n wtp_r_glob_n wtp_soc_rbd_n wtp_society_
> n wtp_prod_n ///
>                           util_producer_surplus WTP_n tax_rate util
> ity_fisc_ext fisc_ext_lr_n MVPF total_cost_n program_cost
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         local `original' = trim("`: display %5.2fc 
> ``original'''")
 10.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 11.                         di "`command'"
 12.                         file write myfile "`command'" _n
 13.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006h.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006i.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006j.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_ng_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_ng_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_ng_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/opower_ng_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for opower_ng under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 75 of 100 (park_gas)
Number of observations (_N) was 0, now 0.
park_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Park, Sung Y., and Guochang Zhao. 
> "An estimation of US gasoline demand: A smooth time-varying cointeg
> ration approach." 
> Energy Economics 32, no. 1 (2010): 110-120. */
. *https://www.sciencedirect.com/science/article/pii/S014098830900185
> 6
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: park_gas no uncorrected
> _vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      -.1605           .     -.1605     -.16
> 05

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_lbd_`1' = `r(lbd_wtp)'

. global cost_lbd_`1' = `r(lbd_cost)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
. global `1'_ep = "N"

. global `1'_name "Gasoline Tax (Price Elasticity from Park and Zhao 
> 2010)"

. 
. if "${gas_tax_cc_toggle}" == "yes" {
.         
.         local cc_note_gas_taxes = "Cost curve enabled."
.         
. }

. else {
.         
.         local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Park and Zhao 2010" "Global Assump
> tions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline Pric
> e of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_note_
> gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006k.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006l.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006m.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/park_gas_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/park_gas_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/park_gas_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/park_gas_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for park_gas under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 76 of 100 (pless_ho)
Number of observations (_N) was 0, now 0.
pless_ho

. *******************************************************************
> ******************
. /*       0. Program: California Solar Initiative (CSI) solar subsid
> ies              */
. *******************************************************************
> ******************
. 
. /*
> Pless, Jacquelyn, and Arthur A. van Benthem. 
> "Pass-Through as a Test for Market Power: An Application to Solar S
> ubsidies" 
> American Economic Journal: Applied Economics 11, no. 4 (2019): 367-
> 401.
> *https://www.aeaweb.org/articles?id=10.1257/app.20170611
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: pless_ho no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"markup"' `"pass_through"' `"price"' `"price_square
> d"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .46           .        .46        .
> 46

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .778           .       .778       .7
> 78

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.534           .      -.534      -.5
> 34

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .053           .       .053       .0
> 53
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.                 if "${spec_type}" == "baseline"{
.                         local dollar_year = ${policy_year}
.                 }

.                 
.                 if "${spec_type}" == "current"{
.                         local dollar_year = ${current_year}
.                 }

.         restore

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local annual_output = ${output} / (`system_capacity
> ' * 1000)

.                 local federal_subsidy = 0.26

.                 local cost_per_watt_baseline = ${cost_per_watt} * (
> ${cpi_`dollar_year'} / ${cpi_2022})

.         restore

.         
.         if "${subsidy_change}" == "yes" {
.                 local federal_subsidy = 0.3
.         }

.         
.         if "${subsidy_loop}" == "yes" {
.                 local federal_subsidy = ${fed_sub_loop}
.         }

. 
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************    
.         ** Cost assumptions
.         local pre_cost_per_watt = ${cost_per_watt} * (${cpi_`dollar
> _year'} / ${cpi_2022})

.         local cost_per_watt = `pre_cost_per_watt' * (1 - `federal_s
> ubsidy')

.         local avg_state_rebate = 0

.         local avg_fed_rebate = `pre_cost_per_watt' * `federal_subsi
> dy'

.         local pass_through = ${solar_passthrough}

.         
.         if "${spec_type}" == "baseline" {
.                 local system_capacity = 5.065 // W (Table B.1)
.                 local annual_output = 8233 / (`system_capacity' * 1
> 000) // Inputting California values & baseline size from https://pv
> watts.nrel.gov/pvwatts.php
.                 local federal_subsidy = 0.3
.                 
.                 local pre_cost_per_watt = 3.89 * (${cpi_${policy_ye
> ar}}/${cpi_2012}) // $/W (Table B.1) - Assuming they are using a do
> llar year from the middle of their sample. Already net of state reb
> ate
.                 
.                 local avg_state_rebate = 0.42 * (${cpi_${policy_yea
> r}}/${cpi_2012}) // $/W, Table B.1 - Assuming they are using a doll
> ar year from the middle of their sample
.                 
.                 local avg_fed_rebate = (`avg_state_rebate' + `pre_c
> ost_per_watt') * `federal_subsidy'
.                 
.                 local cost_per_watt = `pre_cost_per_watt' - `avg_fe
> d_rebate'
.                 local pass_through = 0.778
.         }

.         
.         if "${spec_type}" == "baseline_gen" {
.                 local federal_subsidy = 0.3
.                 local pre_cost_per_watt = 4.73 * (${cpi_${policy_ye
> ar}}/${cpi_2012}) // NREL 2013 Costs
.                 local cost_per_watt = `pre_cost_per_watt' * (1-`fed
> eral_subsidy')
.                 local avg_fed_rebate = `pre_cost_per_watt' * `feder
> al_subsidy'
.         }

.         
.         local e_demand = ((`price' + (2 * 3.7 * `price_squared')) *
>  3.7) / 0.461

.         local semie = `e_demand'/`cost_per_watt'

.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. * learning by doing
. local cum_sales = (713918 * 1000)/`system_capacity' // 71391800 MW,
>  as of 2020; 176,113.39 MW, as of 2014

. local marg_sales = (128050.40 * 1000)/`system_capacity' // 128050.4
> 0 MW, in 2020; 39,541.25 MW, in 2014

. 
. if `dollar_year' == ${policy_year} {
.         local cum_sales = (136572.14 * 1000)/`system_capacity'
.         local marg_sales = (34926.70 * 1000)/`system_capacity'  
. }

. 
. solar, policy_year(${policy_year}) spec(${spec_type}) semie(`semie'
> ) replacement(`replacement') p_name("pless_ho") marg_sales(`marg_sa
> les') cum_sales(`cum_sales') annual_output(`annual_output') system_
> capacity(`system_capacity') pre_cost_per_watt(`pre_cost_per_watt') 
> avg_state_rebate(`avg_state_rebate') e_demand(`e_demand') pass_thro
> ugh(`pass_through') farmer_theta(`farmer_theta') federal_subsidy(`f
> ederal_subsidy')
(4 vars, 8 obs)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'
(12 vars, 162 obs)
Global Benefits: .9318962499100023
Local Benefits: .1366942550989086
Global Rebound: .201686221577758
Local Rebound: .0267737606721123
Dynamic Price: 0
Dynamic Enviro: 0
Producer Loss: .1159749282026122
WTP_cc: 12327.71250107847
1.2557279

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006n.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006o.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006p.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_ho_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_ho_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_ho_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_ho_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for pless_ho under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 77 of 100 (pless_tpo)
Number of observations (_N) was 0, now 0.
pless_tpo

. *******************************************************************
> ******************
. /*       0. Program: California Solar Initiative (CSI) solar subsid
> ies              */
. *******************************************************************
> ******************
. 
. /*
> Pless, Jacquelyn, and Arthur A. van Benthem. 
> "Pass-Through as a Test for Market Power: An Application to Solar S
> ubsidies" 
> American Economic Journal: Applied Economics 11, no. 4 (2019): 367-
> 401.
> *https://www.aeaweb.org/articles?id=10.1257/app.20170611
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: pless_tpo no uncorrecte
> d_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"markup"' `"pass_through1"' `"pass_through2"' `"pri
> ce"' `"price_squared"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .46           .        .46        .
> 46

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .778           .       .778       .7
> 78

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .75           .        .75        .
> 75

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      -1.929           .     -1.929     -1.9
> 29

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .241           .       .241       .2
> 41
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.                 if "${spec_type}" == "baseline"{
.                         local dollar_year = ${policy_year}
.                 }

.                 
.                 if "${spec_type}" == "current"{
.                         local dollar_year = ${current_year}
.                 }

.         restore

. 
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local system_capacity = ${system_capacity}

.                 local annual_output = ${output} / (`system_capacity
> ' * 1000)

.                 local lifetime = ${lifetime}

.                 local federal_subsidy = 0.26

.                 local cost_per_watt_baseline = ${cost_per_watt} * (
> ${cpi_`dollar_year'} / ${cpi_2022})

.         restore

. 
.         if "${subsidy_loop}" == "yes" {
.                 local federal_subsidy = ${fed_sub_loop}
.         }

.         
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************    
.         ** Cost assumptions
.         local pre_cost_per_watt = ${cost_per_watt} * (${cpi_`dollar
> _year'} / ${cpi_2022})

.         local cost_per_watt = `pre_cost_per_watt' * (1 - `federal_s
> ubsidy')

.         local avg_state_rebate = 0

.         local avg_fed_rebate = `pre_cost_per_watt' * `federal_subsi
> dy'

.         
.         if "${spec_type}" == "baseline" {
.                 local federal_subsidy = 0.3
.                 local system_capacity = 5.065 // W (Table B.1)
.                 local annual_output = 8233 / (`system_capacity' * 1
> 000) // Inputting California values & baseline size from https://pv
> watts.nrel.gov/pvwatts.php
.                 
.                 local pre_cost_per_watt = 3.43 * (${cpi_${policy_ye
> ar}}/${cpi_2012}) // $/W (Table B.1) - Assuming they are using a do
> llar year from the middle of their sample
.                 local avg_state_rebate = 0.41 * (${cpi_${policy_yea
> r}}/${cpi_2012}) // $/W, Table B.1 - Assuming they are using a doll
> ar year from the middle of their sample
.                 
.                 local avg_fed_rebate = (`avg_state_rebate' + `pre_c
> ost_per_watt') * `federal_subsidy'
.                 
.                 local cost_per_watt = `pre_cost_per_watt' - `avg_fe
> d_rebate'
.         }

.         
.         if "${spec_type}" == "baseline_gen" {
.                 local federal_subsidy = 0.3
.                 local pre_cost_per_watt = 4.73 * (${cpi_${policy_ye
> ar}}/${cpi_2012}) // NREL 2013 Costs
.                 local cost_per_watt = `pre_cost_per_watt' * (1-`fed
> eral_subsidy')
.                 local avg_fed_rebate = `pre_cost_per_watt' * `feder
> al_subsidy'
.         }

.         
.         local e_demand = ((`price' + (2 * 3.7 * `price_squared')) *
>  3.7)/0.518

.         local semie = `e_demand'/`cost_per_watt'

.         
.         local pass_through1 = 0.778 // From Pless Paper

.         local pass_through2 = 0.75 // From Pless Paper (additional 
> pass through for TPO)

.         local pass_through = `pass_through1' + `pass_through2'

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. * learning by doing
. local cum_sales = (713918 * 1000)/`system_capacity' // 71391800 MW,
>  as of 2020; 176,113.39 MW, as of 2014

. local marg_sales = (128050.40 * 1000)/`system_capacity' // 128050.4
> 0 MW, in 2020; 39,541.25 MW, in 2014

. 
. if `dollar_year' == ${policy_year} {
.         local cum_sales = (40327.34 * 1000)/`system_capacity'
.         local marg_sales = (17491.10 * 1000)/`system_capacity'  
. }

. 
. solar, policy_year(${policy_year}) spec(${spec_type}) semie(`semie'
> ) replacement(`replacement') p_name("pless_tpo") marg_sales(`marg_s
> ales') cum_sales(`cum_sales') annual_output(`annual_output') system
> _capacity(`system_capacity') pre_cost_per_watt(`pre_cost_per_watt')
>  avg_state_rebate(`avg_state_rebate') e_demand(`e_demand') pass_thr
> ough(`pass_through') farmer_theta(`farmer_theta') federal_subsidy(`
> federal_subsidy')
(4 vars, 8 obs)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'
(12 vars, 162 obs)
Global Benefits: 1.604450688235906
Local Benefits: .2353472199212297
Global Rebound: .3472442313716622
Local Rebound: .0460965249524102
Dynamic Price: 0
Dynamic Enviro: 0
Producer Loss: .1996746455313681
WTP_cc: 19839.69492005712
1.6896198

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006q.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006r.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006s.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_tpo_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_tpo_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_tpo_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/pless_tpo_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for pless_tpo under current
(6 vars, 5 obs)
spec_type     tax_corp_p~r  ATP
policy_year   tax_wpt       purchase_p~e

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     tax_corp_p~r  ATP
policy_year   tax_wpt       purchase_p~e
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     tax_corp_p~r  ATP
policy_year   tax_wpt       purchase_p~e
1
Specification 1 of 1, program 78 of 100 (rao_crude)
Number of observations (_N) was 0, now 0.
rao_crude

. *************************************************************
. /* 1. Program: Tax on Crude Oil Production                         
>          */
. *************************************************************
. 
. /* Rao, Niruapama L.
> Taxes and U.S. Oil Production: Evidence from California and the Win
> dfall Profit Tax
> American Economic Journal: Economic Policy 10(4): 268-301.
> https://www.aeaweb.org/articles?id=10.1257/pol.20140483
> */
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_supply_crude"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .295           .       .295       .2
> 95
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. *********************************
. /* 3. Pull Necessary Estimates / Parameters */
. *********************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
.         local tax_corp = ${tax_corp_paper}
.         local tax_wpt_effective = ${tax_wpt}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
.         local tax_corp = ${gasoline_effective_corp_tax}
.         local tax_wpt_effective = 0
. }

. 
.         *********************************
.         /* 3a. Calculate Necessary Price Points */
.         *********************************
.         local paper_ATP = ${ATP}

.         local paper_purchase_price = ${purchase_price}

. 
.         // Using data points from paper to backout base price. Stor
> ed in assumptions Excel sheet. 
.         local base_price = (`paper_ATP'/((1-${tax_corp_paper})*${ta
> x_wpt})) - (`paper_purchase_price'/${tax_wpt}) + `paper_purchase_pr
> ice'

. 
.         local ATP_check = (1-${tax_corp_paper})*(`paper_purchase_pr
> ice' - ${tax_wpt}*(`paper_purchase_price' - `base_price'))

.                 assert `ATP_check' == `paper_ATP'

.                 
.         local base_price = `base_price'*(${cpi_`dollar_year'}/${cpi
> _${policy_year}}) // Inflation adjust if calculating 2020 MVPF.

.         local ATP = ${ATP}

.         local purchase_price = `paper_purchase_price'

. 
.         // Pull updated real selling price. 
.         if "`4'" == "current" {
.                 
.                 preserve
. 
.                         ** Crude price producer sells barrel of oil
>  to refiners for. 
.                         use "${user_specific_assumptions}/files_v${
> user_name}/Gasoline Prices, Markups, and Taxes/gas_data_final", cle
> ar
.                                 keep if year == `dollar_year'
(56 observations deleted)
.                         
.                         local purchase_price = refiner_crude_cost
.                         // Same base price, new purchase price --> 
> new ATP (for baseline_general)
. 
.                 restore         
.                                 
.         }

.         
.         local ATP = (1 - `tax_corp')*(`purchase_price' - `tax_wpt_e
> ffective'*(`purchase_price' - `base_price')) // Will not change in 
> context.  

. 
. *********************************
. /* 4. Environmental Damages from Producing Crude */
. *********************************
. 
.         *********************************
.         /* 4a. Import Social Costs */
.         *********************************
. preserve

. 
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.                 
.                 local social_cost_`g' = ${sc_`g'_`dollar_year'} * (
> ${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.         }       

.         
. restore 

. 
.         *********************************
.         /* 4b. Calculate Pollution Externality per Barrel of Crude 
> */
.         *********************************       
. preserve

. 
.         ** Emissions from crude oil production (global).
.         import excel "${policy_assumptions}", first clear sheet("dr
> iving_parameters")
(7 vars, 26 obs)

.                 sum estimate if parameter == "well_to_refinery_glob
> al"

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
    estimate |          1        10.3           .       10.3       10
> .3

.                         local global_intensity = r(mean)

.                 sum estimate if parameter == "well_to_refinery_US"

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
    estimate |          1        11.3           .       11.3       11
> .3

.                         local US_intensity = r(mean)

. 
.                         
.         local enviro_externality_difference = `global_intensity' - 
> `US_intensity'

. 
. 
.         use "${gas_refinery_data}/upstream_emissions", clear

.         keep year refinery_yield_gal

.         
.         gen emissions_difference = (`enviro_externality_difference'
> *${MJ_conversion})/1000000

.         // Converting from g/MJ to mt/barrel of crude oil. Leave in
>  per-barrel terms. 
.         
.                 gen CH4_well_to_refinery = (emissions_difference*0.
> 34)/30

.                 // 34% of Masnadi et al. emissions are methane. 
.                 
.                 gen N2O_well_to_refinery = (emissions_difference*0.
> 005)/265

.                 // <1% of Masnadi et al. emissions are N2O and VOC.
>  Assuming half are N2O.
.                 // Don't need to do anything about VOC b/c we use t
> he method as them to value it globally. 
. 
.                 gen CO2_well_to_refinery = (emissions_difference*0.
> 655)

.                 // Remainder: CO2 (and VOC)
.                 
.         gen well_to_refinery_check = CH4_well_to_refinery*30 + N2O_
> well_to_refinery*265 + CO2_well_to_refinery

.                 assert well_to_refinery_check == emissions_differen
> ce

.                 drop well_to_refinery_check

.                 
.         // Using refinery data from 1990, true in-context social co
> sts from 1985.
.         local upstream CO2 CH4 N2O

.                 local wtp_upstream_difference = 0

.                 foreach val of local upstream {
  2.                         local wtp_upstream_`val' = ///
>                                                 `val'_well_to_refin
> ery*`social_cost_`val''
  3.                         di in red `wtp_upstream_`val''
  4.                         local wtp_upstream_difference = `wtp_ups
> tream_difference' + `wtp_upstream_`val''
  5.                 }
-.77357434
-.11429265
-.00625083

.                                 
. restore

.         
.         
. *********************************
. /* 5. Calculate MVPF Components */
. *********************************
. 
. // Calculate change in after-tax price.
. local new_tax_wpt = `tax_wpt_effective' + 0.01 // Imagining a 1 per
> centage point increase in tax rate.

. 
. local post_ATP = (1-`tax_corp')*(`purchase_price' - `new_tax_wpt' *
>  (`purchase_price' - `base_price'))

. local pre_ATP = `ATP'

. 
.         local delta_ATP = (`post_ATP' - `pre_ATP')

.         local pct_change_ATP = (`post_ATP' - `pre_ATP') / (`pre_ATP
> ')

.         
.                 local wtp_producers = `delta_ATP' * -1

.         
. 
. // Calculate behavioral response to policy: (elasticity / ATP) * pe
> rcent change in ATP
. local behavioral_response = (`e_supply_crude' / `ATP') * `pct_chang
> e_ATP'

. 
. // Calculate society's WTP
. local wtp_soc = `wtp_upstream_difference' * `behavioral_response' *
>  -1

. 
.         local total_WTP = `wtp_producers' + (`wtp_soc'* (1 - (${USS
> hareFutureSSC} * ${USShareGovtFutureSCC})))

.         
. // Calculate program cost and fiscal externalities.
. local tax_paid_pre = (`tax_corp'*(`purchase_price' - `tax_wpt_effec
> tive'*(`purchase_price' - `base_price'))) ///
>                                                 + (`tax_wpt_effecti
> ve'*(`purchase_price' - `base_price'))

.         
. local tax_paid_post = (`tax_corp'*(`purchase_price' - `new_tax_wpt'
> *(`purchase_price' - `base_price'))) ///
>                                                 + (`new_tax_wpt'*(`
> purchase_price' - `base_price'))

.                                                 
.         local delta_tax_paid = (`tax_paid_post' - `tax_paid_pre') *
>  -1

.         assert round(`delta_tax_paid', 0.001) == round(`delta_ATP',
>  0.001)

.                 
.                 local program_cost = `delta_tax_paid' * -1

.                 
. 
. local fiscal_externality_tax = (`tax_paid_pre' * `behavioral_respon
> se')

. local fiscal_externality_subsidy = 0

. local fiscal_externality_lr = -`wtp_soc' * ${USShareFutureSSC} * ${
> USShareGovtFutureSCC}

. 
.         local total_cost = `program_cost' + `fiscal_externality_tax
> ' + `fiscal_externality_lr' + `fiscal_externality_subsidy'

. 
.         
. // Calculate MVPF.
. local MVPF = `total_WTP'/`total_cost'

. 
.         local WTP_USPres = `wtp_producers'

.         local WTP_USFut = `wtp_soc' * (${USShareFutureSSC} - (${USS
> hareFutureSSC} * ${USShareGovtFutureSCC}))

.         local WTP_RoW = `wtp_soc' * (1 - (${USShareFutureSSC}))

.         
.                 assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW
> ') / `total_cost', 0.1) == round(`MVPF', 0.1)

.                 
. ****************************************
. /* 6. Cost-Effectiveness Calculations */
. ****************************************
.  
. **************************
. /* 7. Output */
. **************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global fisc_ext_s_`1' = `fiscal_externality_subsidy'

. global fisc_ext_t_`1' = `fiscal_externality_tax'

. 
. global WTP_`1' = `total_WTP'

. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1'  = (`wtp_soc'* (1 - (${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})))

. global wtp_prod_`1' = `wtp_producers'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006t.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006u.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006v.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rao_crude_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rao_crude_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rao_crude_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rao_crude_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for rao_crude under current
(8 vars, 5 obs)
spec_type     emissions_~r  policy_year   ef_region
region        State         avg_subsidy   description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     emissions_~r  policy_year   ef_region
region        State         avg_subsidy   description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     emissions_~r  policy_year   ef_region
region        State         avg_subsidy   description
1
Specification 1 of 1, program 79 of 100 (rebate_es)
Number of observations (_N) was 0, now 0.
rebate_es

. *******************************************************************
> ******************
. /*       0. Program: Energy Star Sales Agent        */
. *******************************************************************
> ******************
. 
. /*
> Allcott, Hunt, and Richard L. Sweeney. 
> "The role of sales agents in information disclosure: evidence from 
> a field experiment." 
> Management Science 63.1 (2017): 21-39.
> */
. * https://pubsonline.informs.org/doi/abs/10.1287/mnsc.2015.2327
. *$100 Rebate
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"TE_prob"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .037           .       .037       .0
> 37
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. ****************************************************
. /* 3a. Emissions Factors */
. ****************************************************    
. if "${spec_type}" == "baseline"{
.         local dollar_year = ${policy_year}
. }

.         
. if "${spec_type}" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. ****************************************************
. /* 3b. Policy Category Assumptions */
. ****************************************************
. preserve

.         import excel "${policy_assumptions}", first clear sheet("en
> ergy_rebate")
(3 vars, 6 obs)

.         
.         levelsof Parameter, local(levels)
`"appliance_lifetimes"' `"corporate_tax"' `"ng_public"' `"utility_pro
> fit"' `"utility_public"' `"val_given"'

.         foreach val of local levels {
  2.                 qui sum Estimate if Parameter == "`val'"
  3.                 global `val' = `r(mean)'
  4.         }

.         
.         local lifetime = ${appliance_lifetimes} // 13, 15, or 18 yr
> s - Footnote 10

.         local marginal_valuation = ${val_given}

. restore

. 
. ****************************************************
. /* 3c. Policy Specific Assumptions */
. ****************************************************
.         
. ** Cost assumptions:
. local rebate = 100 // 2012 $USD  (Table 6)

. local Baseline_prob = 0.009 // Specification (6) (Table 6)

. local baseline_mmbtu = 22.7 // https://www.eia.gov/todayinenergy/de
> tail.php?id=37433

. local mmbtu_saving_prop = 0.08 // https://www.energystar.gov/produc
> ts/water_heaters/water_heater_high_efficiency_gas_storage/benefits_
> savings

. 
. ****************************************************
. /* 3d. Inflation Adjusted Values */
. ****************************************************
. *Convert rebate to current dollars
. local adj_rebate = `rebate' * (${cpi_`dollar_year'}/${cpi_${policy_
> year}})

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. local mmbtu_reduction_annual = `mmbtu_saving_prop' * `baseline_mmbt
> u' // Assumes value for avg 4-person HH

. local prop_inframarginal = `Baseline_prob' / (`TE_prob'+`Baseline_p
> rob')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. local r_ng = `r(r_ng)'

. 
. *************************
. /* 5. WTP Calculations */
. *************************
. * Consumers
. local inframarginal = `prop_inframarginal' * `adj_rebate'

. local marginal = `prop_marginal' * `marginal_valuation' * `adj_reba
> te'

. local wtp_consumers = `marginal' + `inframarginal'

. 
. *Energy Savings
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         local annual_savings = `prop_marginal' * `mmbtu_reduction_a
> nnual' * ${ng_price_`dollar_year'_${State}}
.         
.         local c_savings = `annual_savings' + (`annual_savings'/`dis
> count') * (1 - (1/(1+`discount')^(`lifetime' - 1)))
. }

. 
. *Producers
. local annual_prod = `prop_marginal' * `mmbtu_reduction_annual' * ${
> psurplus_mmbtu_`dollar_year'_${State}}

. 
. local corporate_loss = (`annual_prod' + (`annual_prod'/`discount') 
> * (1 - (1/(1+`discount')^(`lifetime' - 1)))) * `r_ng'

. 
. if "${value_profits}" == "no" {
.         local corporate_loss = 0
. }

. 
. * Social Costs
. local local_pollutants = 0

. local global_pollutants = (`prop_marginal' * ${global_mmbtu_`dollar
> _year'} * `mmbtu_reduction_annual') + ((`prop_marginal' * ${global_
> mmbtu_`dollar_year'} * `mmbtu_reduction_annual') / `discount') * (1
>  - (1 / (1+`discount')^(`lifetime' - 1)))

. 
. local rebound_local = `local_pollutants' * (1-`r_ng')

. local rebound_global = `global_pollutants' * (1-`r_ng')

. 
. local q_carbon = `prop_marginal' * `lifetime' * `mmbtu_reduction_an
> nual' * (${global_mmbtu_`dollar_year'}/ ${sc_CO2_`dollar_year'}) * 
> `r_ng'

. 
. * Social benefits from reduced carbon 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. * Total WTP
. local WTP = `marginal' + `inframarginal' + `wtp_society' - `corpora
> te_loss' + `c_savings' - ((`global_pollutants' - `rebound_global') 
> * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants
> ' - `corporate_loss' - `rebound_local' + `c_savings'

. local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global') - ((`global_pollutants' - `rebound_global') * 
> ${USShareGovtFutureSCC}))

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global')

. 
. **************************
. /* 6. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate'

. 
. local annual_fe_t = `prop_marginal' * `mmbtu_reduction_annual' * ${
> govrev_mmbtu_`dollar_year'_${State}}

. local fisc_ext_t = (`annual_fe_t' + (`annual_fe_t'/`discount') * (1
>  - (1/(1+`discount')^(`lifetime' - 1)))) * `r_ng'

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants') * ${USShareFutureSSC
> } * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. local water_heater_energy_savings = (`mmbtu_reduction_annual' * `ng
> _cost') + ((`mmbtu_reduction_annual' * `ng_cost') / `discount') * (
> 1 - (1 / (1+`discount')^(`lifetime' - 1)))

. 
. local standard_wh_cost = (420 * 17.6 + 620 * 6.1 + 485 * 10.1 + 665
>  * 10.4) / (17.6 + 6.1 + 10.1 + 10.4)

. local es_wh_cost = (645 * 0.6 + 969 * 0.5 + 700 * 0.2 + 1020 * 0.7)
>  / (0.6 + 0.5 + 0.2 + 0.7)

. local wh_cost = (`es_wh_cost' - `standard_wh_cost') * (${cpi_2020} 
> / ${cpi_${policy_year}})

. di in red "wh cost is `wh_cost'"
wh cost is 386.3176038628336

. 
. local water_heater_cost = `wh_cost'

. 
. local resource_cost = `water_heater_cost' - `water_heater_energy_sa
> vings'

. 
. local q_carbon_mck = `lifetime' * (${global_mmbtu_2020} / ${sc_CO2_
> 2020}) * `mmbtu_reduction_annual'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `prop_marginal' * `q_carbon_mck' * `r'

. 
. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_marg_`1' = `marginal'

. global wtp_inf_`1' = `inframarginal'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global total_cost_`1' = `total_cost'

. global wtp_prod_`1' = -`corporate_loss'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global c_savings_`1' = `c_savings'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Water Heater Rebates (Alcott)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
. // global note_`1' = `"Publication: " "SCC: `scc'" "Description: Co
> st curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - 
> `s_def', Grid - `grid_def', Replacement - `replacement_def'," "Grid
>  Model - `grid_model_def', Electricity supply elasticity - `elec_su
> p_elas'"'
. global normalize_`1' = 1

. global note_`1' = `""'

. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006w.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00006x.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000070.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rebate_es_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rebate_es_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rebate_es_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rebate_es_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for rebate_es under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 80 of 100 (redd_offset)
Number of observations (_N) was 0, now 0.
redd_offset

. *******************************************************************
> *************
. /*  0. Program: REDD Offsets            */
. *******************************************************************
> *************
. /*
> Action needed to make carbon offsets from forest conservation work 
> for climate change mitigation
> THALES A. P., SVEN WUNDER, ERIN O. SILLS, JAN BÖRNER, SAMI W. RIFAI
> , ALEXANDRA N. NEIDERMEIER, GABRIEL P. FREY, AND ANDREAS KONTOLEON 
> https://www.science.org/doi/10.1126/science.ade3535
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"marginal"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    .3076923           .   .3076923   .30769
> 23
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local impact = 0.07 // even though 8 out of 26 were margina
> l, they led to less reductions in emissions than promised. The true
>  percent of additionality was 7%

.         
.         local prop_marginal = `impact' // 8 out of the 26 projects 
> were marginal

.         
.         local prop_infra = 1 - `prop_marginal'

.         
.         local subsidy = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}) //
>  estimate from: https://www.un-redd.org/sites/default/files/2022-11
> /Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = `subsidy' * `prop_infra'

. local wtp_marg = `subsidy' * (1 - `prop_infra') * 0.5

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `impact') * (${cpi_`dol
> lar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = 1 * (1 - `prop_infra')

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `subsidy'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
4.1559651

. di `total_cost'
4.2309903

. di `WTP'
17.583848

. di `wtp_cons'
4.3326323

. di `local_pollutants'
0

. di `global_pollutants'
13.51

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
13.51

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
17.583848

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.41780194

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000071.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000072.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000073.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/redd_offset_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/redd_offset_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/redd_offset_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/redd_offset_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for redd_offset under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 81 of 100 (retrofit_res)
Number of observations (_N) was 0, now 0.
retrofit_res

. *******************************************************************
> ******************
. /*       0. Program: Energize Phoenix Energy Retrofit Program - Res
> idential         */
. *******************************************************************
> ******************
. 
. /*
> Jing Liang, Yueming Qiu, Timothy James, Benjamin L. Ruddell, Michae
> l Dalrymple, Stevan Earl, Alex Castelazo,
> Do energy retrofits work? Evidence from commercial and residential 
> buildings in Phoenix,
> Journal of Environmental Economics and Management, Volume 92, 2018,
>  Pages 726-743, ISSN 0095-0696, 
> * https://doi.org/10.1016/j.jeem.2017.09.001.
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: retrofit_res no uncorre
> cted_vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"energy_change_residential"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.302           .      -.302      -.3
> 02
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************    
.         
. local gov_subsidy = 0.60

. local retrofit_cost = 173324

. local energy_initial = 1195.8

. local subsidy_cost =  `gov_subsidy' * `retrofit_cost'

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Energy Reduction
. local energy_baseline = `energy_initial' * 12 * 24

. local energy_savings_percent = -1 * (exp(`energy_change_residential
> ') - 1)

. local kwh_reduction_annual = `energy_savings_percent' * `energy_bas
> eline'

. 
. weatherization_ado non-marginal, policy_year(${policy_year}) inflat
> ion_year(2013) spec(${emissions_factor}) geo(${State}) kwh_reduced(
> `kwh_reduction_annual') mmbtu_reduced(0) ///
>                                                                  pr
> ogram_cost(`subsidy_cost') replacement(`replacement') policy("`1'")
(3 vars, 7 obs)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'
(12 vars, 162 obs)

. di `r(MVPF)'
1.2101487

. 
. ****************
. /* 5. Outputs */
. ****************
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. global wtp_soc_`1' = `r(wtp_society)'

. global wtp_marg_`1' = `r(marginal)' 

. global wtp_inf_`1' = `r(inframarginal)' 

. global c_savings_`1' = `r(c_savings)'

. global wtp_glob_`1' = `r(global_pollutants)'

. global wtp_loc_`1' = `r(local_pollutants)'

. global total_cost_`1' = `r(total_cost)'

. global wtp_prod_`1' = `r(corporate_loss)'

. global wtp_r_loc_`1' = `r(rebound_local)'

. global wtp_r_glob_`1' = `r(rebound_global)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global p_spend_`1' = `r(policy_spending)'

. global q_CO2_`1' = `r(q_carbon)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Residential Retrofit"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000074.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000075.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000076.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/retrofit_res_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/retrofit_res_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/retrofit_res_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/retrofit_res_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for retrofit_res under current
(15 vars, 15 obs)
spec_type     coal_CO2_p~e  natgas_CO2..  natgas_SO2..  coal_NOx_l~e
policy_year   coal_CO2_l~e  coal_SO2_p~e  natgas_SO2..  natgas_NOx..
description   natgas_CO2..  coal_SO2_l~e  coal_NOx_p~e  natgas_NOx..

Duplicates in terms of all variables

(9 observations deleted)
  6
spec_type     coal_CO2_p~e  natgas_CO2..  natgas_SO2..  coal_NOx_l~e
policy_year   coal_CO2_l~e  coal_SO2_p~e  natgas_SO2..  natgas_NOx..
description   natgas_CO2..  coal_SO2_l~e  coal_NOx_p~e  natgas_NOx..
(5 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     coal_CO2_p~e  natgas_CO2..  natgas_SO2..  coal_NOx_l~e
policy_year   coal_CO2_l~e  coal_SO2_p~e  natgas_SO2..  natgas_NOx..
description   natgas_CO2..  coal_SO2_l~e  coal_NOx_p~e  natgas_NOx..
1
Specification 1 of 1, program 82 of 100 (rggi)
Number of observations (_N) was 0, now 0.
rggi

. *************************************************************
. /* 0. Program: RGGI                         */
. *************************************************************
. 
. /* Chan & Morrow (2019 Energy Economics):
> Unintended consequences of cap-and-trade?
> Evidence from the Regional Greenhouse Gas Initiative */
. * DOI: 10.1016/j.eneco.2019.01.007
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow
.                 levelsof estimate, local(estimates)
`"log_coal_CO2_leaker_2016"' `"log_coal_CO2_prod_2016"' `"log_coal_SO
> 2_leaker_2016"' `"log_coal_SO2_prod_2016"' `"log_natgas_CO2_leaker_
> 2016"' `"log_natgas_CO2_prod_2016"' `"log_natgas_SO2_leaker_2016"' 
> `"log_natgas_SO2_prod_2016"' `"log_total_NOx_leaker_2016"' `"log_to
> tal_NOx_prod_2016"'
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.12           .       -.12       -.
> 12

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.79           .       -.79       -.
> 79

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.06           .       -.06       -.
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.89           .       -.89       -.
> 89

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        1.11           .       1.11       1.
> 11

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .13           .        .13        .
> 13

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        1.14           .       1.14       1.
> 14

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.15           .       -.15       -.
> 15

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1           0           .          0         
>  0

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.19           .       -.19       -.
> 19
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 levelsof estimate, local(estimates)
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. global leakage_approach = "percent_approach"

. global share_leakage_rggi = .51136364

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. local discount = ${discount_rate}

. 
. 
. ****************************************************
. /* 1. Pollution Calculations */
. ****************************************************
. local energy_classes                     natgas coal    

. local pollutants_list                    CO2 SO2 NOx

. local emission_type                      prod leaker

. 
. 
. // Baseline Emissions Produced and leaker.
. foreach p of local pollutants_list {
  2.         
.         foreach t of local emission_type {
  3.                 
.                 local total_baseline_q_`p'_`t' = ${coal_`p'_`t'_bas
> eline} + ${natgas_`p'_`t'_baseline}
  4.                         
.         }
  5.         
. }

. 
. // Adjust Percent Change Metrics and Calculate Percent Change b/w 2
> 009 and 2016; Calculate Leakage Shares.
. foreach p of local pollutants_list {
  2.         
.         foreach t of local emission_type {
  3.                 
.                 foreach e of local energy_classes {
  4.                         
.                         if "`p'" != "NOx" {
  5.                                 
.                                 local pct_change_`e'_`p'_`t' = exp(
> `log_`e'_`p'_`t'_${policy_year}')
  6.                                 local `e'_`p'_`t'_new = ${`e'_`p
> '_`t'_baseline} * `pct_change_`e'_`p'_`t''
  7.                                 di in red ``e'_`p'_`t'_new'
  8.                                 
.                         }
  9.                         
.                         if "`p'" == "NOx" {
 10.                                 
.                                 local pct_change_total_`p'_`t' = ex
> p(`log_total_`p'_`t'_${policy_year}')
 11.                                 local `p'_`t'_new = `total_basel
> ine_q_`p'_`t'' * `pct_change_total_`p'_`t''
 12.                                 
.                         }
 13.                         
.                 }
 14.                 
.         }
 15.         
. }
40653914
22394997
25979005
1.845e+08
955.67333
90468.411
162.82021
1243393.1

. 
. * Calculate Change in Emissions by RGGI and Leaker States. 
. foreach p of local pollutants_list {
  2.         
.         foreach t of local emission_type {
  3.                 
.                 if "`p'" != "NOx" {
  4.                         
.                         local total_new_q_`p'_`t' = `coal_`p'_`t'_n
> ew' + `natgas_`p'_`t'_new'
  5.                         local delta_q_`p'_`t' = `total_new_q_`p'
> _`t'' - `total_baseline_q_`p'_`t''
  6.                         
.                 }
  7.                 
.                 if "`p'" == "NOx" {
  8.                         
.                         local total_new_q_`p'_`t' =  ``p'_`t'_new'
  9.                         local delta_q_`p'_`t' = `total_new_q_`p'
> _`t'' - `total_baseline_q_`p'_`t''
 10.                         
.                 }
 11.                 
.         }
 12.         
. }

. 
. * Calculate Overall Change in Emissions and WTP by Pollutant. 
. foreach p of local pollutants_list {
  2.         
.         if "${leakage_approach}" == "paper_values" {
  3.                 
.                 local total_delta_`p' = `delta_q_`p'_prod' + `delta
> _q_`p'_leaker'
  4.                 di in red `total_delta_`p''
  5.                 
.         }
  6.         
.         if "${leakage_approach}" == "percent_approach" {
  7.                 
.                 local total_delta_`p' = `delta_q_`p'_prod' * (1 - $
> {share_leakage_rggi})
  8.                 di in red `total_delta_`p''
  9.                         
.         }
 10.         
. }
-10747147
-63517.137
-6903.9047

. 
. local delta_q_SO2_dCO2 = `delta_q_SO2_prod' / `delta_q_CO2_prod'

. local delta_q_NOx_dCO2 = `delta_q_NOx_prod' / `delta_q_CO2_prod'

. 
. ****************************************************
. /* 2. Calculate Price Changes */
. ****************************************************
. preserve

. 
.         import excel "${policy_assumptions}", first clear sheet("RG
> GI_C&T_data")
(3 vars, 74 obs)

.         
.         drop if clearing_price == "--"
(2 observations deleted)

.         destring clearing_price, replace
clearing_price: all characters numeric; replaced as double

.         
.         gen year = year(auction_date)

.         gen month = month(auction_date)

.         
.         gen auction_quarter = .
(72 missing values generated)

.         levelsof(month), local(month_loop)
3 6 9 12

.         foreach m of local month_loop {
  2.                 
.                 replace auction_quarter = 1 if month == 3
  3.                 replace auction_quarter = 2 if month == 6
  4.                 replace auction_quarter = 3 if month == 9
  5.                 replace auction_quarter = 4 if month == 12
  6. 
.         }
(18 real changes made)
(18 real changes made)
(18 real changes made)
(18 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

.                 
.         bysort year : egen allowances_total = total(q_sold)        
>      

.         collapse (mean) clearing_price allowances_total [aw=q_sold]
> , by(year)

.                 
.         * Generate Locals Needed in Calculations.
.         egen q = total(allowances_total) if inrange(year, 2009, ${p
> olicy_year})
(8 missing values generated)

.         qui sum q if q != .

.         local permit_q = r(mean)

.                 
.         gen real_clearing_price = .
(16 missing values generated)

.         levelsof(year), local(year_loop)
2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021
>  2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_clearing_price = clearing_price * (${c
> pi_`dollar_year'}/${cpi_`y'}) if year == `y' 
  3.                 // 2016 dollars in context, 2020 dollars for cur
> rent.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         qui sum real_clearing_price [aw = allowances_total] if inra
> nge(year, 2009, ${policy_year}) 

.         local baseline_price = r(mean)

.                                 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_clearing_price if year == `dollar_year
> ' 
.                 local permit_price = r(mean)
.                 
.         }       

.         
.         local semie = (`baseline_price' / `delta_q_CO2_prod') * `pe
> rmit_q'

.         
. ****************************************************
. /* 3. Import Social Costs and Marginal Damages */
. ****************************************************
. 
. // GOING TO SHORT TONS TO BE CONSISTENT WITH PAPER AND PERMIT QUANT
> ITY
. gen sc_NOx = (${md_NOx_`dollar_year'_unweighted} * (${cpi_`dollar_y
> ear'} / ${cpi_${md_dollar_year}}))/1.10231

. local social_cost_NOx_uw = sc_NOx

. gen sc_SO2 = (${md_SO2_`dollar_year'_unweighted} * (${cpi_`dollar_y
> ear'} / ${cpi_${md_dollar_year}}))/1.10231

. local social_cost_SO2_uw = sc_SO2

. 
. 
. 
. gen sc_CO2 = .
(16 missing values generated)

. foreach y of local year_loop {
  2.         
.         replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / $
> {cpi_${sc_dollar_year}}))/1.10231 if year == `y'
  3.         // Constant dollars, varying social cost of carbon.
.         
. }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
. if "${spec_type}" == "baseline" {
.         
.         qui sum sc_CO2 [aw = allowances_total] if inrange(year, 200
> 9, ${policy_year}) 
.         local social_cost_CO2 = r(mean)
.         
. }

. 
. if "${spec_type}" == "current" {
.         
.         qui sum sc_CO2 [aw = allowances_total] if year == `dollar_y
> ear'
.         local social_cost_CO2 = r(mean)
.         
. }

. 
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fe_permit = -`permit_price'
.         
. }

. 
. ****************************************************
. /* 5. Rebound Calculations */
. ****************************************************
. 
. ****************************************************
. /* 6. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.         local wtp_permits = `wtp_permits_grandfathered' + `wtp_perm
> its_auctioned'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "${leakage_approach}" == "paper_values"  {
  3.                         
.                         if "`p'" == "CO2" {
  4.                                 local wtp_`p' = -`social_cost_`p
> ''
  5.                         }
  6.                         else {
  7.                                 local wtp_`p' = -`social_cost_`p
> '_uw' * `delta_q_`p'_dCO2'
  8.                         }
  9.                                                         
.                 }
 10.                 
.                 if "${leakage_approach}" == "percent_approach"  {
 11.                         
.                         if "`p'" == "CO2" {
 12.                                 local wtp_`p' = -`social_cost_`p
> '' * (1 - ${share_leakage_rggi})
 13.                         }
 14.                         else {
 15.                                 local wtp_`p' = -`social_cost_`p
> '_uw' * `delta_q_`p'_dCO2' * (1 - ${share_leakage_rggi})
 16.                         }       
 17.                 
.                 }
 18.                 
.         }
.         
.         local wtp_soc_l = `wtp_SO2' + `wtp_NOx'
.         local wtp_soc_g = `wtp_CO2'     
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + `wtp_soc_
> g' * (1 - ${USShareFutureSSC} * ${USShareGovtFutureSCC})
. 
. }

. 
. local WTP_USPres = `wtp_producers' + `wtp_soc_l'

. local WTP_USFut = (`wtp_soc_g') * (${USShareFutureSSC} - (${USShare
> FutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g') * (1 - ${USShareFutureSSC})

. 
. ****************************************************
. /* 7. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
.         
. local fe_lr = `wtp_soc_g' * ${USShareFutureSSC} * ${USShareGovtFutu
> reSCC} * -1

. 
. local total_cost = `permit_revenue' + `fe_permit' + `fe_lr'

. 
. local MVPF = `total_WTP'/`total_cost' 

. 
. ****************************************************
. /* 8. Save Results and Waterfall Components */
. ****************************************************
. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `total_WTP'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global program_cost_`1' = `permit_revenue'

. 
. global wtp_soc_`1' = `wtp_soc_l' + (`wtp_soc_g' * (1 - (${USShareFu
> tureSSC} * ${USShareGovtFutureSCC})))

. global wtp_soc_l_`1' = `wtp_soc_l'

. global wtp_soc_g_`1'  = `wtp_soc_g' * (1 - (${USShareFutureSSC} * $
> {USShareGovtFutureSCC}))

.         
. global wtp_no_leak_`1' = ${wtp_soc_`1'}/(1 - ${share_leakage_rggi})
>      

. global wtp_leak_`1' = ${wtp_soc_`1'} - (${wtp_soc_`1'}/(1 - ${share
> _leakage_rggi}))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global semie_`1' = `semie'

. 
. global fisc_ext_t_`1' = `fe_permit'

. global fisc_ext_lr_`1' = `fe_lr'

. 
. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `delta_q_CO2_prod')

. 
. global gov_carbon_`1' = `delta_q_CO2_prod' 

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
(1 real change made)
wtp_abatement
(1 real change made)
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
(1 real change made)
wtp_leak
(1 real change made)
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000077.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000078.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000079.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rggi_current_estimates_0_replication
    > s.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rggi_current_estimates_0_replication
    > s.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rggi_current_unbounded_estimates_0_r
    > eplications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rggi_current_unbounded_estimates_0_r
    > eplications.dta saved
Finished running for rggi under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 83 of 100 (rice_in_st)
Number of observations (_N) was 0, now 0.
rice_in_st

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007a.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007b.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007c.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_st_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_st_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_st_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_st_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for rice_in_st under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 84 of 100 (rice_in_up)
Number of observations (_N) was 0, now 0.
rice_in_up

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007d.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007e.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007f.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_up_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_up_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_up_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rice_in_up_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for rice_in_up under current
(3 vars, 5 obs)
spec_type    policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  description
1
Specification 1 of 1, program 85 of 100 (rps)
Number of observations (_N) was 0, now 0.
rps

. *************************************************************
. /* 0. Program: CAFE                        */
. *************************************************************
. /*
> Greenstone, Michael and Nath, Ishan
> "Do Renewable Portfolio Standards Deliver Cost-Effective Carbon Aba
> tement?"
> Working Paper No. 2019-62 (November 2020). 
> */
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"elasticity"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          0
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local dollar_year = ${today_year}

. 
. *****************************
. /* 2. Intermediate Calculations */
. *****************************
. // 2019 dollars. Policy year set to 2019.
. global value_local_RPS                  no

. global normalize_env            yes  

. 
. local cost_per_ton = 145 * (${cpi_2020}/${cpi_2022})

.         global cost_per_ton_label = `cost_per_ton'

. 
. local producer_surplus = 0

. local consumer_surplus = -1 * `cost_per_ton'

.    
. local soc_global = ${sc_CO2_`dollar_year'} * (1 - (${USShareFutureS
> SC} * ${USShareGovtFutureSCC}))

. local soc_local = 0

.         
. 
. if "${normalize_env}" == "yes" {
.         local normalize = `soc_local' + `soc_global'
. }

. if "${normalize_env}" != "yes" {
.         local normalize = 1
. }

. 
. *****************************
. /* 3. Waterfalls */
. *****************************
. global regulation_`1' = 1

. 
. /* Since looking at a regulation, we do not have costs --> Skip MVP
> F calculation and simply show the 
>    breakdown b/w producers WTP to abate pollutant, p, and society's
>  WTP for this ton of pollution. */
.    
. global wtp_prod_`1' = (`producer_surplus')/ abs(`normalize')

. global wtp_cons_`1' = (`consumer_surplus')/ abs(`normalize')

. 
. 
. global wtp_soc_l_`1' = `soc_local'/abs(`normalize')

. global wtp_soc_g_`1' = `soc_global'/abs(`normalize')

. 
.         global wtp_soc_`1' = ${wtp_soc_g_`1'} + ${wtp_soc_l_`1'}

. 
. global WTP_`1' = ${wtp_prod_`1'} + ${wtp_soc_`1'} + ${wtp_cons_`1'}

.       
. global program_cost_`1' = 0

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' = 0

. global fisc_ext_lr_`1' = ((${sc_CO2_2020})*((${USShareFutureSSC} * 
> ${USShareGovtFutureSCC}))*-1)/abs(`normalize')

. 
. global cost_`1' = ${program_cost_`1'} + ${fisc_ext_t_`1'} + ${fisc_
> ext_s_`1'} + ${fisc_ext_lr_`1'}

.                         
. local phi = 0

. 
. global numerator = (${fisc_ext_lr_`1'} - ${wtp_prod_`1'} - ${wtp_co
> ns_`1'}  + (`phi'*${fisc_ext_lr_`1'})) 

. global denominator = ((${wtp_soc_g_`1'}) / (${sc_CO2_`dollar_year'}
>  * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. global RPS_sc_`1' =  (${fisc_ext_lr_`1'} - ${wtp_cons_`1'}  + (`phi
> '*${fisc_ext_lr_`1'})) 

. 
. di in red ${RPS_sc_`1'}
.65802861

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
WTP_USFut
(1 real change made)
WTP_RoW
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(0 real changes made)
(0 real changes made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007g.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007h.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007i.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rps_current_estimates_0_replications
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rps_current_estimates_0_replications
    > .dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rps_current_unbounded_estimates_0_re
    > plications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/rps_current_unbounded_estimates_0_re
    > plications.dta saved
Finished running for rps under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 86 of 100 (russo_crp)
Number of observations (_N) was 0, now 0.
russo_crp

. *******************************************************************
> *************
. /*  0. Program:  Conservation Reserve Program (Russo)         */
. *******************************************************************
> *************
. /*
> Additionality and Asymmetric Information in
> Environmental Markets: Evidence from Conservation
> Auctions
> 
> Karl M. Aspelund and Anna Russo
> https://annarusso.github.io/papers/aspelund_russo_crp.pdf
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. local efficient_allocation = "no" // yes or no depending on whether
>  you want status quo auction of the effecient auction

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"rd_estimate"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.075           .      -.075      -.0
> 75
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local bid_price = 83 * (${cpi_`dollar_year'}/${cpi_2020}) /
> / from Table 1 - this seems to be in 2020 dollars since other recen
> t sources have a similar price 

.         
.         local annual_avoided_CO2 = (44/23.4) // Total CO2e avoided 
> divided by total amount of acres (both in millions). Source from re
> ference in Russo's paper: https://www.fsa.usda.gov/Assets/USDA-FSA-
> Public/usdafiles/EPAS/natural-resouces-analysis/nra-landing-index/2
> 017-files/Environmental_Benefits_of_the_US_CRP_2017_draft.pdf 

.         
.         *Russo uses a scc of $43. She reports the total GHG benefit
> s + other benefits (wildlife, air quality, etc...) for four differe
> nt estimates and takes the average. To backout the other estimates,
>  I can apply a $43 scc and subtract out the GHG benefits from the t
> otal benefits.
.         
.         local russo_ghg = (`annual_avoided_CO2' * 43)

.         
.         local other_benefits = ((98.34 - `russo_ghg') + (255.70 - `
> russo_ghg') + (367.96 - `russo_ghg') + (456.04 - `russo_ghg'))/4

. 
.         local marginal_prop = `rd_estimate'/-0.35 // Calculated usi
> ng estimate & method from Table 2

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. if "`efficient_allocation'" == "yes" {
.         local marginal_prop = 0.55
. }

. local wtp_infr = (1 - `marginal_prop') * `bid_price'

. local wtp_marg = `marginal_prop' * 0.5 * `bid_price' // Hard to get
>  landowner surplus so using a Harberger approximation instead

. 
. local wtp_cons = `wtp_infr' + `wtp_marg' 

.         
. local local_pollutants = `other_benefits' * `marginal_prop' // Thes
> e are not necessarily local pollutants but local benefits more gene
> rally

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  `marginal_prop' * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}
> )

. 
. local rebound_local = 0

. local rebound_global = 0

. 
. * Social benefits from reduced carbon
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

. * Total WTP
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
.         // Quick decomposition
.         local WTP_USPres = `wtp_cons' + `local_pollutants' - `rebou
> nd_local'

.         local WTP_USFut  =     ${USShareFutureSSC}  * ((`global_pol
> lutants' - `rebound_global') - ((`global_pollutants' - `rebound_glo
> bal') * ${USShareGovtFutureSCC}))

.         local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pol
> lutants' - `rebound_global')

.         
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `bid_price'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 6. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************************************
. /* 7. Cost-Effectiveness Calculations */
. ****************************************
. local land_cost = `bid_price'

. 
. local resource_cost = `land_cost'

. 
. local q_carbon_mck = `annual_avoided_CO2'

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = `q_carbon_mck' * `marginal_prop'

. ****************
. /* 8. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. 
. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. 
. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. 
. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. 
. 
. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _loc", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "CRP - Russo"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Local" "Benefits""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
2.4066424

. di `total_cost'
81.510401

. di `WTP'
196.16639

. di `wtp_cons'
74.107143

. di `local_pollutants'
45.783278

. di `global_pollutants'
77.765568

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
123.54885

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
196.16639

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007j.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007k.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007l.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/russo_crp_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/russo_crp_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/russo_crp_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/russo_crp_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for russo_crp under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 87 of 100 (sent_ch_gas)
Number of observations (_N) was 0, now 0.
sent_ch_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Sentenac-Chemin, Elodie. 
> "Is the price effect on fuel consumption symmetric? Some evidence f
> rom an empirical study." 
> Energy Policy 41 (2012): 59-65. */
. *https://www.sciencedirect.com/science/article/pii/S030142151000546
> X
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: sent_ch_gas no uncorrec
> ted_vJK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.28           .       -.28       -.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_lbd_`1' = `r(lbd_wtp)'

. global cost_lbd_`1' = `r(lbd_cost)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
. global `1'_ep = "N"

. global `1'_name "Gasoline Tax (Price Elasticity from Sentenac-Chemi
> n 2012)"

. 
. if "${gas_tax_cc_toggle}" == "yes" {
.         
.         local cc_note_gas_taxes = "Cost curve enabled."
.         
. }

. else {
.         
.         local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Sentenac-Chemin 2012" "Global Assu
> mptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline Pr
> ice of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_not
> e_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007m.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007n.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007o.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sent_ch_gas_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sent_ch_gas_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sent_ch_gas_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sent_ch_gas_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for sent_ch_gas under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 88 of 100 (shirmali_ptc)
Number of observations (_N) was 0, now 0.
shirmali_ptc

. **************************************************
. /*       0. Program: PTC Wind subsidies              */
. **************************************************
. 
. /*
> Gireesh Shrimali, Melissa Lynes, Joe Indvik,
> Wind energy deployment in the U.S.: An empirical analysis of the ro
> le of federal and state policies,
> Renewable and Sustainable Energy Reviews,
> Volume 43, 2015, Pages 796-806, ISSN 1364-0321,
> https://doi.org/10.1016/j.rser.2014.11.080.
> 
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"semie"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.194           .      -.194      -.1
> 94

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       28.15           .      28.15      28.
> 15
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

.         
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local lifetime = ${lifetime}

.                 
.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind. 

.                 // Capacity factor doesn't matter b/c it affects WT
> P and cost identically. 
.                 
.                 local average_size = ${average_size}

.                 local credit_life = ${credit_life}

.                 local current_ptc = ${current_ptc}

.                 local capacity_reduction = ${capacity_reduction}

.                 local hrs = 8760 // hours per year

.                 local lcoe = 0.0373 * (${cpi_2020}/${cpi_2022}) // 
> from https://emp.lbl.gov/levelized-cost-wind-energy, in 2022 dollar
> s.

.                 local capacity_factor_context = 0.29 // https://www
> .energy.gov/sites/default/files/2023-08/land-based-wind-market-repo
> rt-2023-edition.pdf

.         restore

.         
.         
.         // Adjust Values if Calculating In-Context MVPFs.
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseli
> ne_gen" {
.                 
.                 local capacity_factor = `capacity_factor_context' /
> / Land Based Wind Market Report - Capacity Factor in Table 34 (2007
> ). 
.                 local average_size = 1.65 // in MW frrom https://pu
> bs.usgs.gov/sir/2011/5036/sir2011-5036.pdf on Page 3.
.                 local current_ptc = 0.022 // PTC is 2.2 cents in 20
> 11 (in 2011 dollars)
.         }

.         
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("wind_lcoe")
(5 vars, 25 obs)

.                 keep if Year >= 2000 & Year <= ${policy_year} // On
> ly have capacity additions data starting in 1999
(13 observations deleted)

.                 collapse (mean) LCOE [aw=capacity_additions]

.                 local avg_lcoe = (LCOE[1] * (${cpi_2020}/${cpi_2022
> }))/1000

.                 
.                 local ic_lcoe = (LCOE[1] * (${cpi_${policy_year}}/$
> {cpi_2022}))/1000

.         restore

.         
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("wind_lcoe")
(5 vars, 25 obs)

.                 
.                 gen ptc_real = .
(25 missing values generated)

.                 qui sum Year

.                 forvalues y = `r(min)'(1)`r(max)' {
  2.                         replace ptc_real = 15 * (${cpi_2020}/${c
> pi_1992}) if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 replace ptc_real = 0 if Year == 2000 | Year == 2002
>  | Year == 2004 | Year == 2010 // expired in those years
(4 real changes made)

.                 
.                 keep if Year >= 2000 & Year <= ${policy_year} // On
> ly have capacity additions data starting in 1999
(13 observations deleted)

.                 collapse (mean) capacity_additions ptc_real [aw=cap
> acity_additions]

.                 local capacity_add = capacity_additions[1]

.                 local ptc_real = ptc_real[1]/1000

.         restore

.         
.         if "${lcoe_scaling}" == "yes" {
.                 local lcoe = ${scalar} * `lcoe'
.         }

.         
.         if "${subsidy_loop}" == "yes" {
.                 local current_ptc = ${fed_sub_loop}
.         }

. 
. ***************************************
. /* 4. Calculating Semie & Elasticity */
. ***************************************
. local output_per_mw = (`hrs' * `capacity_factor' * 1000 * `credit_l
> ife') + (`hrs' * (`capacity_factor' * (1 - `capacity_reduction')) *
>  1000 * (`lifetime' - `credit_life'))

. // Term 1 = Hours/Year x Capacity Factor (%) x (1000 KW / 1 MW) * 1
> 0 Years (Credit Lifetime); do the same but for remaining lifetime y
> ears but adjust by % drop in capacity factor.
. 
. *Learning by Doing Assumptions
. local cum_sales = 742689 / `average_size' // 742,689 (2020), world 
> numbers. Available in replication package of cited paper (lcoe_lear
> ning_data_wind).

. local marg_sales = 92490 / `average_size' // 92,490 for (2020), wor
> ld numbers. Available in replication package of cited paper (lcoe_l
> earning_data_wind).

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         local cum_sales = 238110 / `average_size' // 742,689 for (2
> 020) or 238,110 (2007), world numbers. Available in replication pac
> kage of cited paper (lcoe_learning_data_wind).
.         local marg_sales = 40154 / `average_size' // 92,490 for (20
> 20) or 40,154 (2007), world numbers. Available in replication packa
> ge of cited paper (lcoe_learning_data_wind). 
.         local lcoe = `ic_lcoe'
. }

. 
. *Getting the elasticity (New Version)
. local causal_est = `semie'

. 
. *Discount the flow of LCOE and PTC to the present. 
. local capital_discount = 0.0280 // https://www.nrel.gov/docs/fy24os
> ti/88335.pdf, Slide 50 (Real Weighted Avg Cost of Capital (%))

. local ptc_discount_rate = 0.0280 // https://www.nrel.gov/docs/fy24o
> sti/88335.pdf, Slide 50 (Real Fixed Charge Rate (%))

. 
. *In-Context (for elasticity)
. local lcoe_discounted_incontext = `avg_lcoe' + ((`avg_lcoe')/`capit
> al_discount') * (1 - (1/(1+`capital_discount')^(`lifetime' - 1)))

. local ptc_discounted = 0.01 + ((0.01)/`ptc_discount_rate') * (1 - (
> 1/(1+`ptc_discount_rate')^(`credit_life' - 1)))

. 
. local scale_factor_incontext = (`ptc_discounted' / 0.01) / (`lcoe_d
> iscounted_incontext'/`avg_lcoe')

. 
. 
. *2020 (for Semie)
. local lcoe_discounted = `lcoe' + ((`lcoe')/`capital_discount') * (1
>  - (1/(1+`capital_discount')^(`lifetime' - 1)))

. 
. local ratio = `ptc_discounted'/`lcoe_discounted'

. 
. local scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_discounted'
> /`lcoe')

. 
. local q_change = (`semie' * 50) / ((`capacity_add') - (`semie' * 50
>  * 0.5)) // percent change in capacity additions as a result of the
>  PTC // using arc elasticity method

. 
. local p_change = (`ptc_real' * `scale_factor_incontext') / (`avg_lc
> oe' - (`ptc_real' * `scale_factor_incontext') * 0.5) // Average cre
> dit and average lcoe in 2020 dollars // using arc elasticity method

. 
. local epsilon = - `q_change' / `p_change'

. 
. *If bootstrap gets a positive elasticity, hardcode epsilon
. if `epsilon' > 0 {
.         local epsilon = - 0.00001
. }

. 
. local semie = (`epsilon' / (`lcoe' * (1 - (`current_ptc' * 100 * `r
> atio')))) * 0.01 * `scale_factor'

. 
. if "${constant_semie}" == "yes" {
.         local lcoe_incontext = `avg_lcoe' + ((`avg_lcoe')/`capital_
> discount') * (1 - (1/(1+`capital_discount')^(`lifetime' - 1)))
.         local ratio_incontext = `ptc_discounted'/ `lcoe_incontext'
.         local ic_scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_
> incontext'/`avg_lcoe')
.         local semie = (`epsilon' / (`avg_lcoe' * (1 - (`ptc_real' *
>  100 * `ratio_incontext')))) * 0.01 * `ic_scale_factor'
.         local epsilon = (`semie' * (`lcoe' * (1 - (`current_ptc' * 
> 100 * `ratio')))) / (0.01 * `ic_scale_factor')
. }

. 
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" 
> {
.         local lcoe_incontext = `avg_lcoe' + ((`avg_lcoe')/`capital_
> discount') * (1 - (1/(1+`capital_discount')^(`lifetime' - 1)))
.         local ratio_incontext = `ptc_discounted'/ `lcoe_incontext'
.         local ic_scale_factor = (`ptc_discounted' / 0.01) / (`lcoe_
> incontext'/`avg_lcoe')
.         local semie = (`epsilon' / (`avg_lcoe' * (1 - (`ptc_real' *
>  100 * `ratio_incontext')))) * 0.01 * `ic_scale_factor'
. }

. 
. 
. local prod_cost = (`output_per_mw'/1000) * `lcoe' * 1000 *  `averag
> e_size'

. local subsidy_max = (`hrs' * `capacity_factor' * 1000 * `credit_lif
> e') * `current_ptc' * `average_size'

. 
. ****************
. /* 5. Outputs */
. ****************
. wind_ado, policy_year(${policy_year}) inflation_year(${policy_year}
> ) spec(${spec_type}) replacement(`replacement') capacity_factor_con
> text(`capacity_factor_context') size_context(`average_size') semie(
> `semie') p_name("shirmali_ptc") marg_sales(`marg_sales') cum_sales(
> `cum_sales') prod_cost(`prod_cost') epsilon(`epsilon') farmer_theta
> (`farmer_theta') subsidy_max(`subsidy_max') current_ptc(`current_pt
> c')
(4 vars, 8 obs)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'
(12 vars, 162 obs)

. 
. global `1'_name "Shrimali PTC"

. global semie_`1' = `semie'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
(1 real change made)
cost_mvpf
(1 real change made)
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
(1 real change made)
wind_l_wf
(1 real change made)
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007p.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007q.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007r.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/shirmali_ptc_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/shirmali_ptc_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/shirmali_ptc_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/shirmali_ptc_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for shirmali_ptc under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 89 of 100 (sl_offset)
Number of observations (_N) was 0, now 0.
sl_offset

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007s.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007t.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007u.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sl_offset_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sl_offset_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sl_offset_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/sl_offset_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for sl_offset under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 90 of 100 (small_gas_lr)
Number of observations (_N) was 0, now 0.
small_gas_lr

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Small, Kenneth A., and Kurt Van Dender. (LR)
> "Fuel efficiency and motor vehicle travel: the declining rebound ef
> fect." 
> The Energy Journal 28, no. 1 (2007). */
. *https://www.economics.uci.edu/files/docs/workingpapers/2005-06/Sma
> ll-03.pdf
. */
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.334           .      -.334      -.3
> 34

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
. global `1'_ep = "N"

. global `1'_name "Gasoline Tax (Price Elasticity from Small and Van 
> Dender 2007)"

. 
. if "${gas_tax_cc_toggle}" == "yes" {
.                 
.         local cc_note_gas_taxes = "Cost curve enabled."
.                 
. }

. else {
.                 
.         local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. global note_`1' = `"Publication: Small and Van Dender 2007 - Long-r
> un Elasticity" "Global Assumptions: ${scc_ind_name}, ${dr_ind_name}
> " "Description: Gasoline Price of $`r(consumer_price_return)' (`dol
> lar_year' dollars). `cc_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007v.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007w.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00007x.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_lr_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_lr_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_lr_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_lr_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for small_gas_lr under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 91 of 100 (small_gas_sr)
Number of observations (_N) was 0, now 0.
small_gas_sr

. *************************************************************
. /* 1. Program: Gas taxes                                           
>                               */
. *************************************************************
. 
. /*Small, Kenneth A., and Kurt Van Dender. (SR)
> "Fuel efficiency and motor vehicle travel: the declining rebound ef
> fect." 
> The Energy Journal 28, no. 1 (2007). */
. *https://www.economics.uci.edu/files/docs/workingpapers/2005-06/Sma
> ll-03.pdf
. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1      -.0667           .     -.0667     -.06
> 67

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Small 
> and Van Dender 2007)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. 
. global note_`1' = `"Publication: Small and Van Dender 2007" "Global
>  Assumptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoli
> ne Price of $`r(consumer_price_return)' (`dollar_year' dollars). `c
> c_note_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000080.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000081.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000082.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_sr_current_estimates_0_rep
    > lications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_sr_current_estimates_0_rep
    > lications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_sr_current_unbounded_estim
    > ates_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/small_gas_sr_current_unbounded_estim
    > ates_0_replications.dta saved
Finished running for small_gas_sr under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 92 of 100 (solarize)
Number of observations (_N) was 0, now 0.
solarize

. *******************************************************************
> *************
. /*       0. Program: Solarize Program                              
>            */
. *******************************************************************
> *************
. 
. /*
> Social Learning and Solar Photovoltaic Adoption: Evidence from a Fi
> eld Experiment
> Kenneth Gillingham & Bryan Bollinger
> *https://resources.environment.yale.edu/gillingham/GillinghamBollin
> ger_SocialLearningPV.pdf
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: solarize no uncorrected
> _vJK current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. 
. global solar_lca_co2e 40 // grams of CO2e per KWh, from NREL  https
> ://www.nrel.gov/docs/fy13osti/56487.pdf

. local solar_lca_co2e = ${solar_lca_co2e} / 1000000 // in g/kWh, so 
> need to divide by 1e6 to get t/kWh

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"farmer_theta"' `"installs"' `"price_disc"' `"price_disc_spillover"'
>  `"spillover"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.319           .      -.319      -.3
> 19

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        6.63           .       6.63       6.
> 63

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.46           .       -.46       -.
> 46

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.05           .       -.05       -.
> 05

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.11           .       -.11       -.
> 11
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Emissions Factors */
.         ****************************************************
.         preserve

.                 
.         if "${spec_type}" == "baseline"{
.                 local dollar_year = ${policy_year}
.         }

.         
.         if "${spec_type}" == "current"{
.                 local dollar_year = ${current_year}
.         }

.         restore

.         
.         ****************************************************
.         /* 3b. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Solar assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Solar")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"cost_per_watt"' `"farmer_theta"' `"lifetime"' `"marginal_val"' `"ma
> rkup"' `"output"' `"system_capacity"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.                 
.                 local system_capacity = ${system_capacity}

.                 local annual_output = ${output} / (${system_capacit
> y} * 1000)

.                 local lifetime = ${lifetime}

.                 local federal_subsidy = 0.26

.                 local cost_per_watt = ${cost_per_watt}

.                 local marginal_val = ${marginal_val}

.                 local cost_per_watt_baseline = ${cost_per_watt} * (
> ${cpi_`dollar_year'}/${cpi_2022})

.         restore

.         
.         ****************************************************
.         /* 3c. Policy Specific Assumptions */
.         ****************************************************    
.         
.         ** Cost assumptions
.         local cost_per_install = 860 // bottom of page 7108 in 2014
> $

.         local avg_rebate_rate = 0 // Assume that there is no state 
> tax credit for US-wide specs

.         
.         
.         if "${spec_type}" == "baseline" {
.                 local federal_subsidy = 0.30 // 30% ITC
.                 local system_capacity =  6.972 // Using Gillingham 
> Hurdles & Steps paper
.                 local annual_output =  32.26 / 25 // kWh/Watt, outp
> ut per unit of installed capacity over 25-year lifespan (pg 302) of
>  Hurdles & Steps paper
.                 local avg_rebate_rate = 1.25 // From page 33
.                 local cost_per_watt = 4.63 * (${cpi_`dollar_year'}/
> ${cpi_2014}) // 2014 value from paper
.         }

.         
.         local price_disc = -`price_disc'

.         local price_disc_spillover = -`price_disc_spillover'

.         
.         local price_discount = `price_disc' / 4.63 // price discoun
> t from treatment, Table 2

.         local price_reduction = `price_discount' * `cost_per_watt' 
> // price discount in dollars per watt

.         
.         local price_discount_spill = `price_disc_spillover' / 4.63 
> // price discount from treatment

.         local price_reduction_spill = `price_discount_spill' * `cos
> t_per_watt' // price discount in dollars per watt

.         
.         if "${spec_type}" == "baseline_gen" {
.                 local federal_subsidy = 0.30 // 30% ITC
.                 local system_capacity =  ${system_capacity}
.                 local annual_output =  ${output} / (${system_capaci
> ty} * 1000)
.                 local avg_rebate_rate = 0
.                 local cost_per_watt = 5.40 // NREL 2012 cost
.         }

.         ****************************************************
.         /* 3d. Inflation Adjusted Values */
.         ****************************************************
.         *Convert rebate to current dollars
.         local adj_cost_per_install= `cost_per_install' * (${cpi_`do
> llar_year'}/${cpi_${policy_year}})

.         
.         
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. 
. local rebound_percent = (1 - `r') * 100 // for Latex

.         
. local installs = `installs' * 5.6 // treatment effect times number 
> of months

. local spillover = `spillover' * 5.6 // treatment effect times numbe
> r of months

.         
. local kwh_per_install = `system_capacity' * `annual_output' * 1000

. local annual_kwh = `kwh_per_install' * (`installs' + `spillover')

. 
. * Social Costs
. dynamic_grid `annual_kwh', starting_year(`dollar_year') lifetime(`l
> ifetime') discount_rate(`discount') ef("`replacement'") type("solar
> ") geo("${State}") grid_specify("yes") model("${grid_model}")

. local local_pollutants = `r(local_enviro_ext)'

. local global_pollutants = `r(global_enviro_ext)'

. local carbon = `r(carbon_content)'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local lca_annual = `annual_kwh' * `solar_lca_co2e' * (${sc_CO2_`dol
> lar_year'} * (${cpi_`dollar_year'}/${cpi_2020}))

.         
. local lca_ext = `lca_annual' + (`lca_annual'/`discount') * (1 - (1/
> (1+`discount')^(`lifetime' - 1 )))

. 
. // LCA externality
. local wtp_society_lca = -`lca_ext'

. 
. local q_carbon = ((`carbon' * `r') - (`annual_kwh' * `solar_lca_co2
> e' * `lifetime'))

. local q_carbon_mck = ((`carbon' * `r') - (`annual_kwh' * `solar_lca
> _co2e' * `lifetime'))

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. 
. local program_cost = `adj_cost_per_install' * `installs' // Price t
> o encourage installs

. local state_fisc_ext = `avg_rebate_rate' * `system_capacity' * 1000
>  * (`installs' + `spillover') // each additional subsidy costs CT $
> 1.25 per Watt

. local state_fisc_ext_n = `state_fisc_ext' / `program_cost' // for L
> atex

. 
. local federal_fisc_ext = ((`cost_per_watt' - `price_reduction') * `
> system_capacity' * 1000 * (`installs') * `federal_subsidy') + ///
>                                                  ((`cost_per_watt' 
> - `price_reduction_spill') * `system_capacity' * 1000 * (`spillover
> ') * `federal_subsidy')

. 
. local treated_muni_cost = (`cost_per_watt' - `price_reduction') * `
> system_capacity' * 1000 // for Latex

. local treated_muni_fed_fe = `treated_muni_cost' * `installs' * `fed
> eral_subsidy' // for Latex

. 
. local spill_muni_fed_fe = (`cost_per_watt' - `price_reduction_spill
> ') * `system_capacity' * 1000 * (`spillover') * `federal_subsidy' /
> / for Latex

. 
. local fed_fisc_ext_n = `federal_fisc_ext' / `program_cost' // for L
> atex

. 
. local annual_fe_t = `annual_kwh' * ${government_revenue_`dollar_yea
> r'_${State}}

. local gov_rev = ${government_revenue_`dollar_year'_${State}} // for
>  Latex

. 
. local fisc_ext_t = `annual_fe_t' + (`annual_fe_t' / `discount') * (
> 1 - (1 / (1 + `discount')^(`lifetime' - 1))) * `r'

. local fisc_ext_t_n = `fisc_ext_t' / `program_cost' // for Latex

. 
. if "${value_profits}" == "no" {
.         local fisc_ext_t = 0
. }

. 
. local fisc_ext_s = `state_fisc_ext' + `federal_fisc_ext'

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global' + 
> `wtp_society_lca') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. local fisc_ext_lr_n = `fisc_ext_lr' / `program_cost' // for Latex

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. local total_cost_n = `total_cost' / `program_cost' // for Latex

. 
. *************************
. /* 6. WTP Calculations */
. *************************
. * Society
. local wtp_society_raw = `local_pollutants' + `global_pollutants' - 
> `rebound_local' - `rebound_global'

. local wtp_glob = (`global_pollutants' * (1 - ${USShareGovtFutureSCC
> } * ${USShareFutureSSC})) / `program_cost' // for Latex

. local wtp_loc = `local_pollutants' / `program_cost' // for Latex

. local wtp_r_glob = (-`rebound_global' * (1 - ${USShareGovtFutureSCC
> } * ${USShareFutureSSC})) / `program_cost' // for Latex

. local wtp_r_loc = -`rebound_local' / `program_cost' // for Latex

. 
. local wtp_society = `wtp_society_raw' + `wtp_society_lca'

. 
. * Private
. local wtp_consumers = (`marginal_val' * `system_capacity' * 1000 * 
> `installs' * `price_reduction') + ///
>                                           (`marginal_val' * `system
> _capacity' * 1000 * `spillover' * `price_reduction_spill') // They 
> value half of the price reduction

. 
. local wtp_consumers_n = `wtp_consumers' / `program_cost' // for Lat
> ex

. 
. local wtp_cons_treat = `marginal_val' * `system_capacity' * 1000 * 
> `installs' * `price_reduction' // for Latex

. local wtp_cons_treat_n = `wtp_cons_treat' / `program_cost' // for L
> atex

. local wtp_cons_spill = `marginal_val' * `system_capacity' * 1000 * 
> `spillover' * `price_reduction_spill' // for Latex

. local wtp_cons_spill_n = `wtp_cons_spill' / `program_cost' // for L
> atex

. 
. local c_savings = 0

. 
. if "${value_savings}" == "yes" {
.         
.         local annual_savings = `annual_kwh' * ${kwh_price_`dollar_y
> ear'_${State}}
.         local c_savings = `annual_savings' + (`annual_savings'/`dis
> count') * (1 - (1/(1+`discount')^(`lifetime' - 1))) // No rebound e
> ffect here. 
. 
. }

. 
. local wtp_producers = ((`annual_kwh' * ${producer_surplus_`dollar_y
> ear'_${State}}) + ///
>                                           ((`annual_kwh' * ${produc
> er_surplus_`dollar_year'_${State}})/`discount') * (1 - (1/(1+`disco
> unt')^(`lifetime' - 1)))) * `r'

. 
. local wtp_prod = -`wtp_producers' / `program_cost' // for Latex

. 
. local markup = ${producer_surplus_`dollar_year'_${State}} // for La
> tex

. 
. 
. if "${value_profits}" == "no" {
.         local wtp_producers = 0
. }

. 
. local wtp_private = `wtp_consumers' - `wtp_producers'

. 
. 
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' + `c_savings' - ((`global
> _pollutants' + `wtp_society_lca' - `rebound_global') * ${USShareGov
> tFutureSCC} * ${USShareFutureSSC})  // not including learning-by-do
> ing

. local WTP_n = `WTP' / `program_cost' // for Latex

. 
. // local WTP_cc = `WTP' + `cost_wtp' + `env_cost_wtp'
. local WTP_USPres = `wtp_private' + `local_pollutants' - `rebound_lo
> cal'

. local WTP_USFut =      ${USShareFutureSSC}  * ((`global_pollutants'
>  - `rebound_global' + `wtp_society_lca') - ((`global_pollutants' + 
> `wtp_society_lca' - `rebound_global') * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1 - ${USShareFutureSSC}) * (`global_pollutants' - 
> `rebound_global' + `wtp_society_lca')

. 
. 
. local ratio = `wtp_glob' / (`fisc_ext_s' / `program_cost')

. 
. di in red "ratio is `ratio'"
ratio is 3.12377332273368

. pause

. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP' / `total_cost'

. 
. ****************************************
. /* 8. Cost-Effectiveness Calculations */
. ****************************************
. local energy_cost = ${kwh_price_2020_US} - ${producer_surplus_2020_
> US} - ${government_revenue_2020_US}

. 
. local energy_savings = `kwh_per_install' * `energy_cost' * (((1 + `
> discount')^`lifetime' - 1) / (`discount' * (1 + `discount')^(`lifet
> ime' - 1)))

. 
. local solar_cost = `adj_cost_per_install' + `cost_per_watt_baseline
> ' * (`system_capacity' * 1000)

. 
. local resource_cost = `solar_cost' - `energy_savings'

. local solarize_price = `solar_cost'

. local kwh_reduc = `kwh_per_install'

. 
. dynamic_grid `kwh_per_install', starting_year(2020) lifetime(`lifet
> ime') discount_rate(`discount') ef("marginal") type("solar") geo("U
> S") grid_specify("yes") model("midpoint")

. local carbon = `r(carbon_content)'

. 
. local q_carbon_mck = `carbon' - (`kwh_per_install' * `solar_lca_co2
> e' * `lifetime')

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. 
. local gov_carbon = (`carbon' * `r') - (`kwh_per_install' * `solar_l
> ca_co2e' * `lifetime')

. ****************
. /* 9. Outputs */
. ****************
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. global wtp_soc_`1' = `wtp_society'

. global wtp_cons_`1' = `wtp_consumers'

. global c_savings_`1' = `c_savings'

. global wtp_private_`1' = `wtp_private'

. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_prod_`1' = -`wtp_producers'

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_e_cost_`1' = `wtp_society_lca' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global q_CO2_mck_`1' = `q_carbon_mck'

. global resource_cost_`1' = `cost_per_watt_baseline' * (`system_capa
> city'*1000)

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_cons wtp_glob wtp_loc wtp_e_cost wtp_r_loc
>  wtp_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_cons", "wtp_glob" ,"wtp_loc", "wtp
> _e_cost", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "cost"

. global `1'_name "Solarize CT"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Consumers"' 2 `""Global" "Enviro""' 3 `""Local"
>  "Enviro""' 4 `""Enviro" "Cost""' 5 `""Rebound" "Local""' 6 `""Rebo
> und" "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cos
> t""' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Ru
> n""' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 1

. global color_group2_`1' = 5

. global color_group3_`1' = 7

. global color_group4_`1' = 7

. global cost_color_start_`1' = 10

. global color_group5_`1' = 13

. 
. global normalize_`1' = 1

. 
. 
. di "`1'"
solarize

. di `wtp_private'
-25194.054

. di `wtp_society_raw'
552915.61

. di `wtp_society_lca'
-57793.412

. di `CE'


. 
. di `global_pollutants'
608376.65

. di `local_pollutants'
79214.752

. di `wtp_consumers'
41201.675

. di `wtp_producers'
66395.729

. di `wtp_society'
495122.2

. di `WTP'
461664.24

. di `program_cost'
35999.466

. di `fisc_ext'


. di `total_cost'
255269.93

. di `MVPF'
1.8085336

. di `wtp_society_lca'
-57793.412

. di `WTP'
461664.24

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs wtp_cons_treat wtp_cons_spill wtp_con
> sumers system_capacity kwh_per_install annual_kwh wtp_glob wtp_loc 
> ///
>                               rebound_percent wtp_r_glob wtp_r_loc 
> markup wtp_prod WTP_n global_pollutants local_pollutants fed_fisc_e
> xt_n ///
>                                           state_fisc_ext_n program_
> cost gov_rev fisc_ext_t fisc_ext_t_n fisc_ext_lr_n total_cost_n MVP
> F wtp_cons_treat_n ///
>                                           wtp_cons_spill_n wtp_cons
> umers_n cost_per_watt treated_muni_cost treated_muni_fed_fe spill_m
> uni_fed_fe
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "program_cost", "global_pollutants", "local_po
> llutants", "wtp_cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

.         
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000083.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000084.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000085.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/solarize_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/solarize_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/solarize_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/solarize_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for solarize under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 93 of 100 (su_gas)
Number of observations (_N) was 0, now 0.
su_gas

. *******************************************************************
> ******************
. /*       1. Program: Gas taxes                                     
>                                       */
. *******************************************************************
> ******************
. 
. /*Su, Qing. 
> "The effect of population density, road network density, and conges
> tion on household gasoline consumption in US urban areas." 
> Energy Economics 33, no. 3 (2011): 445-452. */
. *https://www.sciencedirect.com/science/article/pii/S014098831000193
> 3
. */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: su_gas no uncorrected_v
> JK current

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.397           .      -.397      -.3
> 97

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

. global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

. global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

. 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

. 
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

. global wtp_prod_s_`1' = `r(wtp_prod_s)'

. global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

. 
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Su 201
> 1)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. global note_`1' = `"Publication: Su 2011" "Global Assumptions: ${sc
> c_ind_name}, ${dr_ind_name}" "Description: Gasoline Price of $`r(co
> nsumer_price_return)' (`dollar_year' dollars). `cc_note_gas_taxes' 
> "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000086.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000087.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000088.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/su_gas_current_estimates_0_replicati
    > ons.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/su_gas_current_estimates_0_replicati
    > ons.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/su_gas_current_unbounded_estimates_0
    > _replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/su_gas_current_unbounded_estimates_0
    > _replications.dta saved
Finished running for su_gas under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 94 of 100 (tiezzi_gas)
Number of observations (_N) was 0, now 0.
tiezzi_gas

. *************************************************************
. /* 1. Program: Gas taxes                                           
>                               */
. *************************************************************
. 
. /*Tiezzi, Silvia, and Stefano F. Verde. 
> "Differential demand response to gasoline taxes and gasoline prices
>  in the US." 
> Resource and Energy Economics 44 (2016): 71-91. */
. *https://www.sciencedirect.com/science/article/pii/S092876551600020
> 8
. 
. ********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.435           .      -.435      -.4
> 35

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from Tiezzi
>  and Verde 2016)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
.         }

. 
. global note_`1' = `"Publication: Tiezzi and Verde 2016" "Global Ass
> umptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline P
> rice of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_no
> te_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000089.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008a.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008b.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/tiezzi_gas_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/tiezzi_gas_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/tiezzi_gas_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/tiezzi_gas_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for tiezzi_gas under current
(5 vars, 5 obs)
spec_type    policy_year  run_year     description  E

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    policy_year  run_year     description  E
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    policy_year  run_year     description  E
1
Specification 1 of 1, program 95 of 100 (ug_deforest)
Number of observations (_N) was 0, now 0.
ug_deforest

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
fisc_ext_s
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008c.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008d.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008e.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ug_deforest_current_estimates_0_repl
    > ications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ug_deforest_current_estimates_0_repl
    > ications.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ug_deforest_current_unbounded_estima
    > tes_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/ug_deforest_current_unbounded_estima
    > tes_0_replications.dta saved
Finished running for ug_deforest under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 96 of 100 (wap)
Number of observations (_N) was 0, now 0.
wap

. *******************************************************************
> ******************
. /*       0. Program: Weatherization Assistance Program             
>                            */
. *******************************************************************
> ******************
. 
. /*
> Fowlie, Meredith, Michael Greenstone, and Catherine Wolfram. 
> "Do energy efficiency investments deliver? Evidence from the 
> weatherization assistance program." 
> The Quarterly Journal of Economics 133, no. 3 (2018): 1597-1644.
> * https://academic.oup.com/qje/article/133/3/1597/4828342?login=tru
> e
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: wap no uncorrected_vJK 
> current

. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"electricity_reduction"' `"gas_reduction"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         -.1           .        -.1        -
> .1

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.21           .       -.21       -.
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. local subsidy_cost = 5150

. local baseline_electricity_mmbtu = 2.13 * 12 // Table 4

. local baseline_electricity_kwh = `baseline_electricity_mmbtu' * 293
> .07107 // Converting mmbtu to kwh

. 
. local baseline_gas_mmbtu = 6.39 * 12 // Table 4

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Energy Reduction
. *Transform to levels
. local electricity_percent = 1 - exp(`electricity_reduction') 

. local gas_percent = 1 - exp(`gas_reduction') 

. 
. local kwh_reduction_annual = `electricity_percent' * `baseline_elec
> tricity_kwh'

. local mmbtu_reduction_annual = `gas_percent' * `baseline_gas_mmbtu'

. 
. weatherization_ado non-marginal, policy_year(${policy_year}) inflat
> ion_year(${policy_year}) spec(${emissions_factor}) geo(${State}) kw
> h_reduced(`kwh_reduction_annual') mmbtu_reduced(`mmbtu_reduction_an
> nual') ///
>                                                                  pr
> ogram_cost(`subsidy_cost') replacement(`replacement')
(3 vars, 7 obs)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'
(12 vars, 162 obs)

. di `r(MVPF)'
.91514826

. 
. ****************
. /* 5. Outputs */
. ****************
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. global wtp_soc_`1' = `r(wtp_society)'

. global wtp_marg_`1' = `r(marginal)' 

. global wtp_inf_`1' = `r(inframarginal)' 

. global c_savings_`1' = `r(c_savings)'

. global wtp_glob_`1' = `r(global_pollutants)'

. global wtp_loc_`1' = `r(local_pollutants)'

. global total_cost_`1' = `r(total_cost)'

. global wtp_prod_`1' = `r(corporate_loss)'

. global wtp_r_loc_`1' = `r(rebound_local)'

. global wtp_r_glob_`1' = `r(rebound_global)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global p_spend_`1' = `r(policy_spending)'

. global q_CO2_`1' = `r(q_carbon)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Michigan Weatherization"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008f.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008g.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008h.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_current_estimates_0_replications
    > .dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_current_estimates_0_replications
    > .dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_current_unbounded_estimates_0_re
    > plications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_current_unbounded_estimates_0_re
    > plications.dta saved
Finished running for wap under current
(4 vars, 5 obs)
spec_type    State        policy_year  description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    State        policy_year  description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    State        policy_year  description
1
Specification 1 of 1, program 97 of 100 (wap_mexico)
Number of observations (_N) was 0, now 0.
wap_mexico

. *******************************************************************
> *************
. /*  0. Program: Mexico Energy Efficient Housing                  */
. *******************************************************************
> *************
. /*
> HOW EFFECTIVE IS ENERGY-EFFICIENT HOUSING? EVIDENCE FROM A FIELD EX
> PERIMENT IN MEXICO
> 
> Lucas W. Davis, Sebastian Martinez, Bibiana Taboada
> 
> Working Paper 24581
> https://www.sciencedirect.com/science/article/abs/pii/S030438781831
> 2756
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"kwh_change"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         199           .        199        1
> 99
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local tons_per_gram = .000001

.         
.         /* Do not have reliable non-CO2 numbers for Mexico grid
>         local SO2_per_kwh = ${md_SO2_`dollar_year'_unweighted} * ($
> {cpi_`dollar_year'}/${cpi_${md_dollar_year}}) * 9.1 * `tons_per_gra
> m'
>         
>         local NOx_per_kwh = ${md_NOx_`dollar_year'_unweighted} * ($
> {cpi_`dollar_year'}/${cpi_${md_dollar_year}}) * 8.5 * `tons_per_gra
> m'
>         */
.         local SO2_per_kwh = 0

.         local NOx_per_kwh = 0

.         
.         local CO2_per_kwh = ${sc_CO2_`dollar_year'} * (${cpi_`dolla
> r_year'}/${cpi_2020}) * 431 * `tons_per_gram'

.         
.         local lifetime = 7 // Kotchen (2017) - we use the average o
> f the 3 year treatment effect for electricity and the observed 11 y
> ear for natural gas

.         
.         local adj_subsidy = ((650+850)/2) * (${cpi_`dollar_year'}/$
> {cpi_2016}) // Paper says that the cost is between 650 and 850

.         
.         local kwh_increased = `kwh_change' * 12/13 // Paper reports
>  13 month difference

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_inf = 0 // Changes were built into the new home without t
> he homeowner knowing

. local wtp_marg = `adj_subsidy' * 0.5

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = ((-1 * `kwh_increased' * (`SO2_per_kwh' + 
> `NOx_per_kwh'))/`discount') * (1 - (1/(1+`discount')^(`lifetime')))
>  * `r'

. 
. local global_pollutants = ((-1 * `kwh_increased' * `CO2_per_kwh')/`
> discount') * (1 - (1/(1+`discount')^(`lifetime'))) * `r'

. 
. local rebound_local = `local_pollutants' * (1-`r')

. local rebound_global = `global_pollutants' * (1-`r')

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = ((-1 * `kwh_increased' * `CO2_per_kwh' * `lifetime
> ')/(1/`tons_per_gram')) * `r'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `adj_subsidy'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Energy Efficiency Upgrades - Mexico"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
.42181901

. di `total_cost'
810.1018

. di `WTP'
341.71634

. di `wtp_cons'
404.43845

. di `local_pollutants'
0

. di `global_pollutants'
-79.522838

. di `rebound_global'
-15.575822

. di `rebound_local'
0

. di `wtp_society'
-63.947015

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
341.71634

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
-.01032851

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
q_carbon_mck
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008i.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008j.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008k.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_mexico_current_estimates_0_repli
    > cations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_mexico_current_estimates_0_repli
    > cations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_mexico_current_unbounded_estimat
    > es_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_mexico_current_unbounded_estimat
    > es_0_replications.dta saved
Finished running for wap_mexico under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 98 of 100 (wap_nudge)
Number of observations (_N) was 0, now 0.
wap_nudge

. *******************************************************************
> ******************
. /*       0. Program: Weatherization Assistance Program (Marketing I
> ncentive)        */
. *******************************************************************
> ******************
. 
. /*
> Fowlie, Meredith, Michael Greenstone, and Catherine Wolfram. 
> "Do energy efficiency investments deliver? Evidence from the 
> weatherization assistance program." 
> The Quarterly Journal of Economics 133, no. 3 (2018): 1597-1644.
> * https://academic.oup.com/qje/article/133/3/1597/4828342?login=tru
> e
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: wap_nudge no uncorrecte
> d_vJK current

. 
. *This is the MVPF for the weatherization marketing incentive
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"electricity_reduction"' `"encouragement"' `"gas_reduction"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         -.1           .        -.1        -
> .1

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .05           .        .05        .
> 05

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.21           .       -.21       -.
> 21
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.         ****************************************************
.         /* 3a. Policy Specific Assumptions */
.         ****************************************************    
.         local prop_marginal = `encouragement' / (`encouragement' + 
> 0.01) // Baseline 1% probability of getting getting weatherization 
> and increases to 6% with nudge

.         
.         local marketing_cost = (450000 / 435) * (1 / `prop_marginal
> ') // Costs $450,000 to get 435 households to sign up - https://pub
> s.aeaweb.org/doi/pdfplus/10.1257/aer.p20151011 // Need to scale thi
> s to get cost per marginal household

. 
.         local baseline_electricity_mmbtu = 2.13 * 12 // Table 2

.         local baseline_electricity_kwh = `baseline_electricity_mmbt
> u' * 293.07107 // Converting mmbtu to kwh

.         local baseline_gas_mmbtu = 6.39 * 12 // Table 2

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. *Energy Reduction
. *Transform to levels
. local electricity_percent = 1 - exp(`electricity_reduction') 

. local gas_percent = 1 - exp(`gas_reduction') 

. 
. local kwh_reduction_annual = `electricity_percent' * `baseline_elec
> tricity_kwh'

. local mmbtu_reduction_annual = `gas_percent' * `baseline_gas_mmbtu'

. 
. ****************
. /* 5. Outputs */
. ****************
. weatherization_ado non-marginal, policy_year(${policy_year}) inflat
> ion_year(${policy_year}) spec(${emissions_factor}) geo(${State}) kw
> h_reduced(`kwh_reduction_annual') mmbtu_reduced(`mmbtu_reduction_an
> nual') program_cost(`marketing_cost') replacement(`replacement') po
> licy("wap_marketing")
(3 vars, 7 obs)
`"corporate_tax"' `"marginal_prop"' `"ng_public"' `"retrofit_lifespan
> "' `"utility_profit"' `"utility_public"' `"val_given"'
(12 vars, 162 obs)

. 
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. global wtp_marg_`1' = `r(marginal)' 

. global wtp_inf_`1' = `r(inframarginal)' 

. global wtp_prod_`1' = `r(corporate_loss)'

. global wtp_glob_`1' = `r(global_pollutants)'

. global wtp_loc_`1' = `r(local_pollutants)'

. global wtp_r_loc_`1' = `r(rebound_local)'

. global wtp_r_glob_`1' = `r(rebound_global)'

. global c_savings_`1' = `r(c_savings)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global p_spend_`1' = `r(policy_spending)'

. global q_CO2_`1' = `r(q_carbon)'

. 
. global program_cost_`1' = `r(program_cost)'

. global total_cost_`1' = `r(total_cost)'

. global wtp_soc_`1' = `r(wtp_society)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_loc wtp_r_loc wt
> p_r_glob wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob" ,"wtp
> _loc", "wtp_r_loc", "wtp_r_glob", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Weatherization Nudge"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Global" "En
> viro""' 4 `""Local" "Enviro""' 5 `""Rebound" "Local""' 6 `""Rebound
> " "Global""' 7 `"Producers"' 8 `"Total WTP"' 10 `""Program" "Cost""
> ' 11 `""FE" "Subsidies""' 12 `""FE" "Taxes""' 13 `""FE" "Long-Run""
> ' 14 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 6

. global color_group3_`1' = 7

. global cost_color_start_`1' = 10

. global color_group4_`1' = 13

. 
. // global note_`1' = `"Publication: " "SCC: `scc'" "Description: Co
> st curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - 
> `s_def', Grid - `grid_def', Replacement - `replacement_def'," "Grid
>  Model - `grid_model_def', Electricity supply elasticity - `elec_su
> p_elas'"'
. global normalize_`1' = 1

. global note_`1' = `""'

. di `r(MVPF)'
.2797571

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
(1 real change made)
wtp_inf
(1 real change made)
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008l.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008m.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008n.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_nudge_current_estimates_0_replic
    > ations.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_nudge_current_estimates_0_replic
    > ations.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_nudge_current_unbounded_estimate
    > s_0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wap_nudge_current_unbounded_estimate
    > s_0_replications.dta saved
Finished running for wap_nudge under current
(8 vars, 5 obs)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type    description  month_start  month_stop
policy_year  year_start   year_stop    date_notes
1
Specification 1 of 1, program 99 of 100 (west_gas)
Number of observations (_N) was 0, now 0.
west_gas

. *******************************************************************
> ******************
. /*       0. Program: Gas taxes        */
. *******************************************************************
> ******************
. 
. /*
> West, Sarah E., and Roberton C. Williams III. 
> "Optimal taxation and cross-price effects on labor supply: estimate
> s of the optimal gas tax." 
> Journal of public Economics 91, no. 3-4 (2007): 593-617.
> * https://www.sciencedirect.com/science/article/pii/S00472727060011
> 62
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: west_gas no uncorrected
> _vJK current

. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"e_demand_gas"' `"farmer_theta"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1   -.4578931           .  -.4578931  -.45789
> 31

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.421           .      -.421      -.4
> 21
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. local farmer_theta = -0.421

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "${spec_type}" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Computations */
. *********************************
. * Run gas_tax.ado <-- Performs all necessary calculations for a gas
>  tax.
. run_gas_tax `dollar_year', elas_demand(`e_demand_gas') farmer_theta
> (`farmer_theta')

. 
. *********************************
. /* 4. Save Results */
. *********************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `r(MVPF)'

. global MVPF_no_cc_`1' = `r(MVPF_no_cc)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global WTP_`1' = `r(WTP)'

. 
. global wtp_soc_`1' = `r(gas_soc)' + `r(ev_stat_gas)'

.         global wtp_soc_l_`1' = `r(gas_soc_l)' + `r(ev_stat_gas_l)'

.         global wtp_soc_l_po_`1' = `r(gas_soc_l_pollution)' + `r(ev_
> stat_gas_l)'

.         global wtp_soc_l_dr_`1' = `r(gas_soc_l_driving)'

.                 assert round(${wtp_soc_l_po_`1'} + ${wtp_soc_l_dr_`
> 1'}, 0.1) == round(${wtp_soc_l_`1'}, 0.1)

.         global wtp_soc_g_`1' = `r(gas_soc_g)' + `r(ev_stat_gas_g)' 
>      

.         
. global ev_stat_gas_`1' = `r(ev_stat_gas)'

.         global ev_stat_gas_l_`1' = `r(ev_stat_gas_l)'

.         global ev_stat_gas_g_`1' =  `r(ev_stat_gas_g)'  

.                 
. global cost_wtp_`1' = `r(ev_sub_c)'

. global env_cost_wtp_`1' = `r(ev_dyn_gas)'       

. global env_cost_wtp_local_`1' = `r(ev_dyn_gas_l)'

. global env_cost_wtp_global_`1' = `r(ev_stat_gas_g)'     

.  
. global wtp_cons_`1' = `r(wtp_cons)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod_s)'

.         global wtp_prod_u_`1' = `r(wtp_prod_u)' 

. 
. if "${value_profits}" == "no" {
. 
.         global wtp_prod_`1' = 0 
.                 global wtp_prod_s_`1' = 0
.                 global wtp_prod_u_`1' = 0
. }

. 
. assert round(${wtp_prod_`1'}, 0.001) == round(${wtp_prod_u_`1'} + $
> {wtp_prod_s_`1'}, 0.001)

. 
. assert round(${WTP_`1'}, 0.0001) == round(${wtp_cons_`1'} + ${wtp_p
> rod_`1'} + ${wtp_soc_`1'} + ${env_cost_wtp_`1'} + ${cost_wtp_`1'}, 
> 0.0001) 

. 
. global program_cost_`1' = `r(program_cost)'

. global p_spend_`1' = `r(p_spend)'

. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_s_`1' = `r(fisc_ext_s)'

. global fisc_ext_lr_`1' = `r(fisc_ext_lr)'

. global cost_`1' = `r(cost)'

.         global total_cost_`1' = `r(cost)'

. 
. assert round(${cost_`1'}, 0.0001) == round(${program_cost_`1'} + ${
> fisc_ext_t_`1'} + ${fisc_ext_s_`1'} + ${fisc_ext_lr_`1'}, 0.0001)

. assert round(${MVPF_`1'}, 0.0001) == round(${WTP_`1'}/${cost_`1'}, 
> 0.0001)

. 
. global q_CO2_`1' = `r(q_CO2)'

. global q_CO2_no_`1' = `r(q_CO2_no)'

. global q_CO2_mck_`1' = `r(q_CO2_mck)'

. global q_CO2_mck_no_`1' = `r(q_CO2_mck_no)'

. 
. global gov_carbon_`1' = `r(gov_carbon)'

. global resource_ce_`1' = `r(resource_ce)'

. global q_carbon_mck_`1' = `r(q_carbon_mck)'

. global semie_`1' = `r(semi_e_demand_gas_tax)'

. 
. global wtp_comps_`1' wtp_cons wtp_soc_g wtp_soc_l_po wtp_soc_l_dr e
> nv_cost_wtp cost_wtp  wtp_prod_s wtp_prod_u WTP 

. 
. global wtp_comps_`1'_commas "wtp_cons", "wtp_soc_g", "wtp_soc_l_po"
> , "wtp_soc_l_dr", "env_cost_wtp", "cost_wtp", "wtp_prod_s"

. global wtp_comps_`1'_commas2 "wtp_prod_u", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_l
> r cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ex
> t_s", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 "Transfer" 2 `""Global" "Env""' 3 `""Local" "Env"
> "' 4 `" "Driving" "' 5 `""Dynamic" "Env""' 6 `""Dynamic" "Price""' 
> 7 `""Gasoline" "Producers" "' 8 `"Utilities"' 9 `""Total" "WTP""' 1
> 1 `""Program" "Cost""' 12 `"Taxes"' 13 `" "Subsidies" "' 14 `" "Cli
> mate" "FE" "' 15 `""Govt" "Cost""'

.                         
. global color_group1_`1' = 1

. global color_group2_`1' = 4

. global color_group3_`1' = 6

. global color_group4_`1' = 8

. global cost_color_start_`1' = 11

. global color_group5_`1' = 14

. 
.         global `1'_ep = "N"

.         global `1'_name "Gasoline Tax (Price Elasticity from West a
> nd Williams 2007)"

. 
.         if "${gas_tax_cc_toggle}" == "yes" {
.                 
.                 local cc_note_gas_taxes = "Cost curve enabled."
.                 
.         }

.         else {
.                 
.                 local cc_note_gas_taxes = "Cost curve disabled."
. 
. }

. 
. global note_`1' = `"Publication: West and Williams 2007" "Global As
> sumptions: ${scc_ind_name}, ${dr_ind_name}" "Description: Gasoline 
> Price of $`r(consumer_price_return)' (`dollar_year' dollars). `cc_n
> ote_gas_taxes' "'

. 
end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
(1 real change made)
env_cost_wtp
(1 real change made)
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
wtp_loc
(1 real change made)
wtp_r_glob
(1 real change made)
wtp_r_loc
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
(1 real change made)
wtp_prod_u
(1 real change made)
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
(1 real change made)
wtp_soc_l
(1 real change made)
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
(1 real change made)
wtp_soc_l_dr
(1 real change made)
(1 real change made)
gov_carbon
(1 real change made)
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
(1 real change made)
q_CO2_mck_no
(1 real change made)
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008o.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008p.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008q.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/west_gas_current_estimates_0_replica
    > tions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/west_gas_current_estimates_0_replica
    > tions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/west_gas_current_unbounded_estimates
    > _0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/west_gas_current_unbounded_estimates
    > _0_replications.dta saved
Finished running for west_gas under current
(6 vars, 5 obs)
spec_type     policy_year   State
emissions_~r  ef_region     description

Duplicates in terms of all variables

(0 observations are duplicates)
  5
spec_type     policy_year   State
emissions_~r  ef_region     description
(4 observations deleted)
(0 observations deleted)
1
(0 observations deleted)
spec_type     policy_year   State
emissions_~r  ef_region     description
1
Specification 1 of 1, program 100 of 100 (wisc_rf)
Number of observations (_N) was 0, now 0.
wisc_rf

. *******************************************************************
> ******************
. /*       0. Program: Wisconsin Residential Weatherization          
>                    */
. *******************************************************************
> ******************
. 
. /*
> Measuring the Welfare Effects of Residential Energy Efficiency Prog
> rams
> Hunt Allcott and Michael Greenstone
> NBER Working Paper No. 23386
> */
. *https://www.nber.org/system/files/working_papers/w23386/w23386.pdf
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. 
. local replacement = "${replacement}"

. global spec_type = "`4'"

. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draw
> s/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${
> name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`
> var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" != "yes" {
.         preserve
.                 qui import excel "${code_files}/2a_causal_estimates
> _papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") 
> firstrow
.                 levelsof estimate, local(estimates)
`"audit_elec"' `"audit_gas"' `"investment_elec"' `"investment_gas"'
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.949           .      -.949      -.9
> 49

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .064           .       .064       .0
> 64

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.193           .      -.193      -.1
> 93

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        -.46           .       -.46       -.
> 46
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
. rebound ${rebound}
(12 vars, 162 obs)

. local r = `r(r)'

. local r_ng = `r(r_ng)'

. 
. *********************************
. /* 4. Intermediate Calculations */
. *********************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${current_year}
. }

. 
. // For 2020 MVPF, we scale the paper's MVPFs by our set of external
> ity assumptions
.         
.         *Get the weights of electricity and natural gas reduced (pe
> r mmbtu)
.         local elec_weight = -1 * (0.15 * `audit_elec' + 0.02 * `inv
> estment_elec') * 0.003412

.         local gas_weight = -1 * (0.15 * `audit_gas' + 0.02 * `inves
> tment_gas') * 0.1

.         
.         local elec_weight_adj = `elec_weight' / (`elec_weight' + `g
> as_weight')

.         local gas_weight_adj = `gas_weight' / (`elec_weight' + `gas
> _weight')

. 
. 
.         *************************
.         /* WTP Calculations */
.         *************************
.         
.         // Using markups in paper from Table 2
.         local paper_markup_adj = 2.75 * `gas_weight_adj' + 29.73 * 
> `elec_weight_adj'

. 
.         local our_markup_adj = ${psurplus_mmbtu_2020_US} * `gas_wei
> ght_adj' + (${producer_surplus_2020_US} * (1 / 0.003412)) * `elec_w
> eight_adj'

. 
.         local profit_loss = (`our_markup_adj' / `paper_markup_adj')
>  * 0.21

. 
.         // WTP Prod adjusting for taxes (72% private utilities + 10
> % tax rate)
.         local prod_loss = `profit_loss' * 0.72 * 0.9

.         
.         // Local Damages - Using damages from Table A8
.         local paper_local_enviro = 1.0 * `gas_weight_adj' + 0.0678 
> * (1 / 0.003412) * `elec_weight_adj'

. 
.         local our_local_enviro = (0) * `gas_weight_adj' + (${local_
> uniform_US_2020} * (1 / 0.003412)) * `elec_weight_adj'

. 
.         // Global Damages - Using damages from Table A8
.         local paper_global_enviro = 15.3 * `gas_weight_adj' + 0.106
> 6 * (1 / 0.003412) * `elec_weight_adj'

. 
.         local our_global_enviro = (${global_mmbtu_2020}) * `gas_wei
> ght_adj' + (${global_uniform_US_2020} * (1 / 0.003412)) * `elec_wei
> ght_adj'

. 
.         // Final Local and Global Damages
.         local local_pollutants = 0.87 * (`paper_local_enviro' / (`p
> aper_local_enviro' + `paper_global_enviro')) * (`our_local_enviro' 
> / `paper_local_enviro')

.         
.         local global_pollutants = 0.87 * (`paper_global_enviro' / (
> `paper_local_enviro' + `paper_global_enviro')) * (`our_global_envir
> o' / `paper_global_enviro')

.         
.         
.         local wtp_glob = `global_pollutants' * ((1 - ${USShareFutur
> eSSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}))

. 
.         // Share of Global Damages that is Natural Gas
.         local global_ng = ((${global_mmbtu_2020}) * `gas_weight_adj
> ' * `elec_weight_adj') / `our_global_enviro'

.         
.         // Adding in Rebound Effects
.         local rebound_global = ((1 - `global_ng') * `global_polluta
> nts' * (1 - `r')) + (`global_ng' * `global_pollutants' * (1 - `r_ng
> '))

.         local rebound_global = ((1 - `global_ng') * `global_polluta
> nts' * (1 - `r')) + (`global_ng' * `global_pollutants' * (1 - `r_ng
> '))

.         local wtp_r_glob = `rebound_global' * ((1 - ${USShareFuture
> SSC}) + ${USShareFutureSSC} * (1 - ${USShareGovtFutureSCC}))

.         
.         local rebound_local = `local_pollutants' * (1 - `r')

. 
.         local rebound_local = `local_pollutants' * (1 - `r')

. 
.         // Getting Transfer value from paper
.         local investment_distortion = -0.91 * ${cpi_2020}/${cpi_${p
> olicy_year}}

.         local consumer_surplus = 10.79 * ${cpi_2020}/${cpi_${policy
> _year}}

.         local wtp_cons = `consumer_surplus' + `investment_distortio
> n'

.         di in red "wtp consumers is `wtp_cons'"
wtp consumers is 10.97822074933892

. 
.         local wtp_society = `local_pollutants' - `rebound_local' + 
> `global_pollutants' - `rebound_global'

.         
.         local c_savings = 0

.         
.         if "${value_profits}" == "no" {
.                 local prod_loss = 0
.                 local profit_loss = 0
.         }

.         
.         * Total WTP
.         local WTP = `wtp_cons' + `wtp_society' - `prod_loss' + `c_s
> avings' - ((`global_pollutants' - `rebound_global') * ${USShareFutu
> reSSC} * ${USShareGovtFutureSCC})

.         
.         
.         // Quick decomposition
.         local WTP_USPres = `wtp_cons' + `local_pollutants' - `prod_
> loss' - `rebound_local' + `c_savings'

.         local WTP_USFut  =      ${USShareFutureSSC}  * ((`global_po
> llutants' - `rebound_global') - ((`global_pollutants' - `rebound_gl
> obal') * ${USShareGovtFutureSCC}))

.         local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pol
> lutants' - `rebound_global')

.         
.         **************************
.         /* Cost Calculations  */
.         **************************
.         
.         local program_cost = 11.35 * ${cpi_2020}/${cpi_${policy_yea
> r}}

.         
.         local fisc_ext_t = (`profit_loss' * 0.72 * 0.1) + (`profit_
> loss' * 0.28)

.         
.         local fisc_ext_s = 0

.         
.         local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_gl
> obal') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

.         
.         local total_cost = `program_cost' + `fisc_ext_t' + `fisc_ex
> t_lr'

. 
.         local MVPF = `WTP' / `total_cost'

. 
. // For in-context estimates, we use the paper's MVPF as is
. if "${spec_type}" == "baseline" {
.         local wtp_cons = 10.79 - 0.91
.         local prod_loss = 0.21
.         
.         local local_pollutants = 0.87 * (`paper_local_enviro' / (`p
> aper_local_enviro' + `paper_global_enviro'))
.         local global_pollutants = 0.87 * (`paper_global_enviro' / (
> `paper_local_enviro' + `paper_global_enviro'))
.         local wtp_glob = `global_pollutants'
.         
.         local rebound_local = 0
.         local rebound_global = 0
.         local wtp_r_glob = `rebound_global'
.         local c_savings = 0
.         
.         local wtp_society = `local_pollutants' - `rebound_local' + 
> `global_pollutants' - `rebound_global'
.         
.         local WTP = `wtp_cons' + `wtp_society' - `prod_loss' + `c_s
> avings'
. 
.         local WTP_USPres = `wtp_cons' + `local_pollutants' - `prod_
> loss' - `rebound_local' + `c_savings'
.         local WTP_USFut  =      ${USShareFutureSSC}  * (`global_pol
> lutants' - `rebound_global')
.         local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pol
> lutants' - `rebound_global')
.         
.         local total_cost = 11.35
.         local program_cost = 11.35
.         local fisc_ext_t = 0
.         local fisc_ext_s = 0
.         local fisc_ext_lr = 0
.         local MVPF = (`WTP') / `total_cost'
. }

. 
. ********************************
. /* 5. Cost Effectiveness */
. ********************************
. local energy_cost = ${energy_cost}

. local ng_cost = 3.43 * 1.038 // Convert thousand cubic feet to mmbt
> u, conversion factor form EIA, from ng_citygate tab in policy_categ
> ory_assumptions_MASTER

. local retrofit_lifespan = 20

. local kwh_reduced = -1 * (`audit_elec' + `investment_elec') * 365

. di in red "kwh reduced is `kwh_reduced'"
kwh reduced is 416.83

. local mmbtu_reduced = -1 * (`audit_gas' + `investment_gas') * 0.1 *
>  365

. di in red "mmbtu reduced is `mmbtu_reduced'"
mmbtu reduced is 14.454

. 
. local energy_savings = ((`kwh_reduced' * `energy_cost') + `mmbtu_re
> duced' * `ng_cost') + (((`kwh_reduced' * `energy_cost') + `mmbtu_re
> duced' * `ng_cost') / `discount') * (1 - (1 / (1 + `discount')^(`re
> trofit_lifespan' - 1)))

. di in red "energy savings is `energy_savings'"
energy savings is 1372.743003943292

. 
. dynamic_grid `kwh_reduced', starting_year(`dollar_year') lifetime(`
> retrofit_lifespan') discount_rate(`discount') ef("`replacement'") t
> ype("uniform") geo("${State}") grid_specify("yes") model("${grid_mo
> del}")

. 
. local carbon = `r(carbon_content)' + ((${global_mmbtu_`dollar_year'
> } * `mmbtu_reduced' * `retrofit_lifespan')/${sc_CO2_`dollar_year'})

. di in red "carbon is `carbon'"
carbon is 18.7602682898993

. 
. local wap_cost = (1486 + 400) * (${cpi_2020} / ${cpi_2013}) // From
>  page 12 + cost of audit

. di in red "wap cost is `wap_cost'"
wap cost is 2095.640114701741

.         
. local resource_cost = `wap_cost' - `energy_savings'

. di in red "resource cost is `resource_cost'"
resource cost is 722.8971107584489

. 
. local q_carbon_mck = `carbon'

.         
. local resource_ce = `resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is 38.5334100551037

. 
. 
. ****************
. /* 6. Outputs */
. ****************
. 
. di `MVPF'
.91981317

. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global wtp_cons_`1' = `wtp_cons' 

. global wtp_prod_`1' = `prod_loss'

. global wtp_glob_`1' = `wtp_glob'

. global wtp_loc_`1' = `local_pollutants'

. global wtp_r_loc_`1' = `rebound_local'

. global wtp_r_glob_`1' = `wtp_r_glob'

. 
. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' = `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `program_cost'

. global q_CO2_`1' = `carbon'

. 
. global program_cost_`1' = `program_cost'

. global total_cost_`1' = `total_cost'

. global wtp_soc_`1' = `wtp_society'

. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. /*
> ** for waterfall charts
> global wtp_comps_`1' wtp_marg wtp_inf wtp_prod wtp_glob wtp_loc wtp
> _r_loc wtp_r_glob c_savings WTP
> global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_prod", "wtp
> _glob" ,"wtp_loc", "c_savings", "wtp_r_loc", "wtp_r_glob", "WTP"
> 
> global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost
> global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"
> global `1'_name "Wisconsin Weatherization"
> global `1'_ep = "N"
> 
> global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Producers"' 
> 4 `""Global" "Enviro""' 5 `""Local" "Enviro""' 6 `""Rebound" "Local
> ""' 7 `""Rebound" "Global""' 8 `""Consumer" "Savings""' 9 `"Total W
> TP"' 11 `""Program" "Cost""' 12 `""FE" "Subsidies""' 13 `""FE" "Tax
> es""' 14 `""FE" "Long-Run""' 15 `"Total Cost"' ///
> 
> *color groupings
> global color_group1_`1' = 3
> global color_group2_`1' = 5
> global color_group3_`1' = 8
> global cost_color_start_`1' = 11
> global color_group4_`1' = 14
> 
> global note_`1' = `"Publication: " "SCC: `scc'" "Description: Cost 
> curve - `cc_def', MVPF definition - `mvpf_def', Subsidy value - `s_
> def', Grid - `grid_def', Replacement - `replacement_def'," "Grid Mo
> del - `grid_model_def', Electricity supply elasticity - `elec_sup_e
> las'"'
> global normalize_`1' = 1

end of do-file
98
98
Number of observations (_N) was 0, now 98.
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
(98 missing values generated)
1
MVPF
variable component_type was str1 now str4
(1 real change made)
(1 real change made)
MVPF_no_cc
variable component_type was str4 now str10
(1 real change made)
cost
(1 real change made)
(1 real change made)
WTP
(1 real change made)
(1 real change made)
program_cost
variable component_type was str10 now str12
(1 real change made)
(1 real change made)
total_cost
(1 real change made)
(1 real change made)
beh_fisc_ext
(1 real change made)
utility_fisc_ext
variable component_type was str12 now str16
(1 real change made)
gas_fisc_ext
(1 real change made)
fed_fisc_ext
(1 real change made)
state_fisc_ext
(1 real change made)
WTP_USPres
(1 real change made)
(1 real change made)
WTP_USFut
(1 real change made)
(1 real change made)
WTP_RoW
(1 real change made)
(1 real change made)
WTP_USTotal
(1 real change made)
enviro_mvpf
(1 real change made)
cost_mvpf
(1 real change made)
firm_mvpf
(1 real change made)
cost_wtp
(1 real change made)
env_cost_wtp
(1 real change made)
marginal
(1 real change made)
infmarg
(1 real change made)
wtp_private
(1 real change made)
wtp_soc
(1 real change made)
(1 real change made)
wtp_no_ice
(1 real change made)
wtp_yes_ev
(1 real change made)
wtp_yes_hev
(1 real change made)
wtp_soc_rbd
(1 real change made)
wtp_yes_ev_local
(1 real change made)
wtp_no_ice_local
(1 real change made)
env_cost_wtp_l
(1 real change made)
wtp_soc_rbd_l
(1 real change made)
wtp_yes_ev_g
(1 real change made)
wtp_no_ice_g
(1 real change made)
env_cost_wtp_g
(1 real change made)
wtp_soc_rbd_g
(1 real change made)
wtp_marg
(1 real change made)
wtp_inf
(1 real change made)
wtp_glob
(1 real change made)
(1 real change made)
wtp_loc
(1 real change made)
(1 real change made)
wtp_r_glob
(1 real change made)
(1 real change made)
wtp_r_loc
(1 real change made)
(1 real change made)
wtp_e_cost
(1 real change made)
WTP_cc
(1 real change made)
wtp_install
(1 real change made)
wtp_prod
(1 real change made)
(1 real change made)
wtp_prod_s
(1 real change made)
wtp_prod_u
(1 real change made)
wtp_cons
(1 real change made)
(1 real change made)
wtp_deal
(1 real change made)
admin_cost
(1 real change made)
wtp_permits
(1 real change made)
wtp_abatement
(1 real change made)
permitrev
(1 real change made)
wtp_no_leak
(1 real change made)
wtp_leak
(1 real change made)
wtp_soc_g
(1 real change made)
wtp_soc_l
(1 real change made)
fisc_ext_t
(1 real change made)
(1 real change made)
fisc_ext_s
(1 real change made)
(1 real change made)
fisc_ext_lr
(1 real change made)
(1 real change made)
q_CO2
(1 real change made)
(1 real change made)
q_CO2_no
(1 real change made)
p_spend
(1 real change made)
(1 real change made)
ev_sub_c
(1 real change made)
ev_sub_c_row
(1 real change made)
ev_sub_c_us
(1 real change made)
ev_sub_env
(1 real change made)
ev_sub_cost
(1 real change made)
profits_fisc_e
(1 real change made)
wtp_soc_l_po
(1 real change made)
wtp_soc_l_dr
(1 real change made)
gov_carbon
(1 real change made)
resource_ce
(1 real change made)
(1 real change made)
q_carbon_mck
(1 real change made)
(1 real change made)
semie
(1 real change made)
pass_through
(1 real change made)
permitrev_new
(1 real change made)
permitrev_ex
(1 real change made)
fiscalext
(1 real change made)
firm_cost_wtp
(1 real change made)
c_savings
(1 real change made)
resource_cost
(1 real change made)
q_CO2_mck
(1 real change made)
q_CO2_mck_no
(1 real change made)
wtp_ctr
(1 real change made)
gas_corp_fisc_e
(1 real change made)
epsilon
(1 real change made)
transfer
(1 real change made)
enviro_wtp
(1 real change made)
cost_curve
(1 real change made)
profits
(1 real change made)
subsidies
(1 real change made)
taxes
(1 real change made)
wtp_batt
(1 real change made)
wtp_local_w_r
(1 real change made)
wind_g_wf
(1 real change made)
wind_l_wf
(1 real change made)
(98 missing values generated)
(1 real change made)
(1 real change made)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008r.tmp saved
    as .dta format
col           component~ue  component_sd  assumptions
program       l_component   infinity      correlation
component~pe  u_component   component_~t  replications
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008s.tmp saved
    as .dta format
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00008t.tmp saved
    as .dta format
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wisc_rf_current_estimates_0_replicat
    > ions.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wisc_rf_current_estimates_0_replicat
    > ions.dta saved
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wisc_rf_current_unbounded_estimates_
    > 0_replications.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/3_bootstrap_draws/2024-11-15_16-20-36__full_current_no_
    > lbd_mira_uncorrected_vJK/wisc_rf_current_unbounded_estimates_
    > 0_replications.dta saved
Finished running for wisc_rf under current

.  
. 
. *Throw errors if things didn't run
. if _rc != 1 {
.         global error_progs = "`error_progs'"
.         if "`error_progs'" != "" di as err "Finished running but th
> e following programs threw errors: `error_progs'"
.         else di in red "Finished running with no errors"
Finished running with no errors
. }

. 
. 
. 
end of do-file
SECTION 3: COMPILE ESTIMATES & INFERENCE
compile programs is CPP_aj CPP_pj PER ac_mex audit_nudge baaqmd bento
> _gas bev_state bev_state_i bmm_crude bolk_France bolk_Germany bolk_
> Spain bolk_UK bunker_fuel c4a_cw c4a_dw c4a_fridge c4c_federal c4c_
> texas ca_cnt ca_electric cafe_as cafe_dk cafe_j care cog_gas cookst
> oves ct_solar cw_datta dahl_diesel dk_gas dorsey_itc dw_datta es_in
> cent esa_fridge ethanol ets ets_c federal_ev food_labels fridge_dat
> ta fridge_mex gelman_gas h_gas_01_06 h_gas_75_80 hancevic_rf her_co
> mpiled hev_usa_i hev_usa_s hitaj_ger hitaj_ptc hughes_csi hybrid_cr
>  ihwap_hb ihwap_lb ihwap_nb india_cs india_offset jet_fuel k_gas_15
> _22 k_gas_89_14 levin_gas li_gas manzan_gas metcalf_ptc muehl_efmp 
> mx_deforest ne_solar nicolini_eu nudge_ger nudge_qatar opower_e opo
> wer_ng park_gas pless_ho pless_tpo rao_crude rebate_es redd_offset 
> retrofit_res rggi rice_in_st rice_in_up rps russo_crp sent_ch_gas s
> hirmali_ptc sl_offset small_gas_lr small_gas_sr solarize su_gas tie
> zzi_gas ug_deforest wap wap_mexico wap_nudge west_gas wisc_rf
compile loop modes is current
current
current
current
current
current
(variable program was str6, now str11 to accommodate using data's
       values)
current
current
current
current
current
current
current
(variable program was str11, now str12 to accommodate using data's
       values)
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
current
(file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/2024-11-15_16-20-36__full_current_no_lbd_mira
    > /compiled_results_all_uncorrected_vJK.dta not found)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/2024-11-15_16-20-36__full_current_no_lbd_mira
    > /compiled_results_all_uncorrected_vJK.dta saved

. 
. noi di "== END OF SCRIPT =="
== END OF SCRIPT ==

. beep

. 
. 
end of do-file

.         
. BREAK
command BREAK is unrecognized
r(199);

end of do-file

r(199);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/fips_apeep.csv not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/plant_id_2020.xlsx not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/generation_by_plant_2020.xlsx
not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

. 
. 
.         ***********************************************************
> **
.         /* 1d. Population.                                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/pop2020.xlsx"
> , first clear
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/pop2020.xlsx not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/md_Area_2014_VSL2006.csv not
found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/AP3 Raw Data/data_Low_2014.csv
not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/md_Area_2014_VSL2006.csv not
found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/md_Low_2014_VSL2006.csv not
found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/AP3 Raw
Data/data_Medium_2014.csv not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/AP3 Raw
Data/data_Medium_2014.csv not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/AP3 Raw
Data/data_Tall1_2014.csv not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/md_Tall1_2014_VSL2006.csv not
found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 565 obs)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/1_assumptions/marginal_damages/AP3 Raw
    Data/id_Tall1.dta not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 565 obs)
fips already numeric; no replace
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/AP3 Raw
Data/data_Tall2_2014.csv not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 565 obs)
fips already numeric; no replace
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/AP3 Raw
Data/data_Tall2_2014.csv not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 565 obs)
fips already numeric; no replace
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 91 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp saved
    as .dta format
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
Package/1_assumptions/marginal_damages/md_Tall2_2014_VSL2006.csv not
found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 565 obs)
fips already numeric; no replace
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 91 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 91 obs)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/1_assumptions/marginal_damages/AP3 Raw
    Data/id_Tall2.dta not found
r(601);

end of do-file

r(601);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\data_cleaning\md
> _ap3.do"

. *************************************************************
. /* 1. Save Data Sets.                                    */
. *************************************************************
. 
.         ***********************************************************
> **
.         /* 1a. County Orderings for AP3.                           
>               */
.         ***********************************************************
> **
.         import delimited "${assumptions}/marginal_damages/fips_apee
> p.csv", clear
(encoding automatically selected: ISO-8859-1)
(5 vars, 3,109 obs)

.                 gen merge_id = _n

.                         qui sum merge_id 

.                                 assert r(max) == 3109 // AP3 has da
> ta for 3,109 counties.

.         tempfile ap3_counties_merge

.                 save "`ap3_counties_merge'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 1b. VMT by County.                                    */
.         ***********************************************************
> **
.         import excel "${policy_assumptions}", first clear sheet("vm
> t_by_county")
(16 vars, 3,143 obs)

.                 drop Share* *buses* Notes *Region

.                 
.         ds *vmt
passenger_~t  truck_vmt

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = "0" if `var' == "-"
  3.                         destring `var', replace
  4.                 
.         }
(4 real changes made)
passenger_car_vmt: all characters numeric; replaced as double
(4 real changes made)
truck_vmt: all characters numeric; replaced as double

.         gen vmt_total = passenger_car_vmt + truck_vmt   

.                 drop *car* *truck*

. 
.         destring StateandCountyFIPSCode, replace
StateandCountyFIPSCode: all characters numeric; replaced as long

.                 rename StateandCountyFIPSCode fips

.                 rename CountyName county_check

.                         replace county_check = strlower(county_chec
> k)
(3,143 real changes made)

.                 rename PostalStateCode state

. 
.         tempfile vmt_weights

.                 save "`vmt_weights'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000002.tmp saved
    as .dta format

.                 
.         ***********************************************************
> **
.         /* 1c. Electricity Generation by County.                   
>                       */
.         ***********************************************************
> **   
.         import excel "${assumptions}/marginal_damages/plant_id_2020
> .xlsx", first clear
(13 vars, 12,636 obs)

.                 tempfile plant_id_save

.                         save "`plant_id_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000003.tmp saved
    as .dta format

.         
.         import excel "${assumptions}/marginal_damages/generation_by
> _plant_2020.xlsx", first clear
(15 vars, 15,115 obs)

.                 drop if PlantId == 99999
(162 observations deleted)

.                         merge m:1 PlantId using "`plant_id_save'", 
> nogen noreport keep(3)
(variable PlantName was str55, now str56 to accommodate using
       data's values)

.                         
.         drop if inlist(State, "AK", "HI")
(342 observations deleted)

.                 gen county = subinstr(strlower(County), " ", "", .)

.         
.         rename State state

.                 drop Zip County Street* Utility* Grid* PlantId

.                 drop if TotalFuelConsumptionQuantity == 0
(8,803 observations deleted)

.                         drop if inlist(ReportedFuelTypeCode, "WAT")
(37 observations deleted)

.                 
.         collapse (sum) TotalFuelConsumptionMMBtu (firstnm) state, b
> y(county)

.                 drop if TotalFuelConsumptionMMBtu  < 0 // Changes n
> o data.
(0 observations deleted)

.         tempfile generation_by_county_2020

.                 save "`generation_by_county_2020'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000004.tmp saved
    as .dta format

.         
. *************************************************************
. /* 2. Calculate Avg. Ground-level Marginal Damages, Weighted by VMT
> .                                     */
. *************************************************************
. import delimited "${assumptions}/marginal_damages/md_Area_2014_VSL$
> {VSL_dollar_year}.csv", clear
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)

.         gen merge_id = _n

.                 qui sum merge_id 

.                         assert r(max) == 3109 // AP3 has data for 3
> ,109 counties.

. merge 1:1 merge_id using "`ap3_counties_merge'", nogen noreport ass
> ert(3)

.         drop merge_id

.                 order state county fips

. 
.         ***********************************************************
> **
.         /* 2a. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         rename v1 md_NH3

.         rename v2 md_NOx

.         rename v3 md_PM25

.         rename v4 md_SO2

.         rename v5 md_VOC 

.         
.         ***********************************************************
> **
.         /* 2b. Rename Variables, Following AP3 Output Ordering.    
>                               */
.         ***********************************************************
> **   
.         replace county = strlower(county)
(3,109 real changes made)

.                 gen county_ind = substr(county, strlen(county) - 5,
>  .)

.         gen county_check = ""
(3,109 missing values generated)

.                 replace county_check = substr(county, 1, strlen(cou
> nty) - 7) if inlist(county_ind, "county", "parish")
variable county_check was str1 now str20
(3,065 real changes made)

.                 replace county_check = county if county_check == ""
variable county_check was str20 now str21
(44 real changes made)

.                 
.         replace county_check = "de kalb" if fips == 18033       
(1 real change made)

.                 
.         merge 1:1 state county_check using "`vmt_weights'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                            36
        from master                         1  (_merge==1)
        from using                         35  (_merge==2)

    Matched                             3,108  (_merge==3)
    -----------------------------------------

.                 drop if inlist(state, "AK", "HI") // Not in AP3.
(34 observations deleted)

.                         keep if _merge == 3 // Only two counties do
>  not align. 
(2 observations deleted)

.         drop _merge

.         
.         ***********************************************************
> **
.         /* 2c. Average across Counties, Weighting by VMT.          
>                               */
.         ***********************************************************
> **   
.         collapse (mean) md* [aw = vmt_total]

.         
.         ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 global `var'_vmt_weighted = `var'
  3.                 
.         }

.         
. *************************************************************
. /* 3. Calculate Avg. Marginal Damages, Weighted by Power Generation
> .                                     */
. *************************************************************   
. 
.         ***********************************************************
> **
.         /* 3a. Collect Emissions and Damages by Plant Type.        
>                               */
.         ***********************************************************
> **   
.         local height_types              Low Medium Tall1 Tall2

.         foreach h of local height_types {
  2.                 
.                 preserve
  3.                 
.                         import delimited "${assumptions}/marginal_d
> amages/AP3 Raw Data/data_`h'_2014", clear
  4.                                 assert v3 == 0
  5.                                         drop v3
  6.                         rename v1 q_NH3
  7.                         rename v2 q_NOx
  8.                         rename v4 q_PM25
  9.                         rename v5 q_SO2
 10.                         rename v6 q_VOC 
 11.                         
.                         gen merge_id = _n
 12.                                 tempfile `h'_save
 13.                                         save "``h'_save'", repla
> ce
 14.                         
.                         import delimited "${assumptions}/marginal_d
> amages/md_`h'_2014_VSL${VSL_dollar_year}.csv", clear
 15.                                 rename v1 md_NH3
 16.                                 rename v2 md_NOx
 17.                                 rename v3 md_PM25
 18.                                 rename v4 md_SO2
 19.                                 rename v5 md_VOC 
 20.                         gen merge_id = _n       
 21.                                 merge 1:1 merge_id using "``h'_s
> ave'", nogen noreport assert(3)
 22.                                 
.                         if inlist("`h'", "Low", "Medium") {
 23.                                 
.                                 merge 1:1 merge_id using "`ap3_coun
> ties_merge'", nogen noreport assert(3)
 24.                                         drop merge_id
 25.                                 drop if inlist(state, "AK", "HI"
> )       
 26.                                 
.                         }       
 27.                         
.                         if inlist("`h'", "Tall1", "Tall2") {
 28.                                 
.                                 rename merge_id row
 29.                                         merge 1:1 row using "${a
> ssumptions}/marginal_damages/AP3 Raw Data/id_`h'", nogen noreport a
> ssert(3)
 30.                                 destring fips, replace          
 31.                                 drop if inlist(state, "AK", "HI"
> )
 32.                                 
.                                         keep md_* q_* fips county s
> tate
 33.                                 
.                         }
 34.                         
.                         tempfile final_`h'_save 
 35.                                 save "`final_`h'_save'", replace
 36.                         
.                 restore
 37.                 
.         }
(encoding automatically selected: ISO-8859-1)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 3,109 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000009.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 3,109 obs)
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000a.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 565 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000c.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 565 obs)
fips already numeric; no replace
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000d.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(6 vars, 91 obs)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000f.tmp saved
    as .dta format
(encoding automatically selected: UTF-8)
(5 vars, 91 obs)
fips2 already numeric; no replace
(0 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000g.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000g.tmp saved
    as .dta format

.         
.         ***********************************************************
> **
.         /* 3b. Collect Results.                                  */
.         ***********************************************************
> **   
.         use "`final_Low_save'", clear

.         foreach h of local height_types {
  2.                 
.                 if "`h'" == "Low" {
  3.                         continue
  4.                 }
  5.                 else {
  6.                         append using "`final_`h'_save'"
  7.                 }
  8.                 
.         }
(variable county was str27, now str35 to accommodate using data's
       values)
(variable state was str2, now str5 to accommodate using data's
       values)

.         replace fips = fips2 if fips == .
(91 real changes made)

.                 drop fips2

.                 
.         ds q_*
q_NH3   q_NOx   q_PM25  q_SO2   q_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 qui sum `var' if missing(fips)
  3.                         assert `r(mean)' == 0 
  4.                 
.         }

.         drop if missing(fips)
(27 observations deleted)

.         
.         sort county

.         
.         merge m:1 fips using "`ap3_counties_merge'", nogen noreport
>  assert(3)

.                 drop longitude lat merge_id

.                 drop if missing(fips) // No changes made here.  
(0 observations deleted)

.                                         
.         ***********************************************************
> **
.         /* 3c. Collect Results.                                  */
.         ***********************************************************
> **
.         replace county = strlower(county)               
(6,838 real changes made)

.         gen county_check = substr(county, strlen(county) - 5, .)   
>      
(83 missing values generated)

.                 replace county = substr(county, 1, strlen(county) -
>  7) if inlist(county_check, "county", "parish")
(6,130 real changes made)

.                         drop county_check

.         replace county = subinstr(county, " ", "", .)   
(493 real changes made)

.                 replace county = subinstr(county, "-", "", .)
(2 real changes made)

.                         replace county = subinstr(county, ".", "", 
> .)
(61 real changes made)

.                                 replace county = subinstr(county, "
> '", "", .)
(13 real changes made)

.                 
.                 
.         sort fips county

.                 bysort fips : egen county_obs_num = count(fips)

.         qui levelsof(fips), local(county_loop)

.         foreach c of local county_loop {
  2.                 
.                 qui sum county_obs_num if fips == `c'
  3.                         qui replace county = county[`r(max)'] if
>  county == "" & fips == `c'
  4.                                 assert county != "" if fips == `
> c'
  5.                 
.         }

.         assert !missing(county)

.         
.         ***********************************************************
> **
.         /* 3d. Calculate Average MD by County, Across Height Types.
>                                       */
.         ***********************************************************
> **                           
.         local pollution_list          NH3 NOx PM25 SO2 VOC

.         foreach p of local pollution_list {
  2.                 
.                 preserve
  3.                 
.                         keep md_`p' q_`p' state county fips state
  4.                                 collapse (mean) md_`p' (firstnm)
>  county (firstnm) state [aw = q_`p'], by(fips)
  5.                         tempfile save_`p'
  6.                                 save "`save_`p''", replace
  7.                 
.                 restore
  8.                 
.         }
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000i.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000i.tmp saved
    as .dta format
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000k.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000k.tmp saved
    as .dta format
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000m.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000m.tmp saved
    as .dta format
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000o.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000o.tmp saved
    as .dta format
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000q.tmp not
    found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_00000q.tmp saved
    as .dta format

.         
.         foreach p of local pollution_list {
  2.                 
.                 if "`p'" == "NH3" {
  3.                         use "`save_`p''", clear
  4.                                 order fips county state
  5.                 }
  6.                 else {
  7.                         merge 1:1 county fips using "`save_`p''"
> , nogen noreport
  8.                 }
  9.                 
.         }

.         ds md_*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = 0 if `var' == .
  3.                 
.         }
(1,280 real changes made)
(7 real changes made)
(4 real changes made)
(9 real changes made)
(3 real changes made)

.         
.         ***********************************************************
> **
.         /* 3e. Weight by Generation.                               
>       */
.         ***********************************************************
> **
.         preserve        

.                 merge 1:1 county state using "`generation_by_county
> _2020'"

    Result                      Number of obs
    -----------------------------------------
    Not matched                         2,110
        from master                     2,108  (_merge==1)
        from using                          2  (_merge==2)

    Matched                               952  (_merge==3)
    -----------------------------------------

.                         collapse (mean) md* [aw = TotalFuelConsumpt
> ionMMBtu]

.                 ds md*
md_NH3   md_NOx   md_PM25  md_SO2   md_VOC

.                 foreach var in `r(varlist)' {
  2.                         
.                         global `var'_elec_weighted = `var'
  3.                         
.                 }

.         restore

. 
end of do-file

. di 16.55 - 13.95
2.6

. di 5.76/2.6
2.2153846

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-04_16-03-35__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> */
. *----------------------
. * 4 - International
. *----------------------
. 
. * US-only cookstoves MVPF
. 
. 
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("cookstoves_program_cost_current_2020_dollars") (${
> program_cost_cookstoves})

. post `numbers' ("cookstoves_raw_global_wtp_2020_dollars") ((${wtp_s
> oc_g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureS
> CC}))) / ${program_cost_cookstoves})

. post `numbers' ("cookstoves_raw_us_wtp_2020_dollars") (((${wtp_soc_
> g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}
> ))) / ${program_cost_cookstoves}) * ${USShareFutureSSC})

. post `numbers' ("cookstoves_climate_fe_current_2020_dollars") (${fi
> sc_ext_lr_cookstoves})

. post `numbers' ("cookstoves_total_cost_current_2020_dollars") (${co
> st_cookstoves})

. post `numbers' ("cookstoves_US_WTP_current_per_dollar_2020") (${WTP
> _USFut_cookstoves} / ${program_cost_cookstoves})

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> */
. postclose `numbers'

. 
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication Package/4
> _results/robustness.xlsx saved

. 
. 
. 
. 
end of do-file

. di ${sc_CO2_2020} * (1 - (${USShareFutureSSC} * ${USShareGovtFuture
> SCC}))) / ${program_cost_cookstoves})
too many ')' or ']'
r(132);

. di ${sc_CO2_2020} * (1 - (${USShareFutureSSC} * ${USShareGovtFuture
> SCC})))
too many ')' or ']'
r(132);

. di ${sc_CO2_2020} * (1 - (${USShareFutureSSC} * ${USShareGovtFuture
> SCC}))
189.30308

. di ${sc_CO2_2020} - 189.30308
3.69692

. di 5.76/.157
36.687898

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-04_16-03-35__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> */
. *----------------------
. * 4 - International
. *----------------------
. 
. * US-only cookstoves MVPF
. 
. 
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("cookstoves_raw_global_wtp_2020_dollars") ((${wtp_s
> oc_g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureS
> CC}))) / ${program_cost_cookstoves})

. post `numbers' ("cookstoves_raw_us_wtp_2020_dollars") (((${wtp_soc_
> g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}
> ))) / ${program_cost_cookstoves}) * ${USShareFutureSSC})

. post `numbers' ("cookstoves_climate_fe_current_2020_dollars") (${fi
> sc_ext_lr_cookstoves})

. post `numbers' ("cookstoves_total_cost_current_2020_dollars") (${co
> st_cookstoves})

. post `numbers' ("cookstoves_US_WTP_current_per_dollar_2020") (${WTP
> _USFut_cookstoves} / ${program_cost_cookstoves})

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> */
. postclose `numbers'

. 
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication Package/4
> _results/robustness.xlsx saved

. 
. 
. 
. 
end of do-file

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-04_16-03-35__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> */
. *----------------------
. * 4 - International
. *----------------------
. 
. * US-only cookstoves MVPF
. 
. 
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("cookstoves_raw_global_wtp_2020_dollars") ((${wtp_s
> oc_g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureS
> CC}))) / ${program_cost_cookstoves})

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. 
. 
. post `numbers' ("cookstoves_raw_us_wtp_2020_dollars") (((${wtp_soc_
> g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}
> ))) / ${program_cost_cookstoves}) * ${USShareFutureSSC})

. post `numbers' ("cookstoves_climate_fe_current_2020_dollars") (${fi
> sc_ext_lr_cookstoves})

. post `numbers' ("cookstoves_total_cost_current_2020_dollars") (${co
> st_cookstoves})

. post `numbers' ("cookstoves_US_WTP_current_per_dollar_2020") (${WTP
> _USFut_cookstoves} / ${program_cost_cookstoves})

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> */
. postclose `numbers'

. 
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication Package/4
> _results/robustness.xlsx saved

. 
. 
. 
. 
end of do-file

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-04_16-03-35__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> */
. *----------------------
. * 4 - International
. *----------------------
. 
. * US-only cookstoves MVPF
. 
. 
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("cookstoves_raw_global_wtp_2020_dollars") ((${wtp_s
> oc_g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureS
> CC}))) / ${program_cost_cookstoves})

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> */
. postclose `numbers'

. 
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication Package/4
> _results/robustness.xlsx saved

. 
. 
. 
. 
end of do-file

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-04_16-03-35__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> */
. *----------------------
. * 4 - International
. *----------------------
. 
. * US-only cookstoves MVPF
. 
. 
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("cookstoves_raw_global_wtp_2020_dollars") ((${wtp_s
> oc_g_cookstoves} / (1 - (${USShareFutureSSC} * ${USShareGovtFutureS
> CC}))) / ${program_cost_cookstoves})

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> */
. postclose `numbers'

. 
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication Package/4
> _results/robustness.xlsx saved

. 
. 
. 
. 
end of do-file

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-15_09-44-45__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> 
> *----------------------
> * 4 - International
> *----------------------
> 
> * US-only cookstoves MVPF
> 
> */
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> 
> postclose `numbers'
> 
> 
> use `robustness_values', clear
> save "${code_files}/4_results/robustness", replace
> export excel using "${code_files}/4_results/robustness", replace
> 
> 
> 

end of do-file

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-15_09-44-45__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> 
> *----------------------
> * 4 - International
> *----------------------
> 
> * US-only cookstoves MVPF
> 
> */
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> 
> postclose `numbers'
> 
> 
> use `robustness_values', clear
> save "${code_files}/4_results/robustness", replace
> export excel using "${code_files}/4_results/robustness", replace
> 
> 
> 

end of do-file

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-15_09-44-45__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> 
> *----------------------
> * 4 - International
> *----------------------
> 
> * US-only cookstoves MVPF
> 
> */
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> 
> postclose `numbers'
> */
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
(dataset contains 0 observations)
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
no observations
r(2000);

end of do-file

r(2000);

. do "C:\Users\acreeron\Documents\GitHub\mvpf-enviro\wrapper\robustne
> ss.do"

. /*-----------------------------------------------------------------
> ------
> * Run Calculations for Different Specifications
> *------------------------------------------------------------------
> -----*/
. 
. tempname numbers

. tempfile robustness_values

. postfile `numbers' str80 label value using `robustness_values', rep
> lace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000001.tmp not
    found)

. 
. local main_data_set = "2024-11-15_09-44-45__full_current_193_nov"

. global lbd "yes"

. /*
> *----------------------
> * 1 - Electric Vehicles
> *----------------------
> 
> run_program muehl_efmp
> post `numbers' ("muehl_efmp_no_ice_local") (${wtp_no_ice_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_no_ice") (${wtp_no_ice_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_yes_ev_local") (${wtp_yes_ev_local_mueh
> l_efmp})
> 
> post `numbers' ("muehl_efmp_wtp_yes_ev") (${wtp_yes_ev_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_rbd_glob") (${wtp_soc_rbd_g_muehl_efmp}
> )
> 
> post `numbers' ("muehl_efmp_rbd_loc") (${wtp_soc_rbd_l_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_batt_damages") (${batt_damages_muehl_ef
> mp})
> 
> post `numbers' ("muehl_efmp_wtp_batt") (${wtp_batt_muehl_efmp})
> 
> post `numbers' ("gas_markup_percent") (${nominal_gas_markup_2020} /
>  ${nominal_gas_price_2020})
> 
> run_program muehl_efmp, ev_fed_subsidy(7500)
> 
> post `numbers' ("muehl_efmp_fe_7500") (${total_cost_muehl_efmp} - $
> {program_cost_muehl_efmp})
> 
> post `numbers' ("muehl_efmp_mvpf_7500") (${MVPF_muehl_efmp})
> 
> run_program muehl_efmp, ev_fed_subsidy(0)
> 
> post `numbers' ("muehl_efmp_mvpf_0") (${MVPF_muehl_efmp}) 
> 
> tempname ev_non_marg
> tempfile ev_non_marginal_mvpf
> postfile `ev_non_marg' subsidy mvpf using `ev_non_marginal_mvpf' 
> 
> forvalues s = 0(50)10000{
> 
>     run_program muehl_efmp, ev_fed_subsidy(`s')
>     post `ev_non_marg' (`s') (${MVPF_muehl_efmp})
> 
> }
> 
> postclose `ev_non_marg'
> 
> use `ev_non_marginal_mvpf', clear
> 
> sum mvpf if subsidy >= 647.24887 & subsidy 
> local non_marg_mvpf = r(mean)
> 
> post `numbers' ("muehl_efmp_non_marg_mvpf") (`non_marg_mvpf')
> 
> 
> * category avg MVPF with average new car counterfactual
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual..."
> run_program muehl_efmp, bev_cf_value(new_car)
> run_program federal_ev, bev_cf_value(new_car)
> run_program bev_state, bev_cf_value(new_car)
> 
> post `numbers' ("evs_avg_new_car_mvpf") ((${WTP_cc_muehl_efmp} + ${
> WTP_cc_federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + $
> {cost_federal_ev} + ${cost_bev_state})) 
> 
> * category avg MVPF with average new car counterfactual and VMT = 1
>  (not the 0.6ish number)
> * need new time paths for VMT adjustment
> 
> di in red "Calculating category avg MVPF with average new car count
> erfactual and VMT = 1..."
> run_program muehl_efmp, bev_cf_value(new_car) vmt_adjust(1) macros(
> "yes")
> run_program federal_ev, bev_cf_value(new_car) vmt_adjust(1) macros(
> "no")
> run_program bev_state, bev_cf_value(new_car) vmt_adjust(1) macros("
> no")
> 
> post `numbers' ("evs_VMT_1_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc
> _federal_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_
> federal_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with CA grid
> 
> di in red "Calculating category avg MVPF with CA grid..."
> run_program muehl_efmp, ev_grid("CA") macros("yes")
> run_program federal_ev, ev_grid("CA") macros("no")
> run_program bev_state, ev_grid("CA") macros("no")
> 
> post `numbers' ("evs_ca_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state}))
> 
> * category avg MVPF with MI grid
> 
> di in red "Calculating category avg MVPF with MI grid..."
> run_program muehl_efmp, ev_grid("MI") macros("yes")
> run_program federal_ev, ev_grid("MI") macros("no")
> run_program bev_state, ev_grid("MI")macros("no")
> 
> post `numbers' ("evs_mi_mvpf") ((${WTP_cc_muehl_efmp} + ${WTP_cc_fe
> deral_ev} + ${WTP_cc_bev_state}) / (${cost_muehl_efmp} + ${cost_fed
> eral_ev} + ${cost_bev_state})) 
> 
> 
> *--------------------
> * 2 - Hybrid Vehicles
> *--------------------
> 
> * category avg MVPF with average new car counterfactual
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> run_program hev_usa_i, hev_cf_value(new_car)
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hevs_avg_new_car_mvpf") ((${WTP_cc_hev_usa_s} + ${
> WTP_cc_hev_usa_i} + ${WTP_cc_hybrid_cr}) / (${cost_hev_usa_s} + ${c
> ost_hev_usa_i} + ${cost_hybrid_cr})) 
> 
> * hybrid_cr MVPF with avg new car cf
> 
> run_program hybrid_cr, hev_cf_value(new_car)
> 
> post `numbers' ("hybrid_cr_new_car_mvpf") (${MVPF_hybrid_cr})
> 
> * hev_usa_s MVPF with avg new car cf
> 
> run_program hev_usa_s, hev_cf_value(new_car)
> 
> post `numbers' ("hev_usa_s_new_car_mvpf") (${MVPF_hev_usa_s}) 
> 
> *-----------
> * 3 - Nudges
> *-----------
> 
> * her_compiled global rebound
> 
> run_program her_compiled
> 
> post `numbers' ("her_compiled_rbd_glob") (${wtp_r_glob_her_compiled
> } / ${program_cost_her_compiled})
> 
> * her_compiled local rebound
> 
> post `numbers' ("her_compiled_rbd_loc") (${wtp_r_loc_her_compiled} 
> / ${program_cost_her_compiled}) 
> 
> *----------------------
> * 4 - International
> *----------------------
> 
> * US-only cookstoves MVPF
> 
> */
. * Cost components of 2020 cookstove policy.
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. 
. post `numbers' ("cookstoves_subsidy_2020_dollars") (${cookstove_sub
> sidy} * (${cpi_2020} / ${cpi_2019}))

. post `numbers' ("climate_FE_per_ton") (${sc_CO2_2020} - (${sc_CO2_2
> 020} * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))))

. post `numbers' ("cookstoves_us_mvpf") (${WTP_USFut_cookstoves} / ${
> cost_cookstoves})

. 
. * net cost of cookstoves assuming 100% of SCC is from economic prod
> uctivity
. 
. post `numbers' ("cookstoves_cost_scc_econ") (${alt_cost_cookstoves}
> )

. 
. * US-only MVPF for cookstoves assuming 100% of SCC is economic prod
> uctivity
. 
. post `numbers' ("cookstoves_us_mvpf_scc_econ") (${alt_US_MVPF_cooks
> toves})

. 
. * US-only MVPF for cookstoves assuming 0% of SCC is economic produc
> tivity
. post `numbers' ("cookstoves_us_mvpf_scc_no_econ") ((${WTP_USFut_coo
> kstoves} + ${WTP_USPres_cookstoves} + ${fisc_ext_lr_cookstoves}) / 
> ${program_cost_cookstoves})

. 
. post `numbers' ("cookstoves_mvpf_scc_no_econ") ((${WTP_USFut_cookst
> oves} + ${WTP_USPres_cookstoves} + ${WTP_RoW_cookstoves} + ${fisc_e
> xt_lr_cookstoves}) / ${program_cost_cookstoves})

. 
. 
. * sl_offset US-only MVPF
. 
. run_program sl_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Sierra Lione Offsets            */
. *******************************************************************
> *************
. /*
> Evaluating the impacts of a large-scale voluntary REDD+ project in 
> Sierra Leone
> 
> Mandy Malan, Rachel Carmenta, Elisabeth Gsottbauer, Paul Hofman, An
> dreas Kontoleon, Tom Swinfield & Maarten Voors 
> 
> https://www.nature.com/articles/s41893-023-01256-9
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"avoided"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1    342954.1           .   342954.1   342954
> .1
.     restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local permits = 403458 // number of permits offered to this
>  project per year from Supplementary Information H

.         
.         local permit_cost = 4.7 * (${cpi_`dollar_year'}/${cpi_2021}
> ) // estimate from: https://www.un-redd.org/sites/default/files/202
> 2-11/Forest%20carbon%20pricing%20brief%20-%20FINAL.pdf

.         
.         local total_cost = 384620 // cost of avoided CO2 emissions 
> from project developers

.         local total_permit_cost = `permit_cost' * `permits'

.         
.         local annual_avoided_CO2 = 342954.14 // Avoided tons of CO2
>  from Supplementary Information G

. 
. *************************
. /* 4. WTP Calculations */
. *************************
. local wtp_infr = 0

. local wtp_marg = 0

. 
. local wtp_cons = `wtp_infr' + `wtp_marg'

.         
. local local_pollutants = 0

. 
. local global_pollutants = (${sc_CO2_2020} * `annual_avoided_CO2') *
>  (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})

. 
. local rebound_local = 0

. local rebound_global =  0

. 
. local wtp_society = `global_pollutants' + `local_pollutants' - `reb
> ound_global' - `rebound_local'

. 
. local q_carbon = `annual_avoided_CO2'

.         
. local WTP = `wtp_cons' + `wtp_society' - ((`global_pollutants' - `r
> ebound_global') * ${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutants' 
> - `rebound_global') * (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutants'
>  - `rebound_global') + `local_pollutants' + `wtp_cons' - `rebound_l
> ocal'

. 
. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `total_permit_cost'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * (`global_pollutants' - `rebound_global') *
>  ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`WTP' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_infr'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "REDD Offsets - Seirra Lione"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
119.43835

. di `total_cost'
543563.08

. di `WTP'
64922277

. di `wtp_cons'
0

. di `local_pollutants'
0

. di `global_pollutants'
66190149

. di `rebound_global'
0

. di `rebound_local'
0

. di `wtp_society'
66190149

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
64922277

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
15.933109

. 
end of do-file

. 
. post `numbers' ("sl_offset_us_mvpf") (${WTP_USFut_sl_offset} / ${co
> st_sl_offset})

. 
. * ug_deforest US-only MVPF
. 
. run_program ug_deforest
vmt_adjust: .6154440799999999
(5 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Uganda          
>            */
. *******************************************************************
> *************
. /*
> Jayachandran, Seema, Joost de Laat, Eric F. Lambin, Charlotte Y. St
> anton, Robin Audy, Nancy E. Thomas.
> "Cash for carbon: A randomized trial of payments for ecosystem serv
> ices to reduce deforestation."
> Science 357(6348): 267--273.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       .0521           .      .0521      .05
> 21
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local control_year = `dollar_year' + 10

. local treat_year = `control_year' + 3

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_pfo = 183.5  // includes behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy_raw = 36.09 // Supplemental material section 4

. local admin_cost_raw = 14 + 30 +  0.1 * `subsidy_raw' // per eligib
> le PFO, from supplemental material section 4, 14 = monitoring with 
> 2 checks a day, 30 = marketing + program management, 10% of subsidy
>  = transaction fee

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. local admin_cost = `admin_cost_raw' * (${cpi_`dollar_year'} / ${cpi
> _${policy_year}})

. 
. local program_cost = `subsidy' + `admin_cost_raw' * (${cpi_`dollar_
> year'} / ${cpi_${policy_year}})

. 
. local treatment_tree_loss = 0.095 - `treatment_effect' // 4.3 log p
> oints

. local treatment_loss_percent = exp(`treatment_tree_loss') - 1 // 4.
> 2% tree loss in treatment group

. 
. local control_loss_percent = -(exp(-0.095) - 1) // 9.1% tree loss i
> n control group

. 
. local control_saved = 1 - `control_loss_percent' // for Latex

. local treat_saved = 1 - `treatment_loss_percent' // for Latex

. 
. local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent')

. local prop_marginal = 1 - `prop_inframarginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control' / ((1 + `discount')^10)

. local treat_scc = `scc_treat' / ((1 + `discount')^13)

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_pfo' * `scc' * (1 - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_pfo' * `scc' * (${USShar
> eFutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0    

. local WTP_USFut = (`carbon_per_pfo' * `scc') * (${USShareFutureSSC}
>  - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_pfo' * `s
> cc')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Uganda"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("ug_deforest_us_mvpf") (${WTP_USFut_ug_deforest} / 
> ${cost_ug_deforest})

. 
. * mx_deforest US-only MVPF
. 
. run_program mx_deforest
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Payments for Ecosystem Services in Mexico          
>            */
. *******************************************************************
> *************
. /*
> Izquierdo-Tort, Santiago, Seema Jayachandran, Santiago Saavedra.
> "Redesigning payments for ecosystem services to increase cost-effec
> tiveness."
> Unpublished.
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"treatment_effect"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -.054           .      -.054      -.0
> 54
.     restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         global dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         global dollar_year = ${current_year}
. }

. 
. local dollar_year = ${dollar_year}

. 
. local years = 1 / (0.142 + 0.011)

. 
. local control_year = `dollar_year'

. local treat_year = round(`control_year' + `years')

. 
. local scc_control = ${sc_CO2_`control_year'} * (${cpi_`dollar_year'
> } / ${cpi_${sc_dollar_year}})

. 
. local scc_treat = ${sc_CO2_`treat_year'} * (${cpi_`dollar_year'} / 
> ${cpi_${sc_dollar_year}})

. 
. 
. 
. local carbon_per_ha = 550 // number is specific to the Lacandona fo
> rest, doesn't include behavioral response

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. /* local subsidy_raw_control = 313400 / 7.3 // in Mexican pesos, pg
> . 20
> local subsidy_converted_control = `subsidy_raw_control' * 0.0503 //
>  conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_control = `subsidy_converted_control' * (${cpi_`dolla
> r_year'} / ${cpi_${policy_year}})
> 
> local subsidy_raw_treatment = 591000 / 62.9 // in Mexican pesos, pg
> . 20
> local subsidy_converted_treatment = `subsidy_raw_treatment' * 0.050
> 3 // conversion rate of 1 MXN to USD on Jul. 16, 2021 from Google
> local subsidy_treatment = `subsidy_converted_treatment' * (${cpi_`d
> ollar_year'} / ${cpi_${policy_year}}) */
. 
. /* local subsidy = `subsidy_treatment' - `subsidy_control' // diffe
> rence in subsidy per marginal hectare */
. 
. local subsidy_raw = 8982 / 20.036 // per marginal hectare (MX$1000 
> / prop_marginal)

. local subsidy = `subsidy_raw' * (${cpi_`dollar_year'} / ${cpi_${pol
> icy_year}})

. 
. local program_cost = `subsidy' // per marginal hectare (MX$1000 / p
> rop_marginal)

. 
. /* local treatment_loss_percent = 0.14 + `treatment_effect' // 9.6%
>  tree loss in treatment group
> 
> local control_loss_percent = 0.14 // 14% tree loss in control group
> 
> local control_saved = 1 - `control_loss_percent' // for Latex
> local treat_saved = 1 - `treatment_loss_percent' // for Latex
> 
> local prop_inframarginal = (1 - `control_loss_percent') / (1 - `tre
> atment_loss_percent') */
. 
. local prop_marginal = 65.8 / 591 // 65.8 = marginal hectares, 591 c
> omes from MX$591,000 being paid at MX$1,000 per ha

. local prop_inframarginal = 1 - `prop_marginal'

. 
. local wtp_infr = `prop_inframarginal' * `subsidy'

. 
. local wtp_marg = `prop_marginal' * `subsidy' * 0.5

. 
. local transfer = `wtp_infr' + `wtp_marg' // for Latex

. 
. local control_scc = `scc_control'

. local treat_scc = `scc_treat' / ((1 + `discount')^`years')

. local scc = `control_scc' - `treat_scc'

. 
. local wtp_soc = `carbon_per_ha' * `scc' * (1 - (${USShareFutureSSC}
>  * ${USShareGovtFutureSCC}))

. 
. local fiscal_externality_lr = -`carbon_per_ha' * `scc' * (${USShare
> FutureSSC} * ${USShareGovtFutureSCC})

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. 
. local total_cost = `program_cost' + `fiscal_externality_lr'

. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = (`carbon_per_ha' * `scc') * (${USShareFutureSSC} 
> - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`carbon_per_ha' * `sc
> c')) + `wtp_marg' + `wtp_infr'

. 
. local MVPF_US = `WTP_USFut' / `total_cost'

. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres') / `total_cost
> ', 0.01) == round(`MVPF', 0.01)

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_glob_`1' = `wtp_soc'

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3`""Global" "Env
> iro""' 4 `"Total WTP"' 6 `""Program" "Cost""' 7 `""Climate" "FE""' 
> 8 `""Govt" "Cost""'

. * color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global color_group4_`1' = 3

. global cost_color_start_`1' = 6

. global color_group5_`1' = 7

. 
. global `1'_name "Payments for Ecosystem Services to Reduce Deforest
> ation in Mexico"

. 
. local y_ub = `WTP' + 0.3

. global note_`1' = ""

. global normalize_`1' = 1

. global yscale_`1' = "range(0 `y_ub')"

. 
. if "${latex}" == "yes"{
.         if ${sc_CO2_2020} == 193{
. 
.                 ** Latex Output
.                 local outputs control_saved treat_saved prop_infram
> arginal subsidy transfer scc_control scc_treat ///
>                               scc wtp_soc total_wtp admin_cost prog
> ram_cost fiscal_externality_lr total_cost MVPF ///
>                                           MVPF_US prop_marginal yea
> rs delay_discount treat_scc
.                 capture: file close myfile
.                 file open myfile using "${user}/Dropbox (MIT)/Apps/
> Overleaf/MVPF Climate Policy/macros_`1'_`4'.sty", write replace
.                 file write myfile "\NeedsTeXFormat{LaTeX2e}" _n
.                 file write myfile "\ProvidesPackage{macros_`1'_`4'}
> " _n
.                 foreach i of local outputs{
  2. 
.                         local original = "`i'"
  3.                         local newname = "`i'"
  4. 
.                         // Remove underscores from the variable nam
> e
.                         while strpos("`newname'", "_"){
  5.                                 local newname = subinstr("`newna
> me'", "_", "", .)
  6.                         }
  7.                         local 1 = subinstr("`1'", "_", "", .)
  8.                         local 4 = subinstr("`4'", "_", "", .)
  9. 
.                         if inlist("`i'", "kwh_per_install", "annual
> _kwh", "fisc_ext_t", "global_pollutants", "local_pollutants", "wtp_
> cons_treat", "wtp", "treated_muni_cost") | ///
>                            inlist("`i'", "spill_muni_fed_fe", "trea
> ted_muni_fed_fe", "scc_treat"){
 10.                                 local `original' = trim("`: disp
> lay %9.0fc ``original'''")
 11.                         }
 12.                         else if inlist("`i'", "wtp_cons_spill_n"
> ){
 13.                                 local `original' = trim("`: disp
> lay %5.3fc ``original'''")
 14.                         }
 15.                         else{
 16.                                 local `original' = trim("`: disp
> lay %5.2fc ``original'''")
 17.                         }
 18.                         local command = "\newcommand{\\`newname'
> `1'`4'}{``original''}"
 19.                         di "`command'"
 20.                         file write myfile "`command'" _n
 21.                         
.                 }
.                 file close myfile
. 
.         }
. 
. }

. 
. 
end of do-file

. 
. post `numbers' ("mx_deforest_us_mvpf") (${WTP_USFut_mx_deforest} / 
> ${cost_mx_deforest})

. 
. * rice_in_st US-only MVPF
. 
. run_program rice_in_st
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> http://www.nber.org/papers/w30690
> 
> Standard Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .02           .        .02        .
> 02

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       105.6           .      105.6      105
> .6
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local prop_infra = 0.098 / (`not_burned'+0.098)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra') /`dollar_rupee
> '

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations  */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global wtp_cons_`1' = `wtp_cons' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Standard Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
10.749083

. di `total_cost'
59.943417

. di `WTP'
644.33677

. di `wtp_cons'
65.214736

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
644.33677

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.2887995

. 
end of do-file

. 
. post `numbers' ("rice_in_st_us_mvpf") (${WTP_USFut_rice_in_st} / ${
> cost_rice_in_st})

. 
. * rice_in_up US-only MVPF
. 
. run_program rice_in_up
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Rice Field Burning (India)                     */
. *******************************************************************
> *************
. /*
> MONEY (NOT) TO BURN: PAYMENTS FOR ECOSYSTEM SERVICES TO REDUCE CROP
>  RESIDUE BURNING
> 
> B. Kelsey Jack, Seema Jayachandran, Namrata Kala, Rohini Pande
> Working Paper 30690
> https://seemajayachandran.com/money_not_to_burn.pdf
> 
> Upfront Payments
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. global spec_type = "`4'"

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"burned_prop"' `"compliance"' `"money_per"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .077           .       .077       .0
> 77

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .183           .       .183       .1
> 83

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       310.5           .      310.5      310
> .5
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

.         
.         ****************************************************
.         /* 3b. Policy Specific Assumptions */
.         ****************************************************
.         
.         local percent_upfront = (0.25 + 0.5)/2 // Some people got 2
> 5% upfront and others got 50% up front

.         
.         local money_per_acre = `money_per' // Maximum Accuracy mode
> l in Table 6

.         local not_burned = `burned_prop' // Maximum Accuracy model 
> in Table 6

.         
.         local cost_per_unburned = `money_per_acre' / `not_burned'

.         
.         local co2e_in_punjab = 15119.03 * 1000 // Gigagram of Carbo
> n from burning in Punjab * short tons per Gigagram // The Gigagram 
> number is from Table 2 of https://www.sciencedirect.com/science/art
> icle/pii/S0048969723055699

.         
.         local co2e_per_hectare = `co2e_in_punjab' / 2000000 // Ther
> e are 2 million hectares of burned land in Punjab from abstract of 
> https://www.sciencedirect.com/science/article/pii/S0048969723055699

.         
.         local co2e_per_acre = `co2e_per_hectare' / 2.47105 // Conve
> rting hectares to acres

.         
.         local dollar_rupee = 74.102 // In-Context and Current are b
> oth 2020 https://www.irs.gov/individuals/international-taxpayers/ye
> arly-average-currency-exchange-rates

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. /*
> 
> Calculation to get the percent of the cost per unburned acre that t
> he government pays that goes to inframarginal vs marginal farmers. 
> We first get the percent of payments that are marginal vs inframarg
> inal. 
> 
> Inframarginal payments include: the 82% of the farmers that do not 
> comply only get the upfront payment, the proportion of inframargina
> l farmers out of the compliers (0.28 * prop_infra), and the upfront
>  payment for the proportion of marginal farmers out of the complier
> s (0.28 * (1 - prop_infra) * 0.375)
> 
> */
. 
. local prop_infra_tot = 0.161 / (`not_burned'+0.161)

. 
. local noncompliance = 1 - 0.183 // Percent of people who don't comp
> ly 

. local prop_infra_compliers = 0.183 * `prop_infra_tot'

. local prop_marg_compliers = 0.183 * (1 - `prop_infra_tot')

. 
. 
. 
. local prop_infra = (`noncompliance' * 375 + (`prop_infra_compliers'
>  * 800) + (`prop_marg_compliers' * 375)) / (`noncompliance' * 375 +
>  (1 - `noncompliance') *800)

. 
. local wtp_inf = (`cost_per_unburned' * `prop_infra')/`dollar_rupee'

. local wtp_marg = (`cost_per_unburned' * (1 - `prop_infra') * 0.5)/`
> dollar_rupee'

. 
. local wtp_cons = `wtp_inf' + `wtp_marg'

.         
. local local_pollutants = 0 // Even though there are local benefits,
>  we are doing this in terms of CO2e

. 
. local global_pollutants = `co2e_per_acre' * ${sc_CO2_`dollar_year'}
>  // We don't scale by semie because everything is in terms of 1 unb
> urned acre

. 
. local q_carbon = `co2e_per_acre'

. 
. local wtp_society = `global_pollutants' + `local_pollutants'

. 
. local WTP = `wtp_cons' + `wtp_society' - (`global_pollutants' * ${U
> SShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. // Quick decomposition
. local WTP_USPres = 0

. local WTP_USFut  =     ${USShareFutureSSC}  * `global_pollutants' *
>  (1 - ${USShareGovtFutureSCC})

. local WTP_RoW    = (1 - ${USShareFutureSSC}) * `global_pollutants' 
> + `local_pollutants' + `wtp_cons'

. 
. **************************
. /* 5. Cost Calculations */
. **************************
. local program_cost = `cost_per_unburned' / `dollar_rupee'

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_s = 0

. 
. local fisc_ext_lr = -1 * `global_pollutants' * ${USShareFutureSSC} 
> * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = `WTP'/`total_cost'

.         
. if (`WTP' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. global total_cost_`1' = `total_cost'

. 
. global wtp_glob_`1' = `global_pollutants' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. 
. global wtp_cons_`1' = `wtp_cons' 

. global wtp_marg_`1' = `wtp_marg'

. global wtp_inf_`1' = `wtp_inf'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global cost_`1' = `total_cost'

. global p_spend_`1' = `policy_spending'

. global q_CO2_`1' = `q_carbon'

. 
. ** for waterfall charts
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "WTP
> "

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Upfront Payments - Rice Burning"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `"Enviro"' 4 `
> "Total WTP"' 6 `""Program" "Cost""' 7 `""FE" "Subsidies""' 8 `""FE"
>  "Taxes""' 9 `""FE" "Long-Run""' 10 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 3

. global cost_color_start_`1' = 6

. global color_group4_`1' = 9

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
14.661469

. di `total_cost'
43.108076

. di `WTP'
632.02773

. di `wtp_cons'
52.90569

. di `co2e_per_acre'
3.0592319

. 
. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
632.02773

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
1.7921246

. 
end of do-file

. 
. post `numbers' ("rice_in_up_us_mvpf") (${WTP_USFut_rice_in_up} / ${
> cost_rice_in_up})

. 
. * india_offset US-only MVPF
. 
. run_program india_offset
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: India Carbon Offsets                   */
. *******************************************************************
> *************
. /*
> Do Carbon Offsets Offset Carbon?
> Raphael Calel, Jonathan Colmer, Antoine Dechezleprêtre, Matthieu Gl
> achant 
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"infra"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.             local `est' = r(mean)
  4.         }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         .52           .        .52        .
> 52
.     restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.         
.     restore

. 
.         ****************************************************
.         /* 3b. Elasticity Calculation */
.         ****************************************************
.         local prop_infra = `infra' // at least 52% of projects are 
> inframarginal

.         
.         preserve

.                 local dollar_year = 2020

.                 import excel "${policy_assumptions}", first clear s
> heet("CER_prices")
(6 vars, 14 obs)

.                 drop if CER_price == .
(3 observations deleted)

.                 destring Year, replace
Year: all characters numeric; replaced as int

.                 replace LCOE = LCOE * 1000 * (${cpi_2020} / ${cpi_2
> 022}) // converting $/kwh to $/mwh
(11 real changes made)

.                 qui sum Year

.                 gen CER_price_2020 = .
(11 missing values generated)

.                 forvalues y = `r(min)'(1)`r(max)'{
  2.                         
.                         replace CER_price_2020 = CER_price * ${cpi_
> `dollar_year'} / ${cpi_`y'} if Year == `y'
  3.                 }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.                 egen CDM_total = total(CDM_capacity)

.                 qui sum CDM_total

.                 local CDM_total = `r(mean)' * (1 - `prop_infra')

.                 
.                 egen Non_CDM_total = total(Non_CDM_capacity)

.                 qui sum Non_CDM_total

.                 local Non_CDM_total = `r(mean)' + (`CDM_total' / (1
>  - `prop_infra')) * `prop_infra'

.                 
.                 collapse (mean) CER_price LCOE [aw=CDM_capacity]

.                 local CER_mean = CER_price[1]

.                 local LCOE_mean = LCOE[1]

.         restore

. 
.         local co2_per_mwh_context = 0.81 // tons CO2 per MWh (Value
>  for 2013 from https://cea.nic.in/wp-content/uploads/baseline/2020/
> 07/user_guide_ver14.pdf)

.         
.         local p_change = `CER_mean' * `co2_per_mwh_context'

.         local per_change_p = `p_change' / (`LCOE_mean' - (`p_change
> ' * 0.5))

.         di `per_change_p'
.12619553

.         
.         local per_change_q = `CDM_total' / (`Non_CDM_total' + (`CDM
> _total' * 0.5))

.         di `per_change_q'
.27671265

.         
.         local elas = -1 * `per_change_q' / `per_change_p'

. 
.         local co2_per_mwh = 0.71 // tons CO2 per MWh (https://cea.n
> ic.in/wp-content/uploads/baseline/2023/01/Approved_report_emission_
> _2021_22.pdf)

. 
.         local lcoe_2020 = 40.4 * (${cpi_2020} / ${cpi_2022}) // htt
> ps://www.irena.org/Energy-Transition/Technology/Wind-energy

.         
.         local current_credit = 5.3 // https://www.researchgate.net/
> publication/371350214_Lessons_from_Gulf_Cooperation_Council_Countri
> es'_Participation_in_the_Clean_Development_Mechanism

.         
.         local current_credit = `current_credit' * `co2_per_mwh' // 
> scaling to get credit per mwh

.         
.         local semie = `elas' / (`lcoe_2020' - `current_credit')

. 
.         ****************************************************
.         /* 3c. Policy Category Assumptions */
.         ****************************************************
. 
.         *i. Import Wind assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear s
> heet("Wind")
(4 vars, 8 obs)

.                 
.                 levelsof Parameter, local(levels)
`"average_size"' `"capacity_factor"' `"capacity_reduction"' `"credit_
> life"' `"current_ptc"' `"installed_cost_per_kwh"' `"lifetime"' `"wi
> nd_emissions"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                         local `val' = `r(mean)'
  5.                 }

.                 
.                 local lifetime = ${lifetime}

.                 local capacity_factor = ${capacity_factor} // capac
> ity factor for wind

.                 local credit_life = `lifetime' // credit lasts for 
> lifetime of turbine

.                 local capacity_reduction = ${capacity_reduction}

.                 local wind_emissions = ${wind_emissions}

.                 local hrs = 8760 // hours per year

.                 local corporate_disc = 0.0673

.         
.         restore

.         
.         rebound ${rebound}
(12 vars, 162 obs)

.         local r = `r(r)'

.         
. *************************
. /* 4. WTP Calculations */
. *************************
. local annual_mwh = `hrs' * `capacity_factor' // After the first ten
>  years we need to scale this down by the capacity reduction factor

. 
. local local_pollutants = 0

. local global_pollutants = 0

. local last_year = 2020 + `lifetime'

. 
. forvalues y = 2020 (1) `last_year'{
  2.         local discount_year = `y' - 2020
  3.         local global_pollutants = `global_pollutants' + (`co2_pe
> r_mwh' * `annual_mwh' * ${sc_CO2_2020})/(1 + `discount')^`discount_
> year'
  4. }

. 
. *Calculating lifecycle costs of wind
. local wind_emissions = `wind_emissions' * 1000 // Converting from g
> /kwh to g/mwh

. 
. local env_cost = (`wind_emissions' * 1/1000000 * `annual_mwh' * `li
> fetime') * ${sc_CO2_2020} * `r'

. 
.         local val_local_pollutants = `local_pollutants' * -`semie'

.         local val_global_pollutants = `global_pollutants' * -`semie
> '

.         local rebound_local = `local_pollutants' * (1-`r') * -`semi
> e'

.         local rebound_global = `global_pollutants' * (1-`r') * -`se
> mie'

.         local val_env_cost = `env_cost' * -`semie'

. 
. * Society
. local wtp_society = `val_local_pollutants' + `val_global_pollutants
> ' - `val_env_cost' - `rebound_local' - `rebound_global'

. 
. * Private
. local wtp_producers = (`hrs'*`capacity_factor') + ((`hrs'*`capacity
> _factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) /
> / $1 per MWh transfer

. local wtp_private = `wtp_producers'

. 
. local enviro_ext = `local_pollutants' + `global_pollutants' - `env_
> cost' - ((`local_pollutants' + `global_pollutants') * (1-`r'))

. 
. local enviro_ext_global = (`global_pollutants' * `r') / `enviro_ext
> '

. 
. local program_cost = (`hrs'*`capacity_factor') + ((`hrs'*`capacity_
> factor')/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1))) //
>  $1 per MWh transfer

. 
. *Cost Curve
. /*
> *Learning by Doing Assumptions
> local cum_sales = 742689 // 742689 2020 or 93924 2007, world number
> s
> local marg_sales = 92490 // 92490 for 2020 or 2007 is 19967, world 
> numbers
> 
> local prod_cost = `annual_mwh' * `lifetime' * (`lcoe_2020' - `curre
> nt_credit')
> 
> local subsidy_max = `annual_mwh' * `lifetime' * `current_credit'
> 
> cost_curve_masterfile,  demand_elas(`elas') discount_rate(`discount
> ') farmer(`farmer_theta') curr_prod(`marg_sales') cum_prod(`cum_sal
> es') price(`prod_cost') enviro("constant_`enviro_ext'") scc(${sc_CO
> 2_2020}) subsidy_max(`subsidy_max')
>         
>         local env_cost_wtp_global = (`r(enviro_mvpf)' * `program_co
> st') * `enviro_ext_global'
>         local env_cost_wtp_local = (`r(enviro_mvpf)' * `program_cos
> t') * (1 - `enviro_ext_global')
>         local enviro_mvpf_raw = `r(enviro_mvpf)' * 0
> 
>         
>         local cost_mvpf = `r(cost_mvpf)' * 0
>         local cost_wtp = `r(cost_mvpf)' * `program_cost' * 0
>         local enviro_wtp = `env_cost_wtp_local' + `env_cost_wtp_glo
> bal' * 0
> //      local enviro_ext_global = `env_cost_wtp_global' / `enviro_w
> tp'
>         local enviro_ext_global = 0
> */
.         
. * Total WTP
. local WTP = `wtp_private' + `wtp_society' - ((`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') * ${USShareFutureSSC} * ${U
> SShareGovtFutureSCC})

. local WTP_cc = `WTP'

. 
. local WTP_USPres = 0

. local WTP_USFut = ${USShareFutureSSC} * (`val_global_pollutants' - 
> `rebound_global' - `val_env_cost' - ((`val_global_pollutants' - `re
> bound_global' - `val_env_cost') * ${USShareGovtFutureSCC})) 

. local WTP_RoW = ((1 - ${USShareFutureSSC}) * (`val_global_pollutant
> s' - `rebound_global' - `val_env_cost') + (`wtp_private' + `val_loc
> al_pollutants' - `rebound_local'))

. 
. // // Quick decomposition
. // local WTP_USPres = 0
. // local WTP_USFut  =     ${USShareFutureSSC}  * (`global_pollutant
> s' - `rebound_global') * (1 - ${USShareGovtFutureSCC})
. // local WTP_RoW    = (1 - ${USShareFutureSSC}) * (`global_pollutan
> ts' - `rebound_global') + `local_pollutants' + `wtp_cons' - `reboun
> d_local'
. **************************
. /* 6. Cost Calculations  */
. **************************
. local fisc_ext_s = (`hrs'* `capacity_factor' * -`semie' * `current_
> credit') + ((`hrs'* `capacity_factor' * -`semie' * `current_credit'
> )/`discount') * (1 - (1/(1+`discount')^(`lifetime' - 1)))

. 
. local fisc_ext_t = 0

. 
. local fisc_ext_lr = -1 * (`val_global_pollutants' - `rebound_global
> ' - `val_env_cost') * ${USShareFutureSSC} * ${USShareGovtFutureSCC}

. 
. local policy_spending = `program_cost' + `fisc_ext_s'

. local total_cost = `program_cost' + `fisc_ext_s' + `fisc_ext_t' + `
> fisc_ext_lr'

. 
. **************************
. /* 7. MVPF Calculations */
. **************************
. local MVPF = (`WTP' / `total_cost')

.         
. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. global cost_`1' = `total_cost'

. global total_cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global wtp_glob_`1' = (`val_global_pollutants' - `val_env_cost') * 
> (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = -`rebound_local'

. global wtp_r_glob_`1' = -`rebound_global' * (1 - (${USShareFutureSS
> C} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = `local_pollutants'

. global wtp_prod_`1' = `wtp_producers'

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = `fisc_ext_t'

. global fisc_ext_s_`1' =  `fisc_ext_s'

. global fisc_ext_lr_`1' = `fisc_ext_lr'

. global p_spend_`1' = `policy_spending'

. global US_MVPF_`1' = (`WTP_USFut' + `WTP_USPres')/`total_cost'

. 
. global elas_`1' = `elas'

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_glob wtp_r_glob WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_glob", "wtp
> _r_glob", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_s fisc_ext_t fisc_ext_l
> r total_cost

. global cost_comps_`1'_commas "program_cost", "fisc_ext_s", "fisc_ex
> t_t", "fisc_ext_lr", "total_cost"

. global `1'_name "Cookstoves - India"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marginal"' 2 `"Inframarginal"' 3 `""Env" "Globa
> l""' 4 `""Rebound" "Global""' 5 `"Total WTP"' 7 `""Program" "Cost""
> ' 8 `""FE" "Subsidies""' 9 `""FE" "Taxes""' 10 `""FE" "Long-Run""' 
> 11 `"Total Cost"' ///
> 

. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 4

. global color_group3_`1' = 4

. global cost_color_start_`1' = 7

. global color_group4_`1' = 10

. 
. global note_`1' = `"Publication: " "SCC: `scc'" "Description: "'

. global normalize_`1' = 1

. 
. di `MVPF'
7.6411711

. di `total_cost'
80287.499

. di `WTP'
613490.52

. di `wtp_cons'


. di `local_pollutants'
0

. di `global_pollutants'
10199306

. di `rebound_global'
136999.39

. di `rebound_local'
0

. di `wtp_society'
551840.38

. di `WTP_RoW' + `WTP_USFut' + `WTP_USPres'
613490.52

. di (`WTP_USFut' + `WTP_USPres')/`total_cost'
.89933745

. 
end of do-file

. 
. post `numbers' ("india_offset_us_mvpf") (${WTP_USFut_india_offset} 
> / ${cost_india_offset})

. 
. * india_offset elasticity
. 
. post `numbers' ("india_offset_elasticity") (${elas_india_offset})

. 
. * cookstoves global enviro before normalizing by program cost
. 
. run_program cookstoves
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *******************************************************************
> *************
. /*  0. Program: Cookstove Subsidies (for Kenyans)                  
>    */
. *******************************************************************
> *************
. /*
> Berkouwer, Susanna B. and Joshua T. Dean. 
> "Credit, Attention, and Externalities in the Adoption of Energy Eff
> icient Technologies by Low-Income Housholds."
> American Economic Review 112(10): 3291--3330.
> https://www.aeaweb.org/articles?id=10.1257/aer.20210766
> */
. 
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. local discount = ${discount_rate}

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimat
> es.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimat
> es. */
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *   if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_n
> ame}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rowna
> mes(draw_number)
.         restore
. *   }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder
> _name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
>   
. 
. levelsof estimate, local(estimates)
`"carbon_per_cookstove"' `"savings"' `"takeup_control"' `"takeup_trea
> tment"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1         3.5           .        3.5        3
> .5

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1       -2.28           .      -2.28      -2.
> 28

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .006           .       .006       .0
> 06

    Variable |        Obs        Mean    Std. dev.       Min        M
> ax
-------------+-------------------------------------------------------
> --
          pe |          1        .545           .       .545       .5
> 45
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${fold
> er_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
. 
.     preserve

. 
.         if "`4'" == "baseline"{
.             
.             local dollar_year = ${policy_year}
.             
.         }

.         
.         if "`4'" == "current"{
.             
.             local dollar_year = ${today_year}
.             
.         }

.                         
.         local ghg CO2 CH4 N2O

.         foreach g of local ghg {
  2.             
.                         local social_cost_`g'_2020 = ${sc_`g'_`doll
> ar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                         
.                         local social_cost_`g'_2021 = ${sc_`g'_2021}
>  * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  4.                 
.         }       

.         
.     restore

. 
. 
. ****************************************************
. /* 4. Calculate MVPF */
. ****************************************************
. local subsidy = ${cookstove_subsidy} * (${cpi_`dollar_year'} / ${cp
> i_${policy_year}})

. local policy_impact = `takeup_treatment' - `takeup_control'

. 
. local wtp_infr = `takeup_control' * `subsidy'

. 
. // local wtp_marg = `policy_impact' * `subsidy' * 0.5   
. local wtp_marg = `policy_impact' * ((-1 * `savings' * 52) + (-1 * `
> savings' * 52) / (1+`discount')) // Cookstoves save $2.28 per week 
> for two years     

.         
. local wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `socia
> l_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2_202
> 1') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * ${USShareGov
> tFutureSCC}))

. local alt_wtp_soc = `policy_impact' * ((`carbon_per_cookstove' * `s
> ocial_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cost_CO2
> _2021') / (1 + `discount'))) * (1 - (${USShareFutureSSC} * 0.255))

. 
. local program_cost = `subsidy' * `takeup_treatment'

. 
. 
. local fiscal_externality_lr = -`policy_impact' * ((`carbon_per_cook
> stove' * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `soci
> al_cost_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * ${
> USShareGovtFutureSCC})

. local alt_fisc_ext_lr = -`policy_impact' * ((`carbon_per_cookstove'
>  * `social_cost_CO2_2020') + ((`carbon_per_cookstove' * `social_cos
> t_CO2_2021') / (1 + `discount'))) * (${USShareFutureSSC} * 0.255)

. local alt_fisc_ext_lr_n = `alt_fisc_ext_lr' / `program_cost'

. di in red "alternative long-run FE is `alt_fisc_ext_lr_n'"
alternative long-run FE is -1.68314539064574

. 
. local total_wtp = `wtp_marg' + `wtp_infr' + `wtp_soc'

. local total_cost = `program_cost' + `fiscal_externality_lr'

. local alt_total_cost_n = (`program_cost' + `alt_fisc_ext_lr') / `pr
> ogram_cost'

. local alt_total_cost = `program_cost' + `alt_fisc_ext_lr'

. di in red "alternative total cost is `alt_total_cost_n'"
alternative total cost is -.6831453906457395

. 
. 
. local MVPF = `total_wtp' / `total_cost'

. 
. local WTP_USPres = 0

. local WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * `soc
> ial_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * ${USShareGovtFutureSCC}))

. local alt_WTP_USFut = `policy_impact' * ((`carbon_per_cookstove' * 
> `social_cost_CO2_2020') + ///
>                   ((`carbon_per_cookstove' * `social_cost_CO2_2021'
> ) / (1 + `discount'))) * (${USShareFutureSSC} - (${USShareFutureSSC
> } * 0.255))

. 
. local WTP_RoW = (1-(${USShareFutureSSC})) * `policy_impact' * ((`ca
> rbon_per_cookstove' * `social_cost_CO2_2020') + ((`carbon_per_cooks
> tove' * `social_cost_CO2_2021') / (1 + `discount'))) + `wtp_marg' +
>  `wtp_infr'

. 
. local alt_us_only_mvpf = `alt_WTP_USFut' / `alt_total_cost'

. di in red "alternative US-only MVPF is `alt_us_only_mvpf'"
alternative US-only MVPF is -7.198211151071587

. 
. 
. assert round((`WTP_RoW' + `WTP_USFut' + `WTP_USPres')/`total_cost',
>  0.01) == round(`MVPF', 0.01)        

.         
. if (`total_wtp' > 0 & `total_cost' < 0) {
.         local MVPF = 99999 // positive infinity
. }

. else if (`total_wtp' < 0 & `total_cost' > 0) {
.         local MVPF = -99999 // negative infinity
. }

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global WTP_`1' = `total_wtp'

. 
. global wtp_soc_l_`1' = 0

. global wtp_soc_g_`1' = `wtp_soc'

. 
. di in red "cookstoves global damages are ${wtp_soc_g_`1'}"
cookstoves global damages are 714.4945112471079

. pause

. 
. global wtp_marg_`1' = `wtp_marg' 

. global wtp_inf_`1' = `wtp_infr' 

. 
. global program_cost_`1' = `program_cost'

. global fisc_ext_t_`1' = 0

. global fisc_ext_s_`1' =  0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. global cost_`1' = `total_cost'

. 
. global alt_US_MVPF_`1' = `alt_us_only_mvpf'

. global alt_cost_`1' = `alt_total_cost'

. global alt_WTP_USFut_`1' = `alt_WTP_USFut'

. 
. ****************
. /* 6. Waterfall */
. ****************
. global wtp_comps_`1' wtp_inf wtp_marg wtp_soc_g WTP

. global wtp_comps_`1'_commas "wtp_inf", "wtp_marg", "wtp_soc_g", "WT
> P"

. 
. global cost_comps_`1' program_cost fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_lr", "cost" 

. 
. global `1'_xlab 1 `"Inframarginal"' 2 `" "Energy" "Savings" "' 3 `"
> "Env" "Global""' 4 `""Total" "WTP""' ///
>                 6 `""Program" "Cost""' 7 `" "Climate" "FE" "' 8 `""
> Govt" "Cost""'

.                                 
. global color_group1_`1' = 2

. global color_group2_`1' = 3

. global color_group3_`1' = 2

. global color_group5_`1' = 2

. global cost_color_start_`1' = 6

. global color_group4_`1' = 7                             

. 
end of do-file

. post `numbers' ("wtp_soc_g_cookstoves") (${wtp_soc_g_cookstoves})

. 
. /*
> *--------------------------------------------
> * 5 - Electricity
> *--------------------------------------------
> *Electric Utility Markups
> post `numbers' ("electricity_markup") (1 - ${cost_price_US_2020}) /
> / Created in gas_electricity_externalities.do
> 
> *--------------------------------------------
> * 6 - Wind
> *--------------------------------------------
> 
> *1.13% increase in wind production for a 1% decrease in prices
> run_program hitaj_ptc
> post `numbers' ("hitaj_wind_response") (${epsilon_hitaj_ptc}) // Cr
> eated in hitaj_ptc.do policy file
> 
> *Wind category average MVPF w/ constant semie
> global constant_semie = "yes"
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> di ((${WTP_cc_hitaj_ptc} + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmal
> i_ptc}) / (${cost_hitaj_ptc} + ${cost_metcalf_ptc} + ${cost_shirmal
> i_ptc}))
> 
> post `numbers' ("wind_average_constant_semie") ((${WTP_cc_hitaj_ptc
> } + ${WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj
> _ptc} + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> global constant_semie = "no"
> 
> *Wind average with European wind subsidies
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> 
> keep if inlist(program, "hitaj_ptc", "metcalf_ptc", "shirmali_ptc",
>  "nicolini_eu", "hitaj_ger", "bolk_UK", "bolk_Spain", "bolk_France"
> , "bolk_Germany")
> 
> qui sum component_value if component_type == "WTP_cc"
> local total_WTP = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_Cost = `r(sum)'
> 
> post `numbers' ("wind_average_european") (`total_WTP'/`total_Cost')
> 
> 
> *Scale LCOE by 50%
> global lcoe_scaling = "yes"
> global scalar = 1.5
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_150_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> 
> *Scale LCOE by 100%
> global scalar = 2
> 
> run_program hitaj_ptc
> run_program metcalf_ptc
> run_program shirmali_ptc
> 
> post `numbers' ("wind_lcoe_200_percent") ((${WTP_cc_hitaj_ptc} + ${
> WTP_cc_metcalf_ptc} + ${WTP_cc_shirmali_ptc}) / (${cost_hitaj_ptc} 
> + ${cost_metcalf_ptc} + ${cost_shirmali_ptc}))
> 
> global lcoe_scaling = "no"
> 
> *US-Only wind average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if program == "hitaj_ptc" | program == "metcalf_ptc" | program
>  == "shirmali_ptc"
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("wind_avg_us_only") (`total_us_wtp' / `total_cost')
> 
> 
> *Wind Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname wind_mvpfs_nma
> tempfile wind_mvpfs_nma_data
> postfile `wind_mvpfs_nma' str18 policy elasticity sub_level mvpf WT
> P_cc cost using `wind_mvpfs_nma_data', replace 
> 
> local policies = "hitaj_ptc metcalf_ptc shirmali_ptc"
> foreach policy in `policies' {
>         
>         forvalues sub = 0(0.001)0.027 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `wind_mvpfs_nma' ("`policy'") (${`policy'_ep})
>  (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'})
>         }
> }
> 
> postclose `wind_mvpfs_nma'      
> global subsidy_loop = "no"
> use `wind_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> di `r(mean)'
> post `numbers' ("wind_non_marginal_avg") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 7 - Solar
> *--------------------------------------------
> *Fiscal externality if the ITC is 30%
> global subsidy_change = "yes"
> run_program pless_ho
> di (${fisc_ext_s_pless_ho} / ${program_cost_pless_ho})
> post `numbers' ("solar_fe_itc30") (${fisc_ext_s_pless_ho} / ${progr
> am_cost_pless_ho})
> global subsidy_change = "no"
> 
> *Utility scale solar
> run_program uscale_solar, folder(robustness)
> di ${MVPF_uscale_solar}
> post `numbers' ("utility_scale_solar_mvpf") (${MVPF_uscale_solar})
> 
> *US-Only Solar Average
> use "${code_files}/4_results/`main_data_set'/compiled_results_all_u
> ncorrected_vJK", clear 
> keep if inlist(program, "ne_solar", "ct_solar", "pless_ho", "pless_
> tpo", "hughes_csi")
> 
> qui sum component_value if component_type == "WTP_USPres" | compone
> nt_type == "WTP_USFut" 
> local total_us_wtp = `r(sum)'
> 
> qui sum component_value if component_type == "cost"
> local total_cost = `r(sum)'
> post `numbers' ("solar_us_only_mvpf") (`total_us_wtp' / `total_cost
> ')
> 
> *Solar Non-Marginal Category Average
> global subsidy_loop = "yes"
> 
> tempname solar_mvpfs_nma
> tempfile solar_mvpfs_nma_data
> postfile `solar_mvpfs_nma' str18 policy elasticity sub_level mvpf W
> TP_cc cost using `solar_mvpfs_nma_data', replace 
> 
> local policies = "pless_ho pless_tpo ct_solar ne_solar hughes_csi"
> foreach policy in `policies' {
> 
>         di in red "Starting policy `policy'..."
>         
>         forvalues sub = 0(0.01)0.31 {
>                 
>                 global fed_sub_loop = `sub'             
>                 qui run_program `policy'
>                 
>                 post `solar_mvpfs_nma' ("`policy'") (${`policy'_ep}
> ) (`sub') (${MVPF_`policy'}) (${WTP_cc_`policy'}) (${cost_`policy'}
> )
>         }
> }
> 
> postclose `solar_mvpfs_nma'     
> global subsidy_loop = "no"
> 
> use `solar_mvpfs_nma_data', clear
> 
> collapse (mean) WTP_cc cost, by(sub)
> gen mvpf = WTP_cc / cost
> qui sum mvpf
> post `numbers' ("solar_non_marginal_mvpf") (`r(mean)')
> 
> 
> *--------------------------------------------
> * 8 - Weatherization
> *--------------------------------------------
> 
> *Category average with 100% marginal
> global marginal_change = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global marginal_change = "no"
> 
> di ((`retrofit_res_wtp_scaled'/ `retrofit_res_cost_scaled'))
> 
> post `numbers' ("weatherization_avg_all_marginal") ((`wap_wtp_scale
> d' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_
> rf_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwa
> p_nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_
> scaled' + `wisc_rf_cost_scaled'))
> 
> 
> *Category average with Michigan Grid
> global grid_michigan = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_michigan = "no"
> post `numbers' ("weatherization_midwest_grid") ((`wap_wtp_scaled' +
>  `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_rf_w
> tp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap_nb
> _cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_scal
> ed' + `wisc_rf_cost_scaled'))
> 
> *Category average with California Grid
> global grid_california = "yes"
> local weatherization_policies = "wap ihwap_nb retrofit_res hancevic
> _rf wisc_rf"
> 
> foreach policy in `weatherization_policies' {
>         run_program `policy'
>         
>         local `policy'_wtp_scaled = ${WTP_`policy'} / ${program_cos
> t_`policy'}
>         local `policy'_cost_scaled = ${cost_`policy'} / ${program_c
> ost_`policy'}
>         
> }
> global grid_california = "no"
> post `numbers' ("weatherization_california_grid") ((`wap_wtp_scaled
> ' + `ihwap_nb_wtp_scaled' + `retrofit_res_wtp_scaled' + `hancevic_r
> f_wtp_scaled' + `wisc_rf_wtp_scaled') / (`wap_cost_scaled' + `ihwap
> _nb_cost_scaled' + `retrofit_res_cost_scaled' + `hancevic_rf_cost_s
> caled' + `wisc_rf_cost_scaled'))
> 
> 
> *--------------------------------------------
> * 9 - Appliance Rebates
> *--------------------------------------------
> 
> *Rebound effect for clothes washers rebate
> run_program c4a_cw
> 
> post `numbers' ("clothes_washers_local_rebound") (${wtp_r_loc_c4a_c
> w}/${program_cost_c4a_cw})
> post `numbers' ("clothes_washers_global_rebound") (${wtp_r_glob_c4a
> _cw}/${program_cost_c4a_cw})
> 
> 
> *--------------------------------------------
> * 10 - Other Subsidies
> *--------------------------------------------
> *Rebound effect for CA electricity rebate
> run_program ca_electric
> 
> post `numbers' ("elec_rebate_local_rebound") (${wtp_r_loc_ca_electr
> ic}/${program_cost_ca_electric})
> post `numbers' ("elec_rebate_global_rebound") (${wtp_r_glob_ca_elec
> tric}/${program_cost_ca_electric})
> 
> 
> *--------------------------------------------
> * 11 - Nudges
> *--------------------------------------------
> 
> *Nudge MVPFs for SCC of $76
> local scc_temp = ${scc}
> global scc = 76
> qui do "${github}/wrapper/macros.do"    
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> global scc = `scc_temp'
> qui do "${github}/wrapper/macros.do" "no"
> 
> post `numbers' ("nudge_mid_atlantic_76") (${her_MVPF_region4})
> post `numbers' ("nudge_northwest_76") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_76") (${her_MVPF_region3})
> post `numbers' ("nudge_california_76") (${her_MVPF_region2})
> post `numbers' ("nudge_new_england_76") (${her_MVPF_region1})
> 
> *Nudge MVPFs with Persistence
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "yes"
> post `numbers' ("nudge_ca_alcott_kessler") (${her_MVPF_region2})
> post `numbers' ("nudge_ne_alcott_kessler") (${her_MVPF_region1})
> 
> *Nudge MVPFs without utility profits
> global value_profits = "no"
> qui do "${github}/figtab/mvpf_plots_nudges.do" "no" "no"
> 
> post `numbers' ("nudge_mid_atlantic_no_profits") (${her_MVPF_region
> 4})
> post `numbers' ("nudge_northwest_no_profits") (${her_MVPF_region5})
> post `numbers' ("nudge_midwest_no_profits") (${her_MVPF_region3})
> post `numbers' ("nudge_california_no_profits") (${her_MVPF_region2}
> )
> post `numbers' ("nudge_new_england_no_profits") (${her_MVPF_region1
> })
> global value_profits = "yes"
> 
> *ATE per electricity and natural gas nudge
> use "${output_fig}/figures_data/Nudge_inter_v1.dta", clear
> gen effect_per_nudge = ATE/Nudges_per_year
> collapse effect_per_nudge [aw=Treated], by(Utilitytype)
> 
> qui sum effect_per_nudge if Utilitytype == "ELECTRICITY"
> post `numbers' ("electricity_nudge_ATE") (`r(mean)')
> 
> qui sum effect_per_nudge if Utilitytype == "NATURAL GAS"
> post `numbers' ("natural_gas_nudge_ATE") (`r(mean)')
> 
> *PER MVPF for 500 & 1000 marginal costs & blackout scenario
> run_program PER
> post `numbers' ("per_mvpf_1000_mc") (${MVPF_per})
> 
> global PER_robustness = "yes"
> global PER_mc = "low"
> run_program PER
> post `numbers' ("per_mvpf_500_mc") (${MVPF_per})
> 
> global PER_mc = "vll"
> run_program PER
> post `numbers' ("per_mvpf_vll_mc") (${MVPF_per})
> 
> global PER_robustness = "no" 
> 
> *--------------------------------------------
> * 12 - Gasoline Taxes
> *--------------------------------------------
> global gas_tax_robustness_numbers "yes"
> run_program small_gas_lr, mode(current) // For LBD benefits from ga
> s taxes, can run any gas tax--do not vary with elasticity of gasoli
> ne.
> macro drop gas_tax_robustness_numbers
> 
>         post `numbers' ("cross_price_elasticity_gas_EVs_current") (
> ${report_cross_price})
>         post `numbers' ("gas_tax_static_ev_ext_current") (${report_
> gas_tax_static_ev_ext})
>         post `numbers' ("gas_tax_dynamic_ev_price_current") (${repo
> rt_gas_tax_dynamic_ev_price})
>         post `numbers' ("gas_tax_dynamic_ev_env_current") (${report
> _gas_tax_dynamic_ev_env})
>         
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas ///
>                                                                    
>      manzan_gas park_gas sent_ch_gas small_gas_lr su_gas
> 
> local running_US_WTP = 0
> local running_cost = 0
> local running_local_pollution = 0
> local running_local_driving = 0
> local running_global_US_only = 0
> local running_tax_fe = 0
> local running_prod_wtp = 0
> 
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p', mode(current)
>         
>         local running_US_WTP = `running_US_WTP' + (${WTP_USPres_`p'
> } + ${WTP_USFut_`p'})
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         local running_local_pollution = `running_local_pollution' +
>  ${wtp_soc_l_po_`p'}
>         local running_local_driving = `running_local_driving' + ${w
> tp_soc_l_dr_`p'}
>         
>         local running_global_US_only = `running_global_US_only' + /
> //
>                                 ((${wtp_soc_g_`p'}/(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC}))) * (${USShareFutureSSC} - (${
> USShareFutureSSC} * ${USShareGovtFutureSCC})))
>                                 
>         local running_tax_fe = `running_tax_fe' + ${fisc_ext_t_`p'}
>         local running_prod_wtp = `running_prod_wtp' + ${wtp_prod_s_
> `p'}
>         
> }
>         
> post `numbers' ("avg_gas_tax_local_pollution_wtp_2020") (`running_l
> ocal_pollution' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_local_driving_wtp_2020") (`running_loc
> al_driving' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_summed_local_wtp_2020") ((`running_loc
> al_pollution' + `running_local_driving') / 12) // Average across tw
> elve gas taxes.
> post `numbers' ("avg_gas_tax_US_only_global_wtp_2020") (`running_gl
> obal_US_only' / 12) // Average across twelve gas taxes.
> post `numbers' ("avg_gas_tax_tax_fe_2020") (`running_tax_fe' / 12)
> post `numbers' ("avg_gas_tax_wtp_prod_2020") (`running_prod_wtp' / 
> 12)
> 
> post `numbers' ("US_WTP_only_avg_gas_tax_current") (`running_US_WTP
> ' / `running_cost')
> 
> // To obtain our gas externalities, run gas_vehicle_externalities.
> post `numbers' ("per_gallon_gas_ext_total") (${gas_ldv_ext_2020})
> post `numbers' ("per_gallon_gas_ext_global") (${gas_ldv_ext_global_
> 2020})
> post `numbers' ("per_gallon_gas_ext_local") (${gas_ldv_ext_local_20
> 20})
> 
> 
> 
> // Gas Taxes w/ Only Driving Externalities
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> 
> local total_accident_congestion_wtp = 0
> local total_accident_congestion_cost = 0
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         // Ignoring all climate and pollution effects, including cl
> imate FE.
>         local total_accident_congestion_wtp = `total_accident_conge
> stion_wtp' + (${wtp_soc_l_dr_`p'} + ${wtp_cons_`p'})
>         local total_accident_congestion_cost = `total_accident_cong
> estion_cost' + (${cost_`p'})
>         
> }
> post `numbers'("average_gas_tax_only_driving_ext") (`total_accident
> _congestion_wtp' / `total_accident_congestion_cost')
> 
> 
> 
> // Gas Taxes w/ Different Prices
> global vary_gas_price   yes
> local alternative_year 2021
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> 
> global vary_gas_price   yes
> local alternative_year 2022
>         global alternative_gas_price = ${nominal_gas_price_`alterna
> tive_year'}
>         
> local running_wtp = 0
> local running_cost = 0
> 
> local main_sample_gas_taxes     cog_gas dk_gas gelman_gas h_gas_01_
> 06 k_gas_15_22 li_gas levin_gas manzan_gas park_gas sent_ch_gas sma
> ll_gas_lr su_gas
> foreach p of local main_sample_gas_taxes {
>         
>         run_program `p' , mode(current)
>         
>         local running_wtp = `running_wtp' + ${WTP_`p'}
>         local running_cost = `running_cost' + ${cost_`p'}
>         
>         
> }
> macro drop alternative_gas_price vary_gas_price alternative_year
> post `numbers' ("average_gas_tax_`alternative_year'_price") (`runni
> ng_wtp' / `running_cost')
> 
> 
> *--------------------------------------------
> * 13 - Cap and Trade
> *--------------------------------------------
> 
> run_program rggi, mode(baseline)
>         post `numbers' ("rggi_permit_price_in_context") (${permit_p
> rice_rggi})
>         post `numbers' ("carbon_abated_rggi_short_tons_in_context")
>  (${gov_carbon_rggi})
>         post `numbers' ("macc_slope_rggi_in_context") (${macc_rggi}
> )
>         post `numbers' ("fiscal_externality_permits_rggi_in_context
> ") (${fisc_ext_t_rggi} * -1)
>         post `numbers' ("change_permit_prices_rggi_in_context") (${
> wtp_permits_rggi} * -1)
>         post `numbers' ("fiscal_externality_climate_rggi_in_context
> ") (${fisc_ext_lr_rggi} * -1)
>         post `numbers' ("total_cost_rggi_in_context") (${cost_rggi}
>  * -1)
>         post `numbers' ("firms_wtp_rggi_in_context") (${wtp_permits
> _rggi} * -1)
>         post `numbers' ("leakage_share_rggi_in_context") (1 - ${sha
> re_leakage_rggi})
>         post `numbers' ("global_benefits_rggi_in_context") (${wtp_s
> oc_g_rggi} * -1)
>         post `numbers' ("local_benefits_rggi_in_context") (${wtp_so
> c_l_rggi} * -1)
>         post `numbers' ("total_wtp_rggi_in_context") (${WTP_rggi} *
>  -1)
>         post `numbers' ("MVPF_rggi_in_context") (${MVPF_rggi})
>         post `numbers' ("rggi_eta_in_context") (${wtp_permits_rggi}
>  / ${permit_price_rggi})
>         post `numbers' ("rggi_V(1-L)p_in_context") ((${wtp_soc_rggi
> } * -1) / ${permit_price_rggi})
>         post `numbers' ("MVPF_rggi_wo_local_damages_in_context") ((
> ${wtp_permits_rggi} + ${wtp_soc_g_rggi}) / ${cost_rggi} )
>         post `numbers' ("rggi_incidence_comparison_in_context") (ab
> s(${wtp_soc_rggi} / ${wtp_permits_rggi}))
> 
> run_program rggi, mode(current)
>         post `numbers' ("total_cost_rggi_current") (${cost_rggi})
>         post `numbers' ("enviro_wtp_rggi_current") (${wtp_soc_rggi}
> )
>         post `numbers' ("firms_wtp_rggi_current") (${wtp_permits_rg
> gi})
>         post `numbers' ("MVPF_rggi_current") (${MVPF_rggi})
>         
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context") (${MVPF
> _ca_cnt})
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_wo_local"
> ) ((${wtp_permits_ca_cnt} + ${wtp_soc_g_ca_cnt}) / ${cost_ca_cnt})
> 
> global toggle_firm_assumption yes
> run_program ca_cnt, mode(baseline)
>         post `numbers' ("MVPF_ca_cap_and_trade_in_context_alternati
> ve_firms_assumption") (${MVPF_ca_cnt})
>         assert "${toggle_firm_assumption}" == ""
>         
> run_program ets_c, mode(baseline)
>         post `numbers' ("ETS_Colmer_permit_price_in_context") (${pe
> rmit_price_ets_c})
>         post `numbers' ("ETS_Colmer_firms_wtp_in_context") (${wtp_p
> ermits_ets_c})       
>         post `numbers' ("ETS_Colmer_global_wtp_in_context") (${wtp_
> soc_g_ets_c})        
>         post `numbers' ("ETS_Colmer_total_wtp_in_context") (${WTP_e
> ts_c} *-1)   
>         post `numbers' ("ETS_Colmer_permit_fe_in_context") (${fisc_
> ext_t_ets_c})
>         post `numbers' ("ETS_Colmer_permit_price_revenue_in_context
> ") (${program_cost_ets_c})
>         post `numbers' ("ETS_Colmer_total_cost_in_context") (${cost
> _ets_c})
> 
> run_program ets, mode(baseline)
>         post `numbers' ("ETS_BayerAklin_permit_price_in_context") (
> ${permit_price_ets})
>         post `numbers' ("ETS_BayerAklin_total_CO2_reduction") (${go
> v_carbon_ets})
>         post `numbers' ("ETS_BayerAklin_macc_slope_in_context") (${
> macc_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_climate_fe_in_context") (${
> fisc_ext_lr_ets})
>         post `numbers' ("ETS_BayerAklin_firms_wtp_in_context") (${w
> tp_permits_ets})
>         post `numbers' ("ETS_BayerAklin_global_wtp_in_context") (${
> wtp_soc_g_ets})      
>         post `numbers' ("ETS_BayerAklin_total_wtp_in_context") (${W
> TP_ets})     
>         post `numbers' ("ETS_BayerAklin_total_cost_in_context") (${
> cost_ets})
> 
> */
. postclose `numbers'

. 
. 
. use `robustness_values', clear

. save "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication
    Package/4_results/robustness.dta saved

. export excel using "${code_files}/4_results/robustness", replace
file C:/Users/acreeron/Dropbox (MIT)/Regulation/Replication Package/4
> _results/robustness.xlsx saved

. 
. 
. 
. 
end of do-file

. run_program ets
vmt_adjust: .6154440799999999
(2 vars, 5 obs)
(4 observations deleted)

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* Bayer, Patrick, and Michael Aklin. 2020. 
> "The European Union Emissions Trading System reduced CO2 emissions despite low prices."
> Proceedings of the National Academy of Sciences 117(16):8804-8812. 
> https://doi.org/10.1073/pnas.1918128117
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draws/${folder_name}/${t
> s_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw
> _number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx"
> , clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1     -1219.5           .    -1219.5    -1219.5
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal
> _draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         local total_delta_CO2 = `ets_CO2_abated' * 1000000 // From paper; millions of t
> ons to total tons. 

. 
.         import excel "${policy_assumptions}", first clear sheet("ETS_C&T_data")
(3 vars, 19 obs)

. 
.         egen q = total(allowances_auctioned) if inrange(year, 2008, ${policy_year})
(10 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                         
.         gen real_annual_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
>  2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_annual_price = annual_price * (${cpi_`dollar_year'}/${cpi_
> `y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         qui sum real_annual_price [aw = allowances_auctioned] if inrange(year, 2008, ${
> policy_year}) 

.                 local baseline_price = r(mean)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_annual_price if year == `dollar_year' 
.                         local permit_price = r(mean)
.                 
.         }       

. 
.         local semie = (`baseline_price' / `total_delta_CO2') * `permit_q'

. 
. ****************************************************
. /* 3. Social Costs */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / ${cpi_${sc_do
> llar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carbon.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inrange(year, 2008, ${pol
> icy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

.         
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.                 local wtp_permits = `wtp_permits_grandfathered' + `wtp_permits_auctione
> d'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  6.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + (`wtp_soc_g'*(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShare
> GovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_producers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} * ${USShareGovtFutur
> eSCC}) * -1      

. local total_cost = `permit_revenue' + `fiscal_externality' + `fiscal_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost'  

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.01) == ro
> und(`MVPF', 0.01)

.         
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}
> )))

. global wtp_soc_g_`1'  = `wtp_soc_g'* (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC
> }))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global gov_carbon_`1' = `total_delta_CO2'

. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `total_delta_CO2')

. 
end of do-file

. di ${WTP_ets}
-168.70944

. di ${WTP_ets}, mode(current)
-168.70944 unknown function mode()
r(133);

. run_program ets, mode(current)
vmt_adjust: .6154440799999999
(2 vars, 5 obs)
(4 observations deleted)

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* Bayer, Patrick, and Michael Aklin. 2020. 
> "The European Union Emissions Trading System reduced CO2 emissions despite low prices."
> Proceedings of the National Academy of Sciences 117(16):8804-8812. 
> https://doi.org/10.1073/pnas.1918128117
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draws/${folder_name}/${t
> s_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw
> _number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx"
> , clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1     -1219.5           .    -1219.5    -1219.5
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal
> _draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         local total_delta_CO2 = `ets_CO2_abated' * 1000000 // From paper; millions of t
> ons to total tons. 

. 
.         import excel "${policy_assumptions}", first clear sheet("ETS_C&T_data")
(3 vars, 19 obs)

. 
.         egen q = total(allowances_auctioned) if inrange(year, 2008, ${policy_year})
(10 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                         
.         gen real_annual_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022
>  2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_annual_price = annual_price * (${cpi_`dollar_year'}/${cpi_
> `y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         qui sum real_annual_price [aw = allowances_auctioned] if inrange(year, 2008, ${
> policy_year}) 

.                 local baseline_price = r(mean)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_annual_price if year == `dollar_year' 
.                         local permit_price = r(mean)
.                 
.         }       

. 
.         local semie = (`baseline_price' / `total_delta_CO2') * `permit_q'

. 
. ****************************************************
. /* 3. Social Costs */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / ${cpi_${sc_do
> llar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carbon.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inrange(year, 2008, ${pol
> icy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

.         
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.                 local wtp_permits = `wtp_permits_grandfathered' + `wtp_permits_auctione
> d'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  6.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + (`wtp_soc_g'*(1 - (${USShareF
> utureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShare
> GovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_producers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} * ${USShareGovtFutur
> eSCC}) * -1      

. local total_cost = `permit_revenue' + `fiscal_externality' + `fiscal_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost'  

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.01) == ro
> und(`MVPF', 0.01)

.         
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}
> )))

. global wtp_soc_g_`1'  = `wtp_soc_g'* (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC
> }))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global gov_carbon_`1' = `total_delta_CO2'

. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `total_delta_CO2')

. 
end of do-file

. run_program ets, mode(baseline)
vmt_adjust: .6154440799999999
(2 vars, 5 obs)
(4 observations deleted)

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* Bayer, Patrick, and Michael Aklin. 2020. 
> "The European Union Emissions Trading System reduced CO2 emissions despite low prices."
> Proceedings of the National Academy of Sciences 117(16):8804-8812. 
> https://doi.org/10.1073/pnas.1918128117
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1     -1219.5           .    -1219.5    -1219.5
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         local total_delta_CO2 = `ets_CO2_abated' * 1000000 // From paper; millions of tons to total tons. 

. 
.         import excel "${policy_assumptions}", first clear sheet("ETS_C&T_data")
(3 vars, 19 obs)

. 
.         egen q = total(allowances_auctioned) if inrange(year, 2008, ${policy_year})
(10 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                         
.         gen real_annual_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_annual_price = annual_price * (${cpi_`dollar_year'}/${cpi_`y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         qui sum real_annual_price [aw = allowances_auctioned] if inrange(year, 2008, ${policy_year}) 

.                 local baseline_price = r(mean)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_annual_price if year == `dollar_year' 
.                         local permit_price = r(mean)
.                 
.         }       

. 
.         local semie = (`baseline_price' / `total_delta_CO2') * `permit_q'

. 
. ****************************************************
. /* 3. Social Costs */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carbon.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inrange(year, 2008, ${policy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

.         
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.                 local wtp_permits = `wtp_permits_grandfathered' + `wtp_permits_auctioned'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  6.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + (`wtp_soc_g'*(1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_producers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} * ${USShareGovtFutureSCC}) * -1      

. local total_cost = `permit_revenue' + `fiscal_externality' + `fiscal_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost'  

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.01) == round(`MVPF', 0.01)

.         
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))

. global wtp_soc_g_`1'  = `wtp_soc_g'* (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global gov_carbon_`1' = `total_delta_CO2'

. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `total_delta_CO2')

. 
end of do-file

. di ${WTP_ets}
-134.68273

. di ${cost_ets}
14.412451

. run_program ets , mode(baseline)
vmt_adjust: .6154440799999999
(2 vars, 5 obs)
(4 observations deleted)

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* Bayer, Patrick, and Michael Aklin. 2020. 
> "The European Union Emissions Trading System reduced CO2 emissions despite low prices."
> Proceedings of the National Academy of Sciences 117(16):8804-8812. 
> https://doi.org/10.1073/pnas.1918128117
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1     -1219.5           .    -1219.5    -1219.5
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         local total_delta_CO2 = `ets_CO2_abated' * 1000000 // From paper; millions of tons to total tons. 

. 
.         import excel "${policy_assumptions}", first clear sheet("ETS_C&T_data")
(3 vars, 19 obs)

. 
.         egen q = total(allowances_auctioned) if inrange(year, 2008, ${policy_year})
(10 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                         
.         gen real_annual_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_annual_price = annual_price * (${cpi_`dollar_year'}/${cpi_`y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         qui sum real_annual_price [aw = allowances_auctioned] if inrange(year, 2008, ${policy_year}) 

.                 local baseline_price = r(mean)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_annual_price if year == `dollar_year' 
.                         local permit_price = r(mean)
.                 
.         }       

. 
.         local semie = (`baseline_price' / `total_delta_CO2') * `permit_q'

. 
. ****************************************************
. /* 3. Social Costs */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carbon.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inrange(year, 2008, ${policy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

.         
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.                 local wtp_permits = `wtp_permits_grandfathered' + `wtp_permits_auctioned'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  6.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + (`wtp_soc_g'*(1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_producers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} * ${USShareGovtFutureSCC}) * -1      

. local total_cost = `permit_revenue' + `fiscal_externality' + `fiscal_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost'  

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.01) == round(`MVPF', 0.01)

.         
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))

. global wtp_soc_g_`1'  = `wtp_soc_g'* (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global gov_carbon_`1' = `total_delta_CO2'

. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `total_delta_CO2')

. 
end of do-file

. di ${wtp_soc_g_ets}
-153.77739

. di ${policy_year}
2016

. run_program ets_c , mode(baseline)
vmt_adjust: .6154440799999999
(2 vars, 5 obs)
(4 observations deleted)

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* 
> Colmer, Jonathan, Ralf Martin, Mirabelle Muuls, and Ulrich J. Wagner. 2024.
> "Does Pricing Carbon Mitigate Climate Change? Firm-Level Evidence from the European Trading System"
> Review of Economic Studies 00: 1--36. 
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated_pct"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1       .1515           .      .1515      .1515
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         import excel "${policy_assumptions}", first clear sheet("ETS_C&T_data")
(3 vars, 19 obs)

.         
.         gen real_permit_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_permit_price = annual_price * (${cpi_`dollar_year'}/${cpi_`y'}) if year == `y'
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         qui sum real_permit_price [aw = allowances_auctioned] if inrange(year, 2005, ${policy_year})

.                 local baseline_price = r(mean)

. 
. 
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.                 
.                 local permit_price = `baseline_price'
.                 
.         }

. 
.         if "${spec_type}" == "current"{
.                 
.                 qui sum real_permit_price if year == `dollar_year'
.                         local permit_price = r(mean)
.                 
.         }

. 
.         local dp_dlogq = `baseline_price' / `ets_CO2_abated_pct'

. 
. ****************************************************
. /* 3. Import Social Costs and Marginal Damages */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carbon.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inrange(year, 2005, ${policy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = `dp_dlogq'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = `dp_dlogq'
.                 local wtp_permits = `wtp_permits_grandfathered' + `wtp_permits_auctioned'
.                 assert `wtp_permits' > 0
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 assert `wtp_`p'' < 0 // Soc. WTP negative for revenue-raising policies.
  6.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  7.                         assert `wtp_soc' < 0
  8.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.                 assert round(`wtp_soc_g' + `wtp_soc_l', 0.00001) == round(`wtp_soc', 0.00001)
.         
.         local total_WTP = `wtp_producers' + (`wtp_soc'*(1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

.         assert `WTP_USPres' == 0

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_producers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} * ${USShareGovtFutureSCC}) * -1

.         assert `fiscal_externality_lr' >= 0 

.         
. local total_cost = `permit_revenue' + `fiscal_externality' + `fiscal_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost' // finite MVPF

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.01) == round(`MVPF', 0.01)

. 
. 
. di in red `total_WTP'
-3.471027

. di in red `total_cost'
114.06026

. di in red `MVPF'
-.03043152

. 
. di in red `WTP_RoW'
14.510578

. di in red `WTP_USFut'
-17.981605

. di in red `WTP_USPres'
0

. 
. di in red `wtp_permits'
131.32333

. 
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = `wtp_soc_g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_soc_g_`1'  = `wtp_CO2' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. 
. global dp_dq_`1' = `dp_dlogq'

. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_s_`1' = 0

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global semie_`1' = `dp_dlogq'

. global permit_price_`1' = `permit_price'

. 
end of do-file

. di ${wtp_soc_g_ets_c}
-134.79436

. run_program ets, mode(baseline)
vmt_adjust: .6154440799999999
(2 vars, 5 obs)
(4 observations deleted)

. *************************************************************
. /* 0. Program: ETS                         */
. *************************************************************
. 
. /* Bayer, Patrick, and Michael Aklin. 2020. 
> "The European Union Emissions Trading System reduced CO2 emissions despite low prices."
> Proceedings of the National Academy of Sciences 117(16):8804-8812. 
> https://doi.org/10.1073/pnas.1918128117
> */
. 
. *****************************
. /* 1. Estimates from Paper */
. *****************************
. 
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.                 preserve
.                         use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.                         qui ds draw_number, not 
.                         global estimates_${name} = r(varlist)
.                         
.                         mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.                 restore
. *       }
.         local ests ${estimates_${name}}
.         foreach var in `ests' {
  2.                 matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.                 local `var' = temp[1,1]
  4.         }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"ets_CO2_abated"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1     -1219.5           .    -1219.5    -1219.5
.         restore
. }

. if "`bootstrap'" == "pe_ci" {
.         preserve
.                 use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}_ci_pe.dta", clear
.                 
. levelsof estimate, local(estimates)
. 
. 
.                 foreach est in `estimates' {
  2.                         sum ${val} if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }
.         restore 
. }

. 
.  
. if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.         
.         local dollar_year = ${policy_year}
.         global MVPF_type = "marginal"
.         
. }

. if "${spec_type}" == "current"{
.         
.         local dollar_year = ${today_year}
.         global MVPF_type = "marginal"
.         
. }

. 
. 
. 
. ****************************************************
. /* 2. Price, Allowance, and Pollution Data */
. ****************************************************
. preserve

. 
.         local total_delta_CO2 = `ets_CO2_abated' * 1000000 // From paper; millions of tons to total tons. 

. 
.         import excel "${policy_assumptions}", first clear sheet("ETS_C&T_data")
(3 vars, 19 obs)

. 
.         egen q = total(allowances_auctioned) if inrange(year, 2008, ${policy_year})
(10 missing values generated)

.         qui sum q if q != .

.                 local permit_q = r(mean)

.                         
.         gen real_annual_price = .
(19 missing values generated)

.         levelsof(year), local(year_loop)
2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 replace real_annual_price = annual_price * (${cpi_`dollar_year'}/${cpi_`y'}) if year == `y' 
  3.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         qui sum real_annual_price [aw = allowances_auctioned] if inrange(year, 2008, ${policy_year}) 

.                 local baseline_price = r(mean)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 local permit_price = `baseline_price' 
.                 
.         }

.                 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum real_annual_price if year == `dollar_year' 
.                         local permit_price = r(mean)
.                 
.         }       

. 
.         local semie = (`baseline_price' / `total_delta_CO2') * `permit_q'

. 
. ****************************************************
. /* 3. Social Costs */
. ****************************************************
.         gen sc_CO2 = .
(19 missing values generated)

.         foreach y of local year_loop {
  2.                 
.                 replace sc_CO2 = (${sc_CO2_`y'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})) if year == `y'
  3.                 // Constant dollars, varying social cost of carbon.
.                 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         if "${spec_type}" == "baseline" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if inrange(year, 2008, ${policy_year}) 
.                         local social_cost_CO2 = r(mean)
.                 
.         }

. 
.         if "${spec_type}" == "current" {
.                 
.                 qui sum sc_CO2 [aw = allowances_auctioned] if year == `dollar_year'
.                         local social_cost_CO2 = r(mean)
.                 
.         }

.         
. restore

. 
. ****************************************************
. /* 4. Cost Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         local permit_revenue = -`semie'
.         local fiscal_externality = -`permit_price'
.         
. }

. 
. local pollutants_list CO2

. 
. ****************************************************
. /* 5. WTP Calculations */
. ****************************************************
. 
. if "${MVPF_type}" == "marginal" {
.         
.         * Producers/Firms WTP (M), +
.         local wtp_permits_grandfathered = 0
.         local wtp_permits_auctioned = -`semie'
.                 local wtp_permits = `wtp_permits_grandfathered' + `wtp_permits_auctioned'
. 
.         local wtp_abatement = 0 // Envelopes out. 
.         
.         local wtp_producers = `wtp_permits' + `wtp_abatement'
.                 
.         * Society WTP (M), - 
.         local wtp_soc = 0       
.         foreach p of local pollutants_list {
  2.                 
.                 if "`p'" == "CO2" {
  3.                         local wtp_`p' = -`social_cost_`p''
  4.                 }
  5.                 
.                 
.                 local wtp_soc = `wtp_soc' + `wtp_`p''
  6.         
.         }
.         
.         local wtp_soc_l = 0
.         local wtp_soc_g = `wtp_CO2'
.         
.         local total_WTP = `wtp_producers' + `wtp_soc_l' + (`wtp_soc_g'*(1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))
. 
. }

. 
. local WTP_USPres = `wtp_soc_l'

. local WTP_USFut = `wtp_soc_g' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (`wtp_soc_g' * (1 - ${USShareFutureSSC})) + `wtp_producers'

. 
. local fiscal_externality_lr = (`wtp_soc_g') * (${USShareFutureSSC} * ${USShareGovtFutureSCC}) * -1      

. local total_cost = `permit_revenue' + `fiscal_externality' + `fiscal_externality_lr'

.         
. 
. ****************************************************
. /* 6. Calculate MVPF (and Cost Effectiveness Metrics) */
. ****************************************************
. local MVPF = `total_WTP'/`total_cost'  

.         assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.01) == round(`MVPF', 0.01)

.         
. ****************************************************
. /* 7. Save Results and Waterfall Components */
. ****************************************************
. global normalize_`1' = 0

. 
. global MVPF_`1' = `MVPF'

. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global cost_`1' = `total_cost'

. global program_cost_`1' = `permit_revenue'

.         
. global WTP_`1' = `total_WTP'

. 
. global wtp_soc_`1' = (`wtp_soc_g' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC})))

. global wtp_soc_g_`1'  = `wtp_soc_g'* (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. 
. global wtp_abatement_`1' = `wtp_abatement'

. global wtp_permits_`1' = `wtp_permits'

. 
. global fisc_ext_t_`1' = `fiscal_externality'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global gov_carbon_`1' = `total_delta_CO2'

. global permit_price_`1' = `permit_price'

. global macc_`1' = (`baseline_price' / `total_delta_CO2')

. 
end of do-file

. di ${wtp_soc_g_ets}
-153.77739

. di ${wtp_permits_ets}
19.094661

. di ${fisc_ext_t_ets}
-7.6853416

. di ${fisc_ext_lr_ets}
3.0031309

. run_program baaqmd
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *************************************************************************************
. /*       0. Program: Vehicle Buyback (BAAQMD_Buyback)                      */
. *************************************************************************************
. /*
> Clunkers or Junkers? Adverse Selection in a Vehicle Retirement Program
> By Ryan Sandler
> https://pubs.aeaweb.org/doi/pdfplus/10.1257/pol.4.4.253
> */
. 
. ********************************
. /* 1. Pull Global Assumptions */
. ********************************
. * Project wide globals
. local discount = ${discount_rate}

. 
. global c4c_interest_rate                                0.03

. 
. *********************************
. /* 2. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.     preserve
.         
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow        
. levelsof estimate, local(estimates)
`"days_accelerated"' `"miles_abated"'
. 
. 
.         foreach est in `estimates' {
  2.             su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1      1394.2           .     1394.2     1394.2

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1     16027.6           .    16027.6    16027.6
.         restore
. }

. 
. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. 
.     ****************************************************
.     /* 3a. Set Dollar Year and Policy Year */
.     ****************************************************
.         if "${spec_type}" == "baseline"{
.                 
.                 local dollar_year = ${policy_year}
.                 
.         }

.         
.         if "${spec_type}" == "current"{
.                 
.                 local dollar_year = ${today_year}
.                 
.         }

. 
.     ****************************************************
.     /* 3b. Policy Category Assumptions */
.     ****************************************************
.     *i. Import car rebate assumptions
.         preserve

.                 import excel "${policy_assumptions}", first clear sheet("car_rebate")
(4 vars, 4 obs)

.                 
.                 levelsof Parameter, local(levels)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_marginal"'

.                 foreach val of local levels {
  2.                         qui sum Estimate if Parameter == "`val'"
  3.                         global `val' = `r(mean)'
  4.                 }

.         
.                 local marginal_valuation = ${marg_valuation}

.                 local prop_marginal = ${prop_marginal}

. 
.         restore 

.         
.     ****************************************************
.     /* 3c. Policy Specific Assumptions */
.     ****************************************************    
.     local year_num = `days_accelerated' / 365 // retire cars 3.8 years earlier

.     local age_retired 26

.         
.     ****************************************************
.     /* 3d. Inflation Adjusted Values */
.     ****************************************************
.     *Convert rebate to current dollars
.     local admin_costs = 240 * (${cpi_`dollar_year'}/${cpi_2000}) // these costs are reported in 2000 $s

.         
.         if "${spec_type}" == "baseline" | "${spec_type}" == "baseline_gen" {
.                 local transfer_payment = 500 * (${cpi_`dollar_year'}/${cpi_2000}) // these costs are reported in 2000 $s
.         }

.         if "${spec_type}" == "current" {
.                 local transfer_payment = 650 * (${cpi_`dollar_year'}/${cpi_2000}) // these costs are reported in 2000 $s
.         }       

.         
.         local adj_rebate = `transfer_payment'

.    
.         
. ************************f****************************
. /* 4. Estimate Emissions of Replaced (Old) Vehicle */
. ****************************************************
. preserve

. 
.         use "${user_specific_assumptions}/files_v${user_name}/Gasoline Externalities/gasoline_vehicle_externalities_no_ethanol_${scc_ind_name}_${dr_ind_name}.dta"
> , clear

.                 keep if year == `dollar_year'
(32 observations deleted)

.                 
.         local cf new    

.         if substr("`cf'", 1, 3) == "new" {
.                 
.                 *******************************************************************************
.                 /* Save Upstream Externalities for Later. */
.                 ******************************************************************************* 
.                 // Want upstream damages for year we are analyzing; emission rates from year vehicle was released.
. 
.                 keep year *upstream* *ethanol*
.                 tempfile upstream_save
.                 save "`upstream_save'", replace
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000005.tmp not found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000005.tmp saved as .dta format
.                                                                 
.                 *******************************************************************************
.                 /* Calculate Per-Gallon Externality from Sulfur. */
.                 ******************************************************************************* 
.                 import excel "${policy_assumptions}", first clear sheet("sulfur_content_gas")
(2 vars, 24 obs)
.                 keep if year == `dollar_year'
(23 observations deleted)
.                 local SO2_gal = sulfur_content_ppm
. 
.                 *******************************************************************************
.                 /* Calculate Per-Gallon Externality from CO, HC, and NOx. */
.                 *******************************************************************************                                         
.                 use "${assumptions_model_year}/combined_Jacobsen_replicated", clear 
.                 qui sum model_year
.                 local my_min = r(min)
.                 local my_max = r(max)
.                 
.                 forval my = `my_min'(1)`my_max' {
  2.                         
.                         qui sum model_year if model_year == `my'
  3.                         if r(mean) == . {
  4.                                 assert !missing(model_year)
  5.                                 insobs 1
  6.                                 replace model_year = `my' if model_year == .
  7.                         }
  8.                         sort model_year
  9.                         
.                 }
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
.                 
.                 // Missing emission rates for select years, consistent with Jacobsen et al. 2023.
.                 ds emissions_new*
emissions_~O  emissions_~C  emissions_~x
.                 foreach var in `r(varlist)' {
  2.                         
.                         ipolate `var' model_year, generate(`var'_fixed) 
  3.                         replace `var' = `var'_fixed if `var' == .
  4.                         drop `var'_fixed
  5.                         
.                 }
(2 real changes made)
(2 real changes made)
(3 real changes made)
.                 keep if model_year == (`dollar_year' - `age_retired') + 1
(63 observations deleted)
.                                                                 
.                 *******************************************************************************
.                 /* Calculate Per-Gallon Externality from CH4, N2O, and PM2.5. */
.                 *******************************************************************************                                 
.                 merge 1:1 model_year using "${assumptions_model_year}/fuel_economy_final.dta", nogen noreport 
.                 
.                 merge 1:1 model_year using "${assumptions_model_year}/GREET_emissions_final", nogen noreport // Emission rates for CH4, N2O, and PM2.5
.                 order model_year mpg
.                 gen CO2_gal = ${CO2_per_gallon}
.                 gen SO2_gal = `SO2_gal' * ${sulfur_ppm_conversion}
.                                 
.                 qui sum model_year if PM25_exhaust != .
.                 local earliest_year = r(min)
.                         
.                 if (`dollar_year' - `age_retired') + 1 < `earliest_year' {
.                         
.                         ds PM25* CH4 N2O
.                         foreach var in `r(varlist)' {
  2.                                 
.                                 qui sum `var' if model_year == `earliest_year'
  3.                                 replace `var' = r(mean) if model_year == (`dollar_year' - `age_retired') + 1
  4.                                 
.                         }
.                         
.                 }
. 
.                 *******************************************************************************
.                 /* Unit Conversions and Standardizing Naming. */
.                 *******************************************************************************                 
.                 // Renaming Variables.
.                 qui ds emissions*
.                 foreach var in `r(varlist)' {
  2.                         
.                         local newname = substr("`var'", 15, .)
  3.                         qui rename `var' `newname'
  4.                         
.                 }
.                                 
.                 // Converting from g/mi to g/gallon. 
.                 qui ds *_gal *year mpg, not
.                 foreach var in `r(varlist)' {
  2.                         
.                         qui gen `var'_gal = `var' * mpg
  3.                         drop `var'
  4.                         
.                 }
.                 qui rename HC_gal VOC_gal
.                 keep if model_year == (`dollar_year' - `age_retired') + 1
(65 observations deleted)
.                 
.                 // Converting from g/gallon to tons/gallon. 
.                 qui ds mpg *_gal
.                 foreach var in `r(varlist)' {
  2.                         
.                         qui replace `var' = `var'/1000000 if `var' != mpg
  3.                         local `var' = r(mean)
  4.                         
.                 }       
.                 
.                 *************************************************
.                 /* Account for Vehicle Decay (Until Age 19). */
.                 *************************************************       
.                 gen age = `age_retired'
.                 gen decay_ind = age - 1
.                 replace decay_ind = ${decay_age_cutoff} if age > ${decay_age_cutoff}
(1 real change made)
.                 replace decay_ind = 0 if model_year < 1975 // Cars pre-1975 don't decay because they didn't have modern emission abatement technologies.
(0 real changes made)
. 
.                 replace CO_gal = CO_gal * (1 + ${CO_decay})^(decay_ind)         
(1 real change made)
.                 replace NOx_gal = NOx_gal * (1 + ${NOx_decay})^(decay_ind)              
(1 real change made)
.                 replace VOC_gal = VOC_gal * (1 + ${HC_decay})^(decay_ind)       
(1 real change made)
.                 
.                 drop age decay_ind
. 
.                 *************************************************
.                 /* Import Social Costs and Value Damages. */
.                 *************************************************       
.                 local ghg CO2 CH4 N2O
.                 foreach g of local ghg {
  2.                         
.                         local social_cost_`g' = ${sc_`g'_`dollar_year'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
  3.                                 
.                 }       
. 
.                 local md_w SO2 PM25 NOx VOC CO
.                 foreach p of local md_w {
  2.                         
.                         local social_cost_`p' = ${md_`p'_`dollar_year'_weighted} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year}})
  3.                         
.                 }
. 
. 
.                 local md_u SO2 PM25 NOx VOC NH3 CO
.                 foreach p of local md_u  {
  2.                         
.                         local social_cost_`p'_uw = ${md_`p'_`dollar_year'_unweighted} * (${cpi_`dollar_year'} / ${cpi_${md_dollar_year}})
  3.                         
.                 }
.                 
.                 * Pollution Externalities: Social Cost * Emissions per Gallon
.                 qui foreach val of global pollutants_list {
.                 
.                 ********************************************************************************************
.                 /* Collect Results and Bring in Per-Mile Upstream. */
.                 ********************************************************************************************
.                 assert model_year == (`dollar_year' - `age_retired') + 1
.                 gen year = `dollar_year'
.                 order year model_year
.                 merge 1:1 year using "`upstream_save'", nogen noreport assert(3)
.                 cap drop wtp_upstream_CO
.                 cap drop wtp_upstream_VOC
.         }

. 
.         *******************************************************************************
.         **# /* Account for Changing Social Costs. */
.         *******************************************************************************                 
.         // Handle changes over vehicle lifetime the same for all counterfactuals, with exception of VMT.
.         cap drop wtp_upstream_VOC wtp_upstream_CO *accidents *congestion // Need to keep local and global damages split.

.         qui ds

.         local numvars : word count `r(varlist)'

.         cap drop model_year

.         
.         // Adjust for Ethanol
.         
.         ****************************************************
.         /* Adjust Components Proportional to Gas Usage.  */
.         ****************************************************
.         ds *upstream* wtp_CO2 wtp_CH4 wtp_N2O
wtp_upst~CO2  wtp_upstr~2O  wtp_upstre~x  wtp_upst~SO2  local_VOC_~m  local_CO_u~m  wtp_CH4
wtp_upstre~4  wtp_upstre~3  wtp_upstr~25  global_VOC~m  global_CO_~m  wtp_CO2       wtp_N2O

.         foreach var in `r(varlist)' {
  2.                 
.                 replace `var' = `var' * (1 - share_ethanol)
  3.                 // NOTE: SO2 reported ppm already reflects sulfur content.
.                 // NOTE: EPA fuel economy accounts for mileage penalty from ethanol. 
.                 // NOTE: Lifecycle analysis of ethanol includes CH4 and N2O from burning methane, so scaling down.
.         
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.         
.         assert round(local_VOC + global_VOC, 0.0001) == round(wtp_VOC, 0.0001)

.         assert round(local_CO + global_CO, 0.0001) == round(wtp_CO, 0.0001)

.         
.         
.         ****************************************************
.         /* Adjust Local Pollution using % Change Estimates.  */
.         ****************************************************
.         local ethanol_local_adj         NOx CO VOC

.         foreach p of local ethanol_local_adj {
  2.                 
.                 if "`p'" == "NOx" {
  3.                         replace wtp_`p' = wtp_`p' * ((1 + (${`p'_change_e10}*(share_ethanol/0.098))))                   
  4.                 }
  5.                 if inlist("`p'", "CO", "VOC") {
  6.                         replace local_`p' = local_`p' * ((1 + (${`p'_change_e10}*(share_ethanol/0.098))))
  7.                         replace global_`p' = global_`p' * ((1 + (${`p'_change_e10}*(share_ethanol/0.098))))
  8.                 }
  9.                 
.                 // Assuming linear relationship b/w ethanol share and emission rate for low levels of ethanol. Paper tests percent decline in emissions for fuel w
> / 9.8% ethanol.
.                 // Leaving PM2.5 unadjusted.
. 
.         }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

. 
.         replace wtp_CO = local_CO + global_CO
(1 real change made)

.         replace wtp_VOC = local_VOC + global_VOC
(1 real change made)

.         
.         ****************************************************
.         /* Account for Upstream Ethanol Emissions.  */
.         ****************************************************    
. 
.         local upstream_CO2_ethanol = (((${upstream_CO2_intensity_`dollar_year'} + ${luc_CO2_intensity}) * ${mj_per_gal_ethanol})/1000000) * (${sc_CO2_`dollar_year
> '} * (${cpi_`dollar_year'}/${cpi_${sc_dollar_year}}))

.         // Grams per MJ, multiplied by MJ per/gallon of ethanol, converted to tons, multiplied by SCC.
.         
.         replace wtp_upstream_CO2 = wtp_upstream_CO2 + (`upstream_CO2_ethanol' * share_ethanol)
(1 real change made)

.         // Already scaled down petroleum upstream emissions by share petroleum; now adding upstream ethanol emissions.
.         
.         drop wtp_CO wtp_VOC share_ethanol

.                                 
.         *******************************************************************************
.         /* Everything Expressed in Nominal Dollars; Convert to SCC Dollar Year. */
.         *******************************************************************************         
.         ds year mpg, not
wtp_SO2       local_CO      local_VOC     wtp_PM25_e~t  wtp_NOx       wtp_N2O       wtp_upstre~4  wtp_upstre~3  wtp_upstr~25  global_VOC~m  global_CO_~m
wtp_CO2       global_CO     global_VOC    wtp_PM25_TBW  wtp_CH4       wtp_upst~CO2  wtp_upstr~2O  wtp_upstre~x  wtp_upst~SO2  local_VOC_~m  local_CO_u~m

.         foreach var in `r(varlist)' {
  2.                 
.                 qui replace `var' = `var' * (${cpi_${sc_dollar_year}} / ${cpi_`dollar_year'}) // All in 2020 dollars (${sc_dollar_year}).
  3.                 
.         }

.         
.         gen age = .
(1 missing value generated)

.         replace age = `age_retired' if _n == 1
(1 real change made)

.         order year age

.         insobs 3, after(1)
(3 observations added)

.         replace age = (age[1] + _n - 1)
(3 real changes made)

.         replace age = `age_retired' + `year_num' - 1 if _n == 4 // Not retiring exactly 4 years early.
(1 real change made)

.         pause

.         replace mpg = mpg[1]
(3 real changes made)

.         replace year = year[1] + _n - 1
(3 real changes made)

.                         
.         *******************************************************************************
.         /* Import VMT (Varies with Counterfactual). */
.         ******************************************************************************* 
.         gen vmt = .
(4 missing values generated)

.         gen days = 365 * (age - age[_n - 1])    
(1 missing value generated)

.         replace days = 365 if _n == 1
(1 real change made)

.         order year days age vmt

.         replace vmt = (`miles_abated')/(`year_num' * 365) * days
(4 real changes made)

.         egen vmt_check = total(vmt)

.         drop vmt_check days

.                                 
.         *******************************************************************************
.         /* Deal with Static Externalities. */
.         *******************************************************************************         
.         local no_adj_ext                SO2 PM25 NH3

.         qui foreach p of local no_adj_ext {

.         
.         ***********************************************
.         /* Deal with Time-varying Externalities. */
.         ***********************************************         
.         local adj_ext                   CO2 N2O CH4 NOx CO VOC

.         
.         foreach p of local adj_ext {
  2.                 
.                 if inlist("`p'", "CO2", "CH4", "N2O") { // Social costs rising over time; All expressed in 2020 dollars already.
  3.                         
.                         levelsof(year), local(y_loop)
  4.                         foreach y of local y_loop {
  5.                                 
.                                 qui sum year 
  6.                                 assert `dollar_year' == r(min)
  7.                                 
.                                 replace wtp_`p' = wtp_`p'[1] * (${sc_`p'_`y'}/${sc_`p'_`dollar_year'}) if year == `y'
  8.                                 replace wtp_upstream_`p' = wtp_upstream_`p'[1] * (${sc_`p'_`y'}/${sc_`p'_`dollar_year'}) if year == `y'
  9.                                         
.                         }
 10.                 
.                 }
 11.                         
.                 if "`p'" == "NOx" { // Vehicle has finished decaying
 12.                         
.                         foreach y of local y_loop {
 13.                                 
.                                 replace wtp_`p' = wtp_`p'[1]                    
 14.                                 replace wtp_upstream_`p' = wtp_upstream_`p'[1]
 15.                                 
.                         }       
 16.                                                 
.                 }
 17.                 
.                 if "`p'" == "VOC" | "`p'" == "CO" {
 18.                                                 
.                         replace local_`p'_upstream = local_`p'_upstream[1] // No changes to local upstream damages over time.
 19. 
.                         foreach y of local y_loop {
 20.                                 
.                                 if "`p'" == "VOC" {
 21.                                         local decay = ${HC_decay} // Only doing this step b/c decay factor is named HC_decay, not VOC_decay.
 22.                                 }
 23.                                 if "`p'" == "CO" {
 24.                                         local decay = ${CO_decay}
 25.                                 }                                       
 26.                                 
.                                 replace global_`p'_upstream = global_`p'_upstream[1] * (${sc_CO2_`y'}/${sc_CO2_`dollar_year'}) if year == `y' 
 27.                                 // Same approach as upstream CO2 adjustment. GWP already applied in earlier calculations. Scale by annual change in SCC; consta
> nt GWP.
.                                 
.                                 replace global_`p' = global_`p'[1] * (${sc_CO2_`y'}/${sc_CO2_`dollar_year'}) if year == `y' 
 28.                                 // VOC decay = HC decay rate. Rising social costs and emission rate. Vehicle has stopped decaying.
.                                 
.                                 replace local_`p' = local_`p'[1] 
 29.                                 // No change in VOC's and CO's marginal damages (local). Vehicle has stopped decaying. 
.                                 
.                         }
 30.                         
.                 }
 31.                 
.         }       
2020 2021 2022 2023
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
2020 2021 2022 2023
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
2020 2021 2022 2023
(0 real changes made)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(3 real changes made)
(3 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(3 real changes made)
(0 real changes made)
(0 real changes made)
(3 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(3 real changes made)
(0 real changes made)
(0 real changes made)
(3 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)
(1 real change made)
(1 real change made)
(0 real changes made)

.                                         
.         *******************************************************************************
.         /*      Sum Damages to Calculate Total Local / Global Externality.      */
.         *******************************************************************************                                 
.         ** First, check that no observations are empty
.         qui ds

.         foreach var in `r(varlist)' {
  2.                 
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         qui sum `var' if year == `y'
  5.                         assert `var' != .
  6.                         
.                 }
  7.                 
.         }

.         
.         
.         ** Next, Sum to Construct Global / Local Externalities, NOT INCLUDING PER-MILE EXTERNALITIES.
.         gen wtp_local = 0

.         qui foreach val of global damages_local {

. 
.         gen wtp_global = 0 

.         qui foreach val of global damages_global {

. 
.         gen wtp_total = wtp_local + wtp_global

.         
.         local wtp_accidents_mi = ${accidents_per_mi} // In 2020 dollars already, from gas_vehicle_externalities file.

.         local wtp_congestion_mi = ${congestion_per_mi} // In 2020 dollars already, from gas_vehicle_externalities file.

.         local wtp_PM25_TBW_mi = wtp_PM25_TBW / mpg // Calculated above, after all expressed in 2020 dollars.

.         
.         gen wtp_local_per_mi = `wtp_accidents_mi' + `wtp_congestion_mi' + `wtp_PM25_TBW_mi' // Does not vary over time.

.         
.         levelsof(year), local(year_loop)
2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 qui sum wtp_local if year == `y'
  3.                         di in red "Local Pollution in `y'"
  4.                         di in red r(mean) * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}) 
  5.                         
.                 qui sum wtp_global if year == `y'
  6.                         di in red "Global Pollution in `y'"
  7.                         di in red r(mean) * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}) 
  8.                 
.                 qui sum wtp_local_per_mi if year == `y'
  9.                         di in red "Local Driving in `y'"
 10.                         di in red r(mean) * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}) 
 11.                 
.         }
Local Pollution in 2020
.64130707
Global Pollution in 2020
1.9569972
Local Driving in 2020
.11829054
Local Pollution in 2021
.64130707
Global Pollution in 2021
1.9983362
Local Driving in 2021
.11829054
Local Pollution in 2022
.64130707
Global Pollution in 2022
2.0299827
Local Driving in 2022
.11829054
Local Pollution in 2023
.64130707
Global Pollution in 2023
2.0713227
Local Driving in 2023
.11829054

.         
.         keep year age vmt mpg wtp_total wtp_local* wtp_global

.         gen gallons_used = vmt / mpg

.                 
.         *******************************************************************************
.         /*         Calculate Damages over Vehicle Lifetime and Discount.         */
.         ******************************************************************************* 
.         local components_to_calculate total global local CO2 profits gallons taxes savings mpg local_driving

.         foreach c of local components_to_calculate {
  2.                 
.                 if "`c'" == "mpg" {
  3.                         
.                         continue
  4.                         
.                 }
  5.                 
.                 if "`c'" != "mpg" {
  6.                         
.                         gen `c' = .
  7.                                         
.                 }
  8.                                         
.         }
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)

. 
.         foreach c of local components_to_calculate {
  2.         
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         if inlist("`c'", "total", "global", "local") {
  5. 
.                                 replace `c' = (gallons_used * wtp_`c') / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN SCC DOLLAR YEAR DOLLARS.
  6.                                 
.                         }
  7.                         
.                         if inlist("`c'", "local_driving") {
  8.                                 
.                                 replace `c' = (vmt * wtp_local_per_mi) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN SCC DOLLAR YEAR DOLLARS.
  9.                                 
.                         }
 10. 
.                         if inlist("`c'", "profits") {
 11.                                 
.                                 replace `c' = (gallons_used * ${nominal_gas_markup_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // NO
> MINAL DOLLARS.
 12.                                 
.                         }
 13.                         
.                         if inlist("`c'", "taxes") {
 14.                                 
.                                 replace `c' = (gallons_used * ${nominal_gas_tax_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // NOMIN
> AL DOLLARS.
 15.                                 
.                         }
 16.                         
.                         if inlist("`c'", "savings") {
 17.                                 
.                                 replace `c' = (gallons_used * ${nominal_gas_price_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // NOM
> INAL DOLLARS.
 18.                                 
.                         }
 19.                         
.                         if inlist("`c'", "CO2") {
 20.                                 
.                                 replace `c' = (gallons_used * (wtp_global / ${sc_CO2_`y'})) if year == `y' // Not discounting CO2 (b/c in tons).
 21.                                 
.                         }       
 22.                         
.                         if inlist("`c'", "gallons") {
 23.                                 
.                                 replace `c' = gallons_used if year == `y' // Not discounting gallons.
 24.                                 
.                         }                                       
 25.                         
.                         if inlist("`c'", "mpg") {
 26.                                 
.                                 continue
 27.                                 
.                         }
 28.                         
.                 }
 29.                 
.         }       
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                 
.         foreach c of local components_to_calculate {
  2.         
.                 if "`c'" != "mpg" {
  3.                         
.                         egen total_`c' = total(`c')
  4.                         drop `c'
  5.                         global old_`c' = total_`c' 
  6.                         global old_`c'_rbd = 0
  7.                         
.                         if inlist("`c'", "global", "local", "local_driving") {
  8.                                 di in red "`c'"
  9.                                 di in red ${old_`c'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
 10.                         }
 11.                                 
.                 }
 12. 
.                 if "`c'" == "mpg" {
 13.                         
.                         global old_`c' = mpg 
 14.                         
.                 }
 15.                 
.         }       
global
1529.502
local
487.86057
local_driving
1843.44

.                 
. ****************************************************
. /* 5. Estimate Emissions of Replacement (New) Vehicle */
. ****************************************************
. use "${user_specific_assumptions}/files_v${user_name}/Vehicle Lifetime Damages/vmt_dist_avg.dta", clear

. collapse (mean) age [aw=age_share]

. assert age + `year_num' < ${decay_age_cutoff}

. 
.         ****************************************************
.         /* Estimate Emissions of Replacement (New) Vehicle -- Assuming Fleet Average */
.         ****************************************************
.         use "${user_specific_assumptions}/files_v${user_name}/Gasoline Externalities/gasoline_vehicle_externalities_${scc_ind_name}_${dr_ind_name}.dta", clear    
>               

.         keep if year == `dollar_year'
(32 observations deleted)

.         drop CO2_total wtp_total wtp_local wtp_global *accidents *congestion wtp_CO wtp_VOC 

.         qui ds

.         local numvars : word count `r(varlist)'

.         
.         drop wtp_upstream_CO wtp_upstream_VOC share_ethanol

.         
.         // Already ethanol-adjusted b/c using fleet average.
. 
.         *******************************************************************************
.         /* Everything Expressed in Nominal Dollars; Convert to SCC Dollar Year. */
.         *******************************************************************************         
.         ds year mpg, not
wtp_SO2       wtp_PM25_e~t  wtp_NOx       wtp_N2O       wtp_upstre~4  wtp_upstre~3  wtp_upstr~25  local_VOC     global_VOC~m  local_CO      global_CO_~m
wtp_CO2       wtp_PM25_TBW  wtp_CH4       wtp_upst~CO2  wtp_upstr~2O  wtp_upstre~x  wtp_upst~SO2  global_VOC    local_VOC_~m  global_CO     local_CO_u~m

.         foreach var in `r(varlist)' {
  2.                 
.                 qui replace `var' = `var' * (${cpi_${sc_dollar_year}} / ${cpi_`dollar_year'}) // All in 2020 dollars (${sc_dollar_year}).
  3.                 
.         }

.         
.         gen age = .
(1 missing value generated)

.         replace age = 1
(1 real change made)

.         order year age

.         insobs 3, after(1)
(3 observations added)

.         replace age = (age[1] + _n - 1)
(3 real changes made)

.         replace age = `year_num' if _n == 4 // Not retiring exactly 4 years early.
(1 real change made)

.         replace mpg = mpg[1]
(3 real changes made)

.         replace year = year[1] + _n - 1
(3 real changes made)

. 
.         *******************************************************************************
.         /* Import VMT (Varies with Counterfactual). */
.         ******************************************************************************* 
.         gen vmt = .
(4 missing values generated)

.         gen days = 365 * (age - age[_n - 1])    
(1 missing value generated)

.         replace days = 365 if _n == 1
(1 real change made)

.         order year days age vmt

.         replace vmt = (`miles_abated')/(`year_num' * 365) * days
(4 real changes made)

. 
.                 egen vmt_check = total(vmt)

.                         drop vmt_check days

.                                         
.                         
.         *******************************************************************************
.         /* Deal with Static Externalities. */
.         *******************************************************************************         
.         local no_adj_ext                SO2 PM25 NH3

.         qui foreach p of local no_adj_ext {

.         
.         ***********************************************
.         /* Deal with Time-varying Externalities. */
.         ***********************************************         
.         local adj_ext                   CO2 N2O CH4 NOx CO VOC

.         
.         qui foreach p of local adj_ext {

.         
.         *******************************************************************************
.         /*      Sum Damages to Calculate Total Local / Global Externality.           */
.         *******************************************************************************                                 
.         ** First, check that no observations are empty
.         qui ds

.         foreach var in `r(varlist)' {
  2.                 
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         qui sum `var' if year == `y'
  5.                         assert `var' != .
  6.                         
.                 }
  7.                 
.         }

.         
.         
.         ** Next, Sum to Construct Global / Local Externalities, NOT INCLUDING PER-MILE EXTERNALITIES.
.         gen wtp_local = 0

.         qui foreach val of global damages_local {

. 
.         gen wtp_global = 0 

.         qui foreach val of global damages_global {

.                 
.         gen wtp_total = wtp_local + wtp_global

.         
.         local wtp_accidents_mi = ${accidents_per_mi} // In 2020 dollars already, from gas_vehicle_externalities file.

.         local wtp_congestion_mi = ${congestion_per_mi} // In 2020 dollars already, from gas_vehicle_externalities file.

.         local wtp_PM25_TBW_mi = wtp_PM25_TBW / mpg // Calculated above, after all expressed in 2020 dollars.

.         
.         gen wtp_local_per_mi = `wtp_accidents_mi' + `wtp_congestion_mi' + `wtp_PM25_TBW_mi' // Does not vary over time. 

.         
.         levelsof(year), local(year_loop)
2020 2021 2022 2023

.         foreach y of local year_loop {
  2.                 
.                 qui sum wtp_local if year == `y'
  3.                         di in red "Local Pollution in `y'"
  4.                         di in red r(mean) * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}) 
  5.                         
.                 qui sum wtp_global if year == `y'
  6.                         di in red "Global Pollution in `y'"
  7.                         di in red r(mean) * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}) 
  8.                 
.                 qui sum wtp_local_per_mi if year == `y'
  9.                         di in red "Local Driving in `y'"
 10.                         di in red r(mean) * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}}) 
 11.                 
.         }
Local Pollution in 2020
.22570442
Global Pollution in 2020
1.890611
Local Driving in 2020
.11759418
Local Pollution in 2021
.2316592
Global Pollution in 2021
1.9312645
Local Driving in 2021
.11759418
Local Pollution in 2022
.23787757
Global Pollution in 2022
1.9623976
Local Driving in 2022
.11759418
Local Pollution in 2023
.24317996
Global Pollution in 2023
2.0030157
Local Driving in 2023
.11759418

.         
.         keep year age *vmt* mpg wtp_total wtp_local* wtp_global

.         
.         // Replacement vehicle should have fleet-wide averages in year one. 
.         assert round(wtp_global[1], 0.001) == round(${gas_ldv_ext_global_`dollar_year'} * (${cpi_2020}/${cpi_`dollar_year'}), 0.001)

.         
.         *******************************************************************************
.         /*         Account for Per-Mile Externalities if Accounting for Rebound.         */
.         ******************************************************************************* 
.         local cost_of_driving_change = ((${nominal_gas_price_`dollar_year'}/mpg) - (${nominal_gas_price_`dollar_year'}/${old_mpg}))/(${nominal_gas_price_`dollar_y
> ear'}/${old_mpg})

.         local vmt_change = `cost_of_driving_change' * ${vmt_rebound_elasticity}

.         
.         gen rebound_vmt = (vmt * (1 + `vmt_change')) - vmt

.                 replace vmt = vmt * (1 + `vmt_change')
(4 real changes made)

.                 
.         gen gallons_used = vmt / mpg    

.         gen rebound_gallons = rebound_vmt / mpg         

.         
.         di in red `cost_of_driving_change'
-.11364508

.         di in red `vmt_change'
.02524057

.         
.         *******************************************************************************
.         /*         Calculate Damages over Vehicle Lifetime and Discount.         */
.         ******************************************************************************* 
.         foreach c of local components_to_calculate {
  2.                 
.                 if "`c'" == "mpg" {
  3.                         
.                         continue
  4.                         
.                 }
  5.                 
.                 if "`c'" != "mpg" {
  6.                         
.                         gen `c' = .
  7.                         gen `c'_rbd = .
  8.                                         
.                 }
  9.                                         
.         }
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)
(4 missing values generated)

.         
.         foreach c of local components_to_calculate {
  2.         
.                 qui levelsof(year), local(year_loop)
  3.                 foreach y of local year_loop {
  4.                         
.                         if inlist("`c'", "total", "global", "local") {
  5. 
.                                 replace `c' = (gallons_used * wtp_`c') / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN SCC DOLLAR YEAR DOLLARS.
  6.                                 replace `c'_rbd = (rebound_gallons * wtp_`c') / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN SCC DOLLAR YEAR D
> OLLARS.
  7.                                 
.                         }
  8.                         
.                         if inlist("`c'", "local_driving") {
  9.                                 
.                                 replace `c' = (vmt * wtp_local_per_mi) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN SCC DOLLAR YEAR DOLLARS.
 10.                                 replace `c'_rbd = (rebound_vmt * wtp_local_per_mi) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // IN SCC DOLLAR Y
> EAR DOLLARS.                             
 11.                                 
.                         }
 12. 
.                         if inlist("`c'", "profits") {
 13.                                 
.                                 replace `c' = (gallons_used * ${nominal_gas_markup_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // NO
> MINAL DOLLARS.
 14.                                 replace `c'_rbd = (rebound_gallons * ${nominal_gas_markup_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year ==
>  `y' // NOMINAL DOLLARS.
 15.                                 
.                         }
 16.                         
.                         if inlist("`c'", "taxes") {
 17.                                 
.                                 replace `c' = (gallons_used * ${nominal_gas_tax_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // NOMIN
> AL DOLLARS.
 18.                                 replace `c'_rbd = (rebound_gallons * ${nominal_gas_tax_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y
> ' // NOMINAL DOLLARS.
 19.                                 
.                         }
 20.                         
.                         if inlist("`c'", "savings") {
 21.                                 
.                                 replace `c' = (gallons_used * ${nominal_gas_price_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == `y' // NOM
> INAL DOLLARS.
 22.                                 replace `c'_rbd = (rebound_gallons * ${nominal_gas_price_`dollar_year'}) / ((1 + `discount')^(`y' - `dollar_year')) if year == 
> `y' // NOMINAL DOLLARS.
 23.                                 
.                         }
 24.                         
.                         if inlist("`c'", "CO2") {
 25.                                 
.                                 replace `c' = (gallons_used * (wtp_global / ${sc_CO2_`y'})) if year == `y' // Not discounting CO2 (b/c in tons).
 26.                                 replace `c'_rbd = (rebound_gallons * (wtp_global / ${sc_CO2_`y'})) if year == `y' // Not discounting CO2 (b/c in tons).
 27.                                 
.                         }       
 28.                         
.                         if inlist("`c'", "gallons") {
 29.                                 
.                                 replace `c' = gallons_used if year == `y' // Not discounting gallons.
 30.                                 replace `c'_rbd = rebound_gallons if year == `y' // Not discounting gallons.
 31.                                 
.                         }                                       
 32.                         
.                         if inlist("`c'", "mpg") {
 33.                                 
.                                 continue
 34.                                 
.                         }
 35.                         
.                 }
 36.                 
.         }       
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

.                         
.         foreach c of local components_to_calculate {
  2.         
.                 if "`c'" != "mpg" {
  3.                         
.                         egen total_`c' = total(`c')
  4.                         egen total_`c'_rbd = total(`c'_rbd)
  5.                         drop `c'
  6.                         
.                         global new_`c' = total_`c' 
  7.                         global new_`c'_rbd = total_`c'_rbd
  8.                         
.                         if inlist("`c'", "global", "local", "local_driving") {
  9.                                 di in red "`c'"
 10.                                 di in red ${new_`c'} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
 11.                                 di in red ${new_`c'_rbd} * (${cpi_`dollar_year'} / ${cpi_${sc_dollar_year}})
 12.                         }
 13.                 
.                 }
 14. 
.                 if "`c'" == "mpg" {
 15.                         
.                         global new_`c' = mpg 
 16.                         
.                 }
 17.                 
.         }       
global
1343.3917
33.073188
local
161.80528
3.9835115
local_driving
1878.8435
46.255568

.                                 
.         *******************************************************************************
.         /*  6.  Collect Results.         */
.         *******************************************************************************         
.         clear

.         insobs 2
(2 observations added)

.         gen vehicle_type = ""
(2 missing values generated)

.         replace vehicle_type = "old" if _n == 1
variable vehicle_type was str1 now str3
(1 real change made)

.         replace vehicle_type = "new" if _n == 2
(1 real change made)

. 
.         qui foreach c of local components_to_calculate {

.         order vehicle_type mpg

. 
.         *********************************
.         /* 7. Intermediate Calculations */
.         *********************************
.         *Environmental Benefit
.         local local_benefit = (local[1] - local[2]) + (local_driving[1] - local_driving[2])

.         local local_rbd = -(local_rbd[2] + local_driving_rbd[2])

.         local global_benefit = global[1] - global[2]

.         local global_rbd = -global_rbd[2]

. 
.         local tax_rev_loss = (taxes[1] - taxes[2]) + ((profits[1] - profits[2]) * ${gasoline_effective_corp_tax})

.         local tax_rev_loss_no_rbd = (taxes[1] - taxes[2] + taxes_rbd[2]) + ((profits[1] - profits[2] + profits_rbd[2]) * ${gasoline_effective_corp_tax})        

.         local profit_loss = ((profits[1] - profits[2]) * (1 - ${gasoline_effective_corp_tax})) * -1

.         local profit_loss_no_rbd = ((profits[1] - profits[2] + profits_rbd[2]) * (1 - ${gasoline_effective_corp_tax})) * -1

. 
.         local carbon_reduced = CO2[1] - CO2[2]

.         local carbon_rbd = -CO2_rbd[2]

. 
.         local gas_private_savings = savings[1] - savings[2]

.         local gas_private_savings_no_rbd = savings[1] - savings[2] + savings_rbd[2]

. 
.         pause

. 
.         di in red `global_benefit'
186.11034

.         di in red `global_benefit' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))
182.5454

.         di in red (local[1] - local[2])
326.05529

.         di in red (local_driving[1] - local_driving[2])
-35.403499

.         di in red `local_benefit'
290.65179

.         
. restore

. **************************
. /* 8. Cost Calculations  */
. **************************
. local program_cost = `adj_rebate' + `admin_costs'

. local fiscal_externality_tax = (`prop_marginal' * `tax_rev_loss')

. 
. *************************
. /* 9. WTP Calculations */
. *************************
. *Consumers
. local inframarginal = `adj_rebate'

. 
. local marginal =  0

. 
. * Social Costs
. local local_pollutants = `prop_marginal' * `local_benefit'

. local global_pollutants = `prop_marginal' * `global_benefit'

. local carbon_reduction = `prop_marginal' * `carbon_reduced'

. local producers = `prop_marginal' * `profit_loss'

. 
. if "${value_profits}" == "no" {
.         
.         local producers = 0
.         local fiscal_exernality_corp = 0        
.         
. }

. 
. if "${value_savings}" == "yes" {
.         
.         local wtp_savings = `prop_marginal' * `gas_private_savings'
.         
. }

. else {
.         
.         local wtp_savings = 0
.         
. }

. 
. 
. 
. * Social benefits from reduced carbon 
. local WTP = `marginal' + `inframarginal' + ///
>                         (`global_pollutants' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))) + `local_pollutants' + `producers' + `wtp_savings'

. 
. // Quick decomposition
. local WTP_USPres = `marginal' + `inframarginal' + `local_pollutants' + `producers' + `wtp_savings'

. local WTP_USFut = `global_pollutants' * (${USShareFutureSSC} - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. local WTP_RoW = (1-(${USShareFutureSSC})) * `global_pollutants' 

. 
. local fiscal_externality_lr = -`global_pollutants' * (${USShareFutureSSC} * ${USShareGovtFutureSCC})

. 
. 
. **************************
. /* 10. MVPF Calculations */
. **************************
. local total_cost = `program_cost' + `fiscal_externality_lr' + `fiscal_externality_tax' 

. 
. local MVPF = `WTP'/`total_cost'

. di in red `MVPF'
1.0299329

. 
. assert round((`WTP_USPres' + `WTP_USFut' + `WTP_RoW')/`total_cost', 0.1) == round(`MVPF', 0.1)

. 
. ****************************************
. /* 11. Cost-Effectiveness Calculations */
. ****************************************
. local used_sales_2020 = 39.3 // millions

. local new_sales_2020 = 14.2 // millions

. local used_price_2020 = 27409 // CarGurus

. local new_price_2020 = 39592 // KBB

. local car_price = (`used_price_2020' * `used_sales_2020' + `new_price_2020' * `new_sales_2020') / (`used_sales_2020' + `new_sales_2020') // average transaction co
> st

. 
. local leasing_cost = ${c4c_interest_rate} * (`days_accelerated' / 365) * `car_price' // interest is 3% 

. di in red "days accelerated is `days_accelerated'"
days accelerated is 1394.2

. di in red "leasing cost is `leasing_cost'"
leasing cost is 3511.392244916144

. 
. local lifetime_gas_savings = 0.92 * `gas_private_savings_no_rbd' - `tax_rev_loss_no_rbd' +  `profit_loss_no_rbd'

. di in red "gas savings are `gas_private_savings_no_rbd'"
gas savings are 196.6298598317988

. di in red "tax revenue is `tax_rev_loss_no_rbd'"
tax revenue is 51.31069357184716

. di in red "profit loss is `profit_loss_no_rbd'"
profit loss is -41.83714135297752

. di in red "gas savings are `lifetime_gas_savings'"
gas savings are 87.75163612043022

. 
. local resource_cost = `leasing_cost' - `lifetime_gas_savings'

. di in red "resource cost is `resource_cost'"
resource cost is 3423.640608795714

. local q_carbon_mck = (`carbon_reduced' - `carbon_rbd')

. 
. di in red "carbon is `q_carbon_mck'"
carbon is 1.13760269806445

. 
. local resource_ce = `resource_cost' / `q_carbon_mck'

. di in red "resource cost per ton is `resource_ce'"
resource cost per ton is 3009.52223005518

. pause

. 
. local gov_carbon = `prop_marginal' * `carbon_reduced'

. assert `q_carbon_mck' >= `gov_carbon'

. 
. ****************
. /* 12. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `MVPF'

. global cost_`1' = `total_cost'

. global WTP_`1' = `WTP'

. 
. global program_cost_`1' = `program_cost'

. 
. global wtp_marg_`1' = `marginal' 

. global wtp_inf_`1' = `inframarginal'

. 
. global wtp_glob_`1' = (`global_pollutants' - `global_rbd'*`prop_marginal') * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_loc_`1' = (`local_pollutants' - `local_rbd'*`prop_marginal')

. 
. global wtp_soc_rbd_`1' = (`global_rbd'*`prop_marginal' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))) + (`local_rbd'*`prop_marginal')

. global wtp_r_glob_`1' = `global_rbd'*`prop_marginal' * (1 - (${USShareFutureSSC} * ${USShareGovtFutureSCC}))

. global wtp_r_loc_`1' = `local_rbd'*`prop_marginal'

. 
.         assert round(${wtp_glob_`1'} + ${wtp_loc_`1'} + ${wtp_r_loc_`1'} + ${wtp_r_glob_`1'}, 0.01) == round((`global_pollutants' * (1 - (${USShareFutureSSC} * ${
> USShareGovtFutureSCC}))) + `local_pollutants', 0.01)

.         
. global wtp_prod_`1' = `producers'

. 
. global c_savings_`1' = `prop_marginal' * `gas_private_savings'

. 
. global fisc_ext_t_`1' = `fiscal_externality_tax'

. global fisc_ext_lr_`1' = `fiscal_externality_lr'

. 
. global q_CO2_`1' = `carbon_reduced' *`prop_marginal'

. global q_CO2_mck_`1' = `carbon_reduced'

. global resource_cost_`1' = -`gas_private_savings'

. 
. 
. global WTP_USPres_`1' = `WTP_USPres'

. global WTP_USFut_`1'  = `WTP_USFut'

. global WTP_RoW_`1'    = `WTP_RoW'

. 
. global wtp_prod_s_`1' = `producers'

. 
. global admin_cost_`1' = `admin_costs'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
end of do-file

. di ${MVPF_baaqmd}
1.0299329

. run_program c4c_federal
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *************************************************************************************
. /*       0. Program: U.S. Cash-for-Clunkers program - Federal         */
. *************************************************************************************
. 
. /*
> Li, Shanjun, Joshua Linn, and Elisheba Spiller. 
> Evaluating "Cash-for-Clunkers": Program effects on auto sales and the environment. 
> Journal of Environmental Economics and management, 2013 65(2), 175-193.
> * https://www.sciencedirect.com/science/article/pii/S0095069612000678
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4c_federal no uncorrected_vJK current

. 
. *********************************
. /* 1. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"mpg_diff"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1         .21           .        .21        .21
.         restore
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. *********************************
. /* 3. Run .ado File. */
. *********************************
. local mpg_diff = `mpg_diff' / (678359/6270967)

. run_vehicle_retirement `dollar_year', mpg_improvement(`mpg_diff')
(4 vars, 4 obs)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_marginal"'
(22 observations deleted)
Asserting Cost of Driving Falls due to the Higher MPG
Asserting VMT Increases with Higher Fuel-Economy Vehicle.
(32 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved as .dta format
(2 vars, 24 obs)
(23 observations deleted)
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
emissions_~O  emissions_~C  emissions_~x
(2 real changes made)
(2 real changes made)
(3 real changes made)
(63 observations deleted)
(65 observations deleted)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
wtp_upst~CO2  wtp_upstr~2O  wtp_upstre~x  wtp_upst~SO2  local_VOC_~m  local_CO_u~m  wtp_CH4
wtp_upstre~4  wtp_upstre~3  wtp_upstr~25  global_VOC~m  global_CO_~m  wtp_CO2       wtp_N2O
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(2 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved as .dta format
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
gallons_u~bd  total_rbd     global_rbd    local_rbd     CO2_rbd       profits_rbd   gallons_rbd   local_driv~d  taxes_rbd     savings_rbd   rebound_vmt
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 observation deleted)
(1 real change made)
wtp_SO2       global_CO     wtp_PM25_e~t  wtp_CH4       wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m
wtp_CO2       local_VOC     wtp_PM25_TBW  wtp_N2O       wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_accide~s
local_CO      global_VOC    wtp_NOx       wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_conges~n
(1 real change made)
(null assertion)
(19 real changes made)
2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(18 observations deleted)
total_total   total_global  total_local   total_loca~g
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
total_total   total_global  total_local   total_CO2     total_prof~s  total_gall~s  total_loca~g  total_taxes   total_savi~s

. 
. ****************************************
. /* 4. Cost-Effectiveness Calculations */
. ****************************************
. local resource_cost = `r(resource_cost)'

. local q_carbon_mck = `r(q_carbon_mck)'

. local resource_ce = `resource_cost' / `q_carbon_mck'

. local gov_carbon = `q_carbon_mck'

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global total_cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. 
. global wtp_marg_`1' = `r(wtp_marg)' // Already scaled by prop. marginal. 

. global wtp_inf_`1' = `r(wtp_inf)' // Already scaled by prop. marginal. 

. 
. global wtp_soc_`1' = `r(wtp_soc)'

. global wtp_glob_`1' = `r(wtp_soc_global)'

. global wtp_loc_`1' = `r(wtp_soc_local)'

. 
. global c_savings_`1' = `r(c_savings)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_lr_`1' =  `r(fisc_ext_lr)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. global q_CO2_`1' = `r(q_CO2)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod)'

. 
. global wtp_soc_rbd_`1' = `r(wtp_soc_rbd)'

.         global wtp_r_glob_`1' = `r(wtp_r_glob)'

.         global wtp_r_loc_`1' = `r(wtp_r_loc)'

.         
. assert round(${wtp_glob_`1'} + ${wtp_loc_`1'} + ${wtp_r_loc_`1'} + ${wtp_r_glob_`1'}, 0.01) == round(${wtp_soc_`1'} + ${wtp_soc_rbd_`1'} , 0.01)

. 
. 
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_soc_g wtp_soc_l wtp_soc_rbd wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_soc_g", "wtp_soc_l", "wtp_soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ext_s", "fisc_ext_lr", "cost" 

. 
. global `1'_name "Cash for Clunkers (Federal)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marg."' 2 `"Infr."' 3 `""Env" "Global""' 4 `""Env" "Local""' 5 `"Rebound"'  6 `""Gasoline" "Producers""'  7 `""Total" "WTP""' ///
>                 9 `""Program" "Cost""' 10 "Taxes" 11 "Subsidies" 12 `" "Climate" "FE" "' 13 `""Govt" "Cost""'

. 
. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
end of do-file

. run_program c4c_texas
vmt_adjust: .6154440799999999
(4 vars, 5 obs)
(4 observations deleted)

. *************************************************************************************
. /*       0. Program: U.S. Cash-for-Clunkers program - Texas         */
. *************************************************************************************
. 
. /*
> Hoekstra, Mark, Steven L. Puller, and Jeremy West. 
> "Cash for Corollas: When stimulus reduces spending." 
> American Economic Journal: Applied Economics 9, no. 3 (2017): 1-35.
> * https://www.aeaweb.org/articles?id=10.1257/app.20150172
> */
. 
. display `"All the arguments, as typed by the user, are: `0'"'
All the arguments, as typed by the user, are: c4c_texas no uncorrected_vJK current

. 
. *********************************
. /* 1. Estimates from Paper */
. *********************************
. /* Import estimates from paper, giving option for corrected estimates.
> When bootstrap!=yes import point estimates for causal estimates.
> When bootstrap==yes import a particular draw for the causal estimates. */
. 
. if "`1'" != "" global name = "`1'"

. local bootstrap = "`2'"

. if "`3'" != "" global folder_name = "`3'"

. if "`bootstrap'" == "yes" {
. *       if ${draw_number} ==1 {
.         preserve
.             use "${code_files}/2b_causal_estimates_draws/${folder_name}/${ts_causal_draws}/${name}.dta", clear
.             qui ds draw_number, not 
.             global estimates_${name} = r(varlist)
.             
.             mkmat ${estimates_${name}}, matrix(draws_${name}) rownames(draw_number)
.         restore
. *       }
.     local ests ${estimates_${name}}
.     foreach var in `ests' {
  2.         matrix temp = draws_${name}["${draw_number}", "`var'"]
  3.         local `var' = temp[1,1]
  4.     }
. }

. if "`bootstrap'" == "no" {
.         preserve
.                 
. qui import excel "${code_files}/2a_causal_estimates_papers/${folder_name}/${name}.xlsx", clear sheet("wrapper_ready") firstrow          
. 
. levelsof estimate, local(estimates)
`"mpg_diff"'
. 
. 
. 
. 
.                 foreach est in `estimates' {
  2.                         su pe if estimate == "`est'"
  3.                         local `est' = r(mean)
  4.                 }

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
          pe |          1       .6578           .      .6578      .6578
.         restore 
. }

. 
. ****************************************************
. /* 3. Set local assumptions unique to this policy */
. ****************************************************
. if "`4'" == "baseline" | "`4'" == "baseline_gen"{
.         local dollar_year = ${policy_year}
. }

. if "`4'" == "current"{
.         local dollar_year = ${today_year}
. }

. 
. 
. *********************************
. /* 3. Run .ado File. */
. *********************************
. local mpg_diff = (`mpg_diff' / 0.2107)

. run_vehicle_retirement `dollar_year', mpg_improvement(`mpg_diff')
(4 vars, 4 obs)
`"avg_c4c_scrap_age"' `"federal_rebate"' `"marg_valuation"' `"prop_marginal"'
(22 observations deleted)
Asserting Cost of Driving Falls due to the Higher MPG
Asserting VMT Increases with Higher Fuel-Economy Vehicle.
(32 observations deleted)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp not found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000006.tmp saved as .dta format
(2 vars, 24 obs)
(23 observations deleted)
(1 observation added)
(1 real change made)
(1 observation added)
(1 real change made)
emissions_~O  emissions_~C  emissions_~x
(2 real changes made)
(2 real changes made)
(3 real changes made)
(63 observations deleted)
(65 observations deleted)
(0 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
wtp_upst~CO2  wtp_upstr~2O  wtp_upstre~x  wtp_upst~SO2  local_VOC_~m  local_CO_u~m  wtp_CH4
wtp_upstre~4  wtp_upstre~3  wtp_upstr~25  global_VOC~m  global_CO_~m  wtp_CO2       wtp_N2O
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(2 real changes made)
(1 real change made)
(1 real change made)
(1 real change made)
(file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp not found)
file C:\Users\acreeron\AppData\Local\Temp\ST_7d64_000007.tmp saved as .dta format
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 missing values generated)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
gallons_u~bd  total_rbd     global_rbd    local_rbd     CO2_rbd       profits_rbd   gallons_rbd   local_driv~d  taxes_rbd     savings_rbd   rebound_vmt
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 observation deleted)
(1 real change made)
wtp_SO2       global_CO     wtp_PM25_e~t  wtp_CH4       wtp_upstre~4  wtp_upstre~x  global_VOC~m  local_CO_u~m
wtp_CO2       local_VOC     wtp_PM25_TBW  wtp_N2O       wtp_upstr~2O  wtp_upstr~25  local_VOC_~m  wtp_accide~s
local_CO      global_VOC    wtp_NOx       wtp_upst~CO2  wtp_upstre~3  wtp_upst~SO2  global_CO_~m  wtp_conges~n
(1 real change made)
(null assertion)
(19 real changes made)
2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(19 missing values generated)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(18 observations deleted)
total_total   total_global  total_local   total_loca~g
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
total_total   total_global  total_local   total_CO2     total_prof~s  total_gall~s  total_loca~g  total_taxes   total_savi~s

. 
. ****************************************
. /* 4. Cost-Effectiveness Calculations */
. ****************************************
. local resource_cost = `r(resource_cost)'

. local q_carbon_mck = `r(q_carbon_mck)'

. local resource_ce = `resource_cost' / `q_carbon_mck'

. local gov_carbon = `q_carbon_mck'

. 
. ****************
. /* 5. Outputs */
. ****************
. global normalize_`1' = 1

. 
. global MVPF_`1' = `r(MVPF)'

. global cost_`1' = `r(total_cost)'

. global total_cost_`1' = `r(total_cost)'

. global WTP_`1' = `r(WTP)'

. 
. global program_cost_`1' = `r(program_cost)'

. 
. global wtp_marg_`1' = `r(wtp_marg)' // Already scaled by prop. marginal. 

. global wtp_inf_`1' = `r(wtp_inf)' // Already scaled by prop. marginal. 

. 
. global wtp_soc_`1' = `r(wtp_soc)'

. global wtp_glob_`1' = `r(wtp_soc_global)'

. global wtp_loc_`1' = `r(wtp_soc_local)'

. 
. global c_savings_`1' = `r(c_savings)'

. 
. global fisc_ext_t_`1' = `r(fisc_ext_t)'

. global fisc_ext_lr_`1' =  `r(fisc_ext_lr)'

. 
. global WTP_USPres_`1' = `r(WTP_USPres)'

. global WTP_USFut_`1'  = `r(WTP_USFut)'

. global WTP_RoW_`1'    = `r(WTP_RoW)'

. 
. global gov_carbon_`1' = `gov_carbon'

. global resource_ce_`1' = `resource_ce'

. global q_carbon_mck_`1' = `q_carbon_mck'

. 
. global q_CO2_`1' = `r(q_CO2)'

. 
. global wtp_prod_`1' = `r(wtp_prod)'

.         global wtp_prod_s_`1' = `r(wtp_prod)'

. 
. global wtp_soc_rbd_`1' = `r(wtp_soc_rbd)'

.         global wtp_r_glob_`1' = `r(wtp_r_glob)'

.         global wtp_r_loc_`1' = `r(wtp_r_loc)'

. 
.         
. assert round(${wtp_glob_`1'} + ${wtp_loc_`1'} + ${wtp_r_loc_`1'} + ${wtp_r_glob_`1'}, 0.01) == round(${wtp_soc_`1'} + ${wtp_soc_rbd_`1'} , 0.01)

.         
.         
. ** for waterfall charts
. 
. global wtp_comps_`1' wtp_marg wtp_inf wtp_soc_g wtp_soc_l wtp_soc_rbd wtp_prod WTP

. global wtp_comps_`1'_commas "wtp_marg", "wtp_inf", "wtp_soc_g", "wtp_soc_l", "wtp_soc_rbd", "wtp_prod", "WTP"

. 
. global cost_comps_`1' program_cost fisc_ext_t fisc_ext_s fisc_ext_lr cost 

. global cost_comps_`1'_commas "program_cost", "fisc_ext_t", "fisc_ext_s", "fisc_ext_lr", "cost" 

. 
. global `1'_name "Cash for Clunkers (Federal)"

. global `1'_ep = "N"

. 
. global `1'_xlab 1 `"Marg."' 2 `"Infr."' 3 `""Env" "Global""' 4 `""Env" "Local""' 5 `"Rebound"'  6 `""Gasoline" "Producers""'  7 `""Total" "WTP""' ///
>                 9 `""Program" "Cost""' 10 "Taxes" 11 "Subsidies" 12 `" "Climate" "FE" "' 13 `""Govt" "Cost""'

. 
. *color groupings
. global color_group1_`1' = 2

. global color_group2_`1' = 5

. global color_group3_`1' = 6

. global cost_color_start_`1' = 9

. global color_group4_`1' = 12

. 
end of do-file

