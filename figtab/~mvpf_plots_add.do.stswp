************************************************************************
/* Purpose: Produce MVPF Plots (w/ and w/o Bars) for All MVPF Types */
************************************************************************

************************************************************************
/* Step #0: Set Macros that Will NOT Change. */
************************************************************************
local bar_dark_blue = "8 51 97"
local bar_blue = "36 114 237"
local bar_light_blue = "115 175 235"
local bar_light_orange = "252 179 72"
local bar_dark_orange = "214 118 72"
local bar_light_gray = "181 184 191"

local output_path "${output_fig}/figures_appendix"

if inlist("`2'", "Fig4_scc193", "Fig5a_scc76", "Fig5b_scc337", "Fig8_scc193", "Fig9_scc193") {
	local output_path "${output_fig}/figures_appendix"
}

************************************************************************
/* Step #0a: Define Data Paths for Scenarios */
************************************************************************

local path_scc_193 = "${code_files}/4_results/2024-11-15_09-44-45__full_current_193_nov"
local path_no_lbd = "${code_files}/4_results/2024-11-15_01-31-00__full_current_no_lbd_193_nov"
local path_no_profit = "${code_files}/4_results/2024-11-15_02-01-52__full_current_noprofits_193_nov"
local path_e_savings = "${code_files}/4_results/2024-11-15_01-32-09__full_current_savings_193_nov"
local path_cali_grid = "${code_files}/4_results/2025-04-28_10-02-55__full_current_193_CA_grid"
local path_mi_grid = "${code_files}/4_results/"
local path_zero_rebound = "${code_files}/4_results/2025-05-13_10-30-42__full_current_193_zero_rebound"
local path_double_rebound = "${code_files}/4_results/2025-05-13_15-32-51__full_current_193_double_rebound"

local path_scc_337 = "${code_files}/4_results/2024-11-16_15-20-07__full_current_337_nov" 
local path_scc_337_no_lbd = "${code_files}/4_results/2025-05-12_10-00-24__full_current_no_lbd_337"
local path_scc_337_no_profit = "${code_files}/4_results/2025-05-12_11-02-47__full_current_noprofits_337" 
local path_scc_337_e_savings = "${code_files}/4_results/2025-05-14_10-08-21__full_current_savings_337" 
local path_scc_337_cali_grid = "${code_files}/4_results/2025-05-14_01-58-31__full_current_337_CA_grid" 
local path_scc_337_mi_grid = "${code_files}/4_results/2025-05-14_00-32-09__full_current_337_MI_grid" 
local path_scc_337_zero_rebound = "${code_files}/4_results/2025-05-13_17-00-23__full_current_337_zero_rebound" 
local path_scc_337_double_rebound = "${code_files}/4_results/2025-05-13_17-43-31__full_current_337_double_rebound" 

local path_scc_76 = "${code_files}/4_results/2024-11-16_14-43-50__full_current_76_nov"
local path_scc_76_no_lbd = "${code_files}/4_results/2025-05-12_10-16-37__full_current_no_lbd_76"
local path_scc_76_no_profit = "${code_files}/4_results/2025-05-12_14-55-09__full_current_noprofits_76"
local path_scc_76_e_savings = "${code_files}/4_results/2025-05-14_11-16-30__full_current_savings_76"
local path_scc_76_cali_grid = "${code_files}/4_results/2025-05-14_01-15-05__full_current_76_CA_grid" 
local path_scc_76_mi_grid = "${code_files}/4_results/2025-05-13_23-48-41__full_current_76_MI_grid" 
local path_scc_76_zero_rebound = "${code_files}/4_results/2025-05-13_19-40-13__full_current_76_zero_rebound" 
local path_scc_76_double_rebound = "${code_files}/4_results/2025-05-13_22-11-19__full_current_76_double_rebound"

* Identify primary SCC from command argument
local primary_scenario = "`3'"
di "Primary scenario: `primary_scenario'"

* Set the primary data path based on the primary scenario
local primary_path = "`path_`primary_scenario''"
di in red "Primary data path: `primary_path'"

if "`4'" == "split"{
    local RoW_color = "`bar_dark_orange'"
    local output_path "${output_fig}/figures_appendix"
}
else{
    local RoW_color = "`bar_blue'"
}

if "`c(os)'"=="MacOSX" local suf svg
else local suf wmf


************************************************************************
/* Step #0b: Set Macros that CAN Change. */
************************************************************************

if "`1'" != ""{
	if "`1'" == "subsidies"{
		local run_subsidies yes
		local run_revenue_raisers no
		local run_international no
	}
	else if "`1'" == "taxes"{
		local run_subsidies no
		local run_revenue_raisers yes
		local run_international no
	}
	else if "`1'" == "intl"{
		local run_subsidies no
		local run_revenue_raisers no
		local run_international yes
	}
}

* setting manually
else{
	local run_subsidies									yes
	local run_revenue_raisers							no
	local run_international								no
	local run_ce_mvpf_plot								no
}

local subsidy_censor_value  						5
local tax_censor_value 								1.5
local international_censor_value 					6 // Differs b/c of how we handle infinite MVPFs.

local include_other_subsidies						no

local nm_mvpf_plot									no

************************************************************************
local primary_scenario  		`3'
local plot_name			 		`2'
************************************************************************
************************************************************************
/* Step #1: Merge Output and Policy Details. */
************************************************************************
preserve
    import excel "${code_files}/policy_details_v3.xlsx", clear first
    tempfile policy_labels
    save "`policy_labels'", replace
restore

di in red "Primary data path: `primary_path'"

* First load the primary dataset
use "`primary_path'/compiled_results_all_uncorrected_vJK.dta", clear
merge m:1 program using "`policy_labels'", nogen noreport keep(3)
cap drop if broad_category == "Regulation"

* Save non-marginal MVPFs for later (if toggle enabled).
if "`nm_mvpf_plot'" == "yes" {
    preserve
        use "${code_files}/4_results/non_marginal/non_marginal_mvpfs_lbd.dta", clear
        
        levelsof(policy), local(nm_loop) 
        foreach p of local nm_loop {
            qui sum mvpf if policy == "`p'"
            local `p'_nm_mvpf = r(mean)
        }
        
        qui sum mvpf if policy == "wind" 
        global nma_wind = `r(mean)' 
        if ${nma_wind} > `subsidy_censor_value' {
            global nma_wind = `subsidy_censor_value'
        }
        
        qui sum mvpf if policy == "solar"
        global nma_solar = `r(mean)' 
        if ${nma_solar} > `subsidy_censor_value' {
            global nma_solar = `subsidy_censor_value'
        }
        
        qui sum mvpf if policy == "bevs"
        global nma_bevs = `r(mean)'     
        if ${nma_bevs} > `subsidy_censor_value' {
            global nma_bevs = `subsidy_censor_value'
        }
    restore
}

* Define scenarios to process based on command arguments
local scenarios = ""
foreach arg_num in 4 5 6 7 8 9 10 11 12 13 14 15 {
    if "``arg_num''" != "" {
        local scenarios "`scenarios' ``arg_num''"
    }
}

* Save main dataset to tempfile before processing
tempfile main_dataset
save "`main_dataset'", replace

* Process each additional scenario
foreach scenario of local scenarios {
    * Skip the primary scenario since we already loaded it
    if "`scenario'" != "`primary_scenario'" {
        di as text "Processing `scenario' dataset"
        
        * Determine dataset path
        local dataset_path = "`path_`scenario''"
        
        * Check if we have a path for this scenario
        if "`dataset_path'" != "" {
            di as text "  Using path: `dataset_path'"
            
            * Load the dataset
            use "`dataset_path'/compiled_results_all_uncorrected_vJK.dta", clear
            
            * Merge with policy labels
            merge m:1 program using "`policy_labels'", nogen noreport keep(3)
            cap drop if broad_category == "Regulation"
            
            * Process the data
            keep if inlist(component_type, "MVPF", "cost", "WTP_USPres", "WTP_USFut", "WTP_RoW", "WTP", "WTP_cc", "program_cost", "admin_cost")
            sort program component_type component_value
            qui by program component_type component_value: gen dup = cond(_N==1,0,_n)
            drop if dup > 1
            drop dup
            
            * Normalize by program cost
            replace component_value = 0 if (component_type == "admin_cost" & missing(component_value)) | (component_type == "admin_cost" & program == "care")
            levelsof(program), local(program_loop)
            foreach p of local program_loop {
                qui sum component_value if component_type == "program_cost" & program == "`p'"
                local program_cost = r(mean)
                local normalization = `program_cost'
                replace component_value = component_value / `normalization' if inlist(component_type, "WTP", "WTP_cc", "cost", "WTP_RoW", "WTP_USFut", "WTP_USPres") & program == "`p'"
            }
            drop if component_type == "program_cost" | component_type == "admin_cost"
            
            * Keep only MVPF values
            keep if component_type == "MVPF"
            
            * Rename to create scenario-specific MVPF column
            rename component_value MVPF_`scenario'
            keep program MVPF_`scenario'
            
            * Save to tempfile
            tempfile `scenario'_data
            save "``scenario'_data'", replace
            di as text "  Saved `scenario' data to tempfile"
        }
    }
}

* Load main dataset back
use "`main_dataset'", clear

* Keep only MVPF values in the main dataset before merging
keep if component_type == "MVPF"


* Merge in MVPF values from each additional scenario
foreach scenario of local scenarios {
    if "`scenario'" != "`primary_scenario'" {
        capture confirm file "``scenario'_data'"
        if _rc == 0 {
            merge 1:1 program using "``scenario'_data'", keep(1 3) nogen
            di as text "Merged `scenario' MVPF values"
        }
    }
}

* Rename the primary MVPF to include scenario name for consistency
rename component_value MVPF_`primary_scenario'


* Display sample of merged data
di as text _n "Sample of merged MVPF data:"
list program MVPF_* in 1/5, abbreviate(40)

e
************************************************************************
/* Step #2: Prepare MVPF Data for Visualization */
************************************************************************
* Create a clean dataset with one row per program

keep program *label* broad_category MVPF_* across_group_ordering in_group_ordering extended international regulation table_order

* Sort data for visualization
sort across_group_ordering in_group_ordering
	
************************************************************************
/* Step #3: Produce MVPF Plot for Subsidies. */
************************************************************************	
	
if "`run_subsidies'" == "yes" {
	 preserve

		keep if broad_category == "Subsidies"
		drop if extended == 1

		if "`include_other_subsidies'" == "no" {
			
			drop if group_label == "Other Subsidies"
			local OtherSubsidies_max = 1
			local OtherSubsidies_min = 1
			local OtherSubsidies_xpos = -20
			
		}	
			
		gsort -across_group_ordering -in_group_ordering
		gen yaxis = _n


		
		************************************************************************
		/* Step #3a: Insert Blank Observations b/w Categories. */
		************************************************************************	
		levelsof(across_group_ordering), local(group_loop)
		foreach g of local group_loop {
			
			qui sum across_group_ordering
			local max_group_number = r(max)
			
			replace yaxis = _n 
			qui sum yaxis if across_group_ordering == `g'
				
			if `g' != `max_group_number' {
				insobs 1, before(r(min)) 
				replace program_label_long = "— — — — — — — — — — — — — — —" if program_label_long == ""
			}
				
			replace yaxis = _n 
				
		}
		insobs 1, before(1)
		replace yaxis = _n
		replace program_label_long = "— — — — — — — — — — — — — — —" if _n == 1

		************************************************************************
		/* Step #3b: Labeling. */
		************************************************************************
		labmask(yaxis), value(program_label_long)
		qui sum yaxis

		local ylabel_min = r(min)
		local ylabel_max = r(max)
			
		// Horizontal y-axis lines.	
		levelsof(yaxis), local(yloop)
		foreach y of local yloop {
			
			qui sum yaxis if program_label_long == "— — — — — — — — — — — — — — —" & yaxis == `y' & _n != 1
			local yline_list  `"`yline_list' `r(mean)'"'
			
		}		
		
		// Group label positioning.
		gen group_label_code = subinstr(group_label, " ", "", .)
		levelsof(group_label_code), local(group_loop)
		foreach g of local group_loop {
			
			qui sum yaxis if group_label_code == "`g'"
			local `g'_xpos = r(mean)
			local `g'_min = r(min) - 1 
			local `g'_max = r(max) + 1	
				
			if "`g'" == "WindProductionCredits" {
			
				qui sum yaxis if group_label_code == "`g'"
				local `g'_min = r(min) - 1 
				local `g'_max = r(max) + 0.25
				
			}

		}

		************************************************************************
		/* Step #3c: Censoring and Edge Cases. */
		************************************************************************
		
	foreach var of varlist MVPF_* {
    replace `var' = `subsidy_censor_value' if `var' > `subsidy_censor_value' & `var' != .
    replace `var' = 0 if `var' < 0
		}

************************************************************************
/* Step #3d: Produce Scatter Plot. */
************************************************************************

local scenarios "scc_193 no_lbd no_profit e_savings cali_grid scc_337 scc_337_no_lbd scc_337_no_profit scc_76 scc_76_no_lbd scc_76_no_profit"
local symbols "circle X square triangle diamond circle X square circle X square circle X square"
local colors "blue blue blue blue blue eltblue eltblue navy green orange red purple pink"

* Build marker properties dynamically for all scenarios
forvalues i = 1/8 {
    local scenario : word `i' of `scenarios'
    local symbol : word `i' of `symbols'
    local color : word `i' of `colors'
    
    * Create the marker properties local for this scenario
    local marker_props_`scenario' "msize(small) msymbol(`symbol') mcolor(`color') xaxis(1)"
}

* Start with the basic graph command
local scatter_command "tw"

* Add primary scenario to scatter command (this should always be included)
local scatter_command "`scatter_command' (scatter yaxis MVPF_`primary_scenario', `marker_props_`primary_scenario'')"

local legend_order `"1 "SCC 193""'
local legend_count = 1

* Define all possible scenarios to check
local all_scenarios "scc_76 scc_337 scc_1367 no_lbd e_savings no_profit cali_grid"

* Loop through each scenario and add to graph command if it exists
foreach scenario of local all_scenarios {
    * Skip primary scenario as it's already added
    if "`scenario'" != "`primary_scenario'" {
        * Check if variable exists in dataset
        capture confirm variable MVPF_`scenario'
        if _rc == 0 {
            local legend_count = `legend_count' + 1
            local scatter_command "`scatter_command' (scatter yaxis MVPF_`scenario', `marker_props_`scenario'')"
            
            * Build the legend order
            if "`scenario'" == "scc_76" local scenario_label "SCC 76"
            else if "`scenario'" == "scc_337" local scenario_label "SCC 337"
            else if "`scenario'" == "scc_1367" local scenario_label "SCC 1367"
            else if "`scenario'" == "no_lbd" local scenario_label "No LBD"
            else if "`scenario'" == "e_savings" local scenario_label "Energy Savings"
            else if "`scenario'" == "no_profit" local scenario_label "No Profit" 
            else if "`scenario'" == "cali_grid" local scenario_label "California Grid"
            else local scenario_label "`scenario'"
            
            local legend_order `"`legend_order' `legend_count' "`scenario_label'""'
        }
    }
}

* Group options logically into fewer categories
local plot_region "plotregion(margin(l=0 b=0 t=0)) graphregion(color(white) margin(l=8))"
local titles "title(MVPF with Different Specifications for Subsidies) ytitle("") xtitle(MVPF, axis(1) size(small))"

* Y-axis options
local y_options "ylabel(`ylabel_min'(1)`ylabel_max', value labsize(tiny) angle(0) nogrid tlw(0.15) tlength(0))"
local y_options "`y_options' yline(`yline_list', lcolor(black%30) lw(0.05) lpattern(dash)) yscale(range(`ylabel_min' `ylabel_max'))"

* X-axis options
local x_options "xscale(range(1.5 `subsidy_censor_value') axis(1) titlegap(+1.5)) xlab(0(1)`subsidy_censor_value', axis(1) nogrid)"

* Create a loop for all the text labels - with proper handling of spaces
local text_labels ""
foreach category in WindProductionCredits ResidentialSolar ElectricVehicles ApplianceRebates VehicleRetirement HybridVehicles Weatherization {
    * Get position value for this category
    local pos_val = "``category'_xpos'"
    
    * Automatically insert spaces before capital letters
    * This approach manually checks each character which is more reliable than regex
    local readable_label = ""
    local first_char = 1
    
    * Process each character in the category name
    forvalues i = 1/`=length("`category'")' {
        local char = substr("`category'", `i', 1)
        
        * Check if it's uppercase (except for the first character)
        if "`char'" != lower("`char'") & `first_char' == 0 {
            * Add a space before uppercase letter
            local readable_label = "`readable_label' `char'"
        }
        else {
            * Add the character as is
            local readable_label = "`readable_label'`char'"
        }
        
        * No longer on first character
        local first_char = 0
    }
    
    local text_labels `"`text_labels' text(`pos_val' -2.5 "`readable_label'", size(vsmall))"'
}

* Legend options - using legend_order which we know works
local legend_options "legend(order(`legend_order') rows(2) position(bottom) size(small))"

* Combine all options into the scatter command
local scatter_command "`scatter_command', `plot_region' `titles' `y_options' `x_options' `text_labels' `legend_options'"

* Execute the graph command
`scatter_command'

graph export "`output_path'/mvpf_comparison_`plot_name'.png", replace
cap graph export "`output_path'/mvpf_comparison_`plot_name'.wmf", replace


